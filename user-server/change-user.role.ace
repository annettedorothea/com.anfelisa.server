HttpServer Java 

com.anfelisa.user.changeuserrole

scenarios 

	ChangeUserRoleToAdmin
		GIVEN
			com.anfelisa.user.registeruser.RegisterUser
			com.anfelisa.user.registeruser.RegisterUserAdmin
		WHEN com.anfelisa.user.ChangeUserRole {
			editedUserId: "uuid-${testId}",
			newRole: "ADMIN"
		}
		authorization "Admin": "admin-password"
		THEN 200
		persistence 
			roleWasChangedToADMIN User selectBy(userId : "uuid-${testId}") 
			shouldBe
				{
					email : "annette.pohl@anfelisa.de",
					emailConfirmed: false,
					password: "password",
					role: "ADMIN",
					userId: "uuid-${testId}",
					username: "Annette-${testId}"
				}

	ChangeUserRoleToStudent
		GIVEN
			ChangeUserRoleToAdmin
		WHEN com.anfelisa.user.ChangeUserRole {
			editedUserId: "uuid-${testId}",
			newRole: "STUDENT"
		}
		authorization "Admin": "admin-password"
		THEN 200
		persistence 
			roleWasChangedToSTUDENT User selectBy(userId : "uuid-${testId}") 
			shouldBe
				{
					email : "annette.pohl@anfelisa.de",
					emailConfirmed: false,
					password: "password",
					role: "STUDENT",
					userId: "uuid-${testId}",
					username: "Annette-${testId}"
				}

	ChangeUserRoleUnauthorized
		GIVEN
			com.anfelisa.user.registeruser.RegisterUser
			com.anfelisa.user.registeruser.RegisterUserAdmin
		WHEN com.anfelisa.user.ChangeUserRole {
			editedUserId: "uuid-${testId}",
			newRole: "ADMIN"
		}
		authorization "Admin": "wrong"
		THEN 401
		persistence 
			roleWasNotChanged User selectBy(userId : "uuid-${testId}") 
			shouldBe
				{
					email : "annette.pohl@anfelisa.de",
					emailConfirmed: false,
					password: "password",
					role: "STUDENT",
					userId: "uuid-${testId}",
					username: "Annette-${testId}"
				}

	ChangeUserRoleNoAuthorization
		GIVEN
			com.anfelisa.user.registeruser.RegisterUser
			com.anfelisa.user.registeruser.RegisterUserAdmin
		WHEN com.anfelisa.user.ChangeUserRole {
			editedUserId: "uuid-${testId}",
			newRole: "ADMIN"
		}
		THEN 401
		persistence 
			roleWasNotChanged User selectBy(userId : "uuid-${testId}") 
			shouldBe
				{
					email : "annette.pohl@anfelisa.de",
					emailConfirmed: false,
					password: "password",
					role: "STUDENT",
					userId: "uuid-${testId}",
					username: "Annette-${testId}"
				}

	ChangeUserRoleNotAdmin
		GIVEN
			com.anfelisa.user.registeruser.RegisterUser
			com.anfelisa.user.registeruser.RegisterUserAdmin
		WHEN com.anfelisa.user.ChangeUserRole {
			editedUserId: "uuid-${testId}",
			newRole: "ADMIN"
		}
		authorization "Annette-${testId}": "password"
		THEN 401
		persistence 
			roleWasNotChanged User selectBy(userId : "uuid-${testId}") 
			shouldBe
				{
					email : "annette.pohl@anfelisa.de",
					emailConfirmed: false,
					password: "password",
					role: "STUDENT",
					userId: "uuid-${testId}",
					username: "Annette-${testId}"
				}

	ChangeUserRoleUserDoesNotExist
		GIVEN
			com.anfelisa.user.registeruser.RegisterUser
			com.anfelisa.user.registeruser.RegisterUserAdmin
		WHEN com.anfelisa.user.ChangeUserRole {
			editedUserId: "doesNotExist",
			newRole: "ADMIN"
		}
		authorization "Admin": "admin-password"
		THEN 400

	ChangeUserRoleAdminRoleMustNotBeChanged
		GIVEN
			com.anfelisa.user.registeruser.RegisterUserAdmin
		WHEN com.anfelisa.user.ChangeUserRole {
			editedUserId: "uuid-admin",
			newRole: "STUDENT"
		}
		authorization "Admin": "admin-password"
		THEN 400
		persistence 
			roleWasNotChanged User selectBy(userId : "uuid-admin") 
			shouldBe 
				{
					email : "annette.pohl@anfelisa.de",
					emailConfirmed: false,
					password: "admin-password",
					role: "ADMIN",
					userId: "uuid-admin",
					username: "Admin"
				}


