HttpServer Java 

com.anfelisa.user.deleteuser

scenarios 

	DeleteUserAsAdmin
		GIVEN
			com.anfelisa.user.registeruser.RegisterUser
			com.anfelisa.user.registeruser.RegisterUserAdmin
		WHEN com.anfelisa.user.DeleteUser {
			usernameToBeDeleted: "Annette-${testId}"
		}
		authorization "Admin": "admin-password"
		THEN 200
		persistence
			userWasDeleted User selectBy(username: "Annette-${testId}") shouldBe null
			
	DeleteUserUnauthorizedNotAdmin
		GIVEN
			com.anfelisa.user.registeruser.RegisterTwoUsers
		WHEN com.anfelisa.user.DeleteUser {
			usernameToBeDeleted: "Annette-${testId}"
		}
		authorization "Anne-${testId}": "pw"
		THEN 401
		persistence
			userWasNotDeleted User selectBy(username: "Annette-${testId}") shouldBe notNull

	DeleteUserUnauthorized
		GIVEN
			com.anfelisa.user.registeruser.RegisterUser
		WHEN com.anfelisa.user.DeleteUser {
			usernameToBeDeleted: "Annette-${testId}"
		}
		THEN 401
		persistence
			userWasNotDeleted User selectBy(username: "Annette-${testId}") shouldBe notNull

	DeleteUserAsStudent
		GIVEN
			com.anfelisa.user.registeruser.RegisterUser
		WHEN com.anfelisa.user.DeleteUser {
			usernameToBeDeleted: "Annette-${testId}"
		}
		authorization "Annette-${testId}": "password"
		THEN 200
		persistence
			userWasDeleted User selectBy(username: "Annette-${testId}") shouldBe null

	DeleteUserDoesNotExist
		GIVEN
			com.anfelisa.user.registeruser.RegisterUserAdmin
		WHEN com.anfelisa.user.DeleteUser {
			usernameToBeDeleted: "doesNotExist"
		}
		authorization "Admin": "admin-password"
		THEN 400

	DeleteUserLastAdmin
		GIVEN
			com.anfelisa.user.registeruser.RegisterUserAdmin
		WHEN com.anfelisa.user.DeleteUser {
			usernameToBeDeleted: "Admin"
		}
		authorization "Admin": "admin-password"
		THEN 400
		persistence
			userWasNotDeleted User selectBy(username: "Admin") shouldBe notNull

	DeleteAdmin
		GIVEN
			com.anfelisa.user.registeruser.RegisterUserAdmin
			com.anfelisa.user.registeruser.RegisterUser
			com.anfelisa.user.changeuserrole.ChangeUserRoleToAdmin exclude GIVEN
		WHEN com.anfelisa.user.DeleteUser {
			usernameToBeDeleted: "Annette-${testId}"
		}
		authorization "Admin": "admin-password"
		THEN 200
		persistence
			userWasDeleted User selectBy(username: "Annette-${testId}") shouldBe null


	DeleteCascades
		GIVEN
			com.anfelisa.box.scorecard.ScoreCardAsAdmin
			com.anfelisa.box.scorecard.ScoreCard0
		WHEN com.anfelisa.user.DeleteUser {
			usernameToBeDeleted: "Annette-${testId}"
		}
		authorization "Annette-${testId}" : "password"
		THEN 200
		persistence
			userWasDeleted User selectBy(username: "Annette-${testId}") shouldBe null
			boxWasDeleted Box selectBy(boxId: "boxId-${testId}") shouldBe null
			accessToCategoryWasDeleted UserAccessToCategory selectByPrimaryKey( categoryId: "boxId-${testId}", userId: "uuid-${testId}") shouldBe null
			allCategoriesWereDeleted Category filterAndCountBy (rootCategoryId: "boxId-${testId}") shouldBe 0
			allCardsWereDeleted Card filterAndCountBy (rootCategoryId:  "boxId-${testId}") shouldBe 0
			allScheduledCardsWereDeleted ScheduledCard filterAndCountBy (boxId: "boxId-${testId}") shouldBe 0
			allReinforceCardsWereDeleted ReinforceCard filterAndCountBy (boxId: "boxId-${testId}") shouldBe 0

			otherUserWasNotDeleted User selectBy(username: "Admin") shouldBe notNull
			otherBoxWasNotDeleted Box selectBy(boxId: "adminBox-${testId}") shouldBe notNull
			accessToCategoryOfOtherUserWasNotDeleted UserAccessToCategory selectByPrimaryKey( categoryId: "adminBox-${testId}", userId: "uuid-admin") shouldBe notNull
			categoriesOfOtherUserWereNotDeleted Category filterAndCountBy (rootCategoryId: "adminBox-${testId}") shouldBe 2
			cardsOfOtherUserWereNotDeleted Card filterAndCountBy (rootCategoryId:  "adminBox-${testId}") shouldBe 1
			scheduledCardsOfOtherUserWereNotDeleted ScheduledCard filterAndCountBy (boxId: "adminBox-${testId}") shouldBe 2
			reinforceCardsOfOtherUserWereNotDeleted ReinforceCard filterAndCountBy (boxId: "adminBox-${testId}") shouldBe 1

	DeleteDoesNotDeleteUserWhenBoxIsShared
		GIVEN
			com.anfelisa.box.scorecard.ScoreCard0
			com.anfelisa.user.registeruser.RegisterTwoUsers exclude GIVEN
			com.anfelisa.category.inviteusertocategory.InviteUserToCategory exclude GIVEN 
		WHEN com.anfelisa.user.DeleteUser {
			usernameToBeDeleted: "Annette-${testId}"
		}
		authorization "Annette-${testId}" : "password"
		THEN 400
		persistence
			userWasNotDeleted User selectBy(username: "Annette-${testId}") shouldBe notNull
			boxWasNotDeleted Box selectBy(boxId: "boxId-${testId}") shouldBe notNull
			accessToCategoryWasNotDeleted UserAccessToCategory selectByPrimaryKey( categoryId: "boxId-${testId}", userId: "uuid-${testId}") shouldBe notNull
			noCategoriesWereDeleted Category filterAndCountBy (rootCategoryId: "boxId-${testId}") shouldBe 2
			noCardsWereDeleted Card filterAndCountBy (rootCategoryId:  "boxId-${testId}") shouldBe 5
			noScheduledCardsWereDeleted ScheduledCard filterAndCountBy (boxId: "boxId-${testId}") shouldBe 4
			noReinforceCardsWereDeleted ReinforceCard filterAndCountBy (boxId: "boxId-${testId}") shouldBe 1


	DoesNotDeleteSharedCategoriesAndCardsWhenThereIsAnotherUserWithWriteAccess
		GIVEN
			com.anfelisa.box.scorecard.ScoreCard0
			com.anfelisa.user.registeruser.RegisterTwoUsers exclude GIVEN
			com.anfelisa.category.inviteusertocategory.InviteUserToCategoryEditable exclude GIVEN 
		WHEN com.anfelisa.user.DeleteUser {
			usernameToBeDeleted: "Annette-${testId}"
		}
		authorization "Annette-${testId}" : "password"
		THEN 200
		persistence
			userWasDeleted User selectBy(username: "Annette-${testId}") shouldBe null
			boxWasDeleted Box selectBy(boxId: "boxId-${testId}") shouldBe null
			accessToCategoryWasDeleted UserAccessToCategory selectByPrimaryKey( categoryId: "boxId-${testId}", userId: "uuid-${testId}") shouldBe null
			allScheduledCardsWereDeleted ScheduledCard filterAndCountBy (boxId: "boxId-${testId}") shouldBe 0
			allReinforceCardsWereDeleted ReinforceCard filterAndCountBy (boxId: "boxId-${testId}") shouldBe 0
			noCategoriesWereDeleted Category filterAndCountBy (rootCategoryId: "boxId-${testId}") shouldBe 2
			noCardsWereDeleted Card filterAndCountBy (rootCategoryId:  "boxId-${testId}") shouldBe 5
			
			
			
