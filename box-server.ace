com.anfelisa.box

target JAVA

ACE {
	GET LoadBoxes uses BoxList
	GET LoadNextCard uses Card
	GET LoadBox uses BoxId
	GET GetAllBoxes uses AllBoxes
	GET LoadReinforceCardList uses ReinforceCardList
	
	POST CreateBox uses BoxCreation {
		on created ( Box.createBox )
	}
	POST CreateCard uses CardCreation {
		//on created (Card.createCard)
	}
	POST ImportCard uses CardCreation {
		//on imported (Card.createCard)
		on alreadyExists
	}
	POST CreateScheduledCard uses ScheduledCard {
		on created (ScheduledCard.createScheduledCard)
	}
	POST CreateScoredCard uses ScoredCard {
		on created (ScoredCard.createScoredCard)
	}
	PUT UpdateBox uses BoxCreation {
		on updated ( Box.updateBox )
	}
	DELETE DeleteBox uses DeleteBox {
		on deleted (Box.deleteBox)
	}
	POST ScoreCard uses ScoreCard {
		on scored (ScoredCard.score ScheduledCard.score)
	}
	POST FillBoxWithCards uses FillBox {
		on fillBoxWithCards (Box.fillBoxWithCards )
	}
	DELETE DeleteCard uses CardId {
		//on deleted (Card.deleteCard)
	}
	DELETE RemoveCardFromBox uses RemoveCardFromBox {
		on deleted (ScheduledCard.removeFromBox)
	}
	PUT RecalculateScheduledCards uses RecalculateScheduledCards {
		on ok (ScheduledCard.recalculateScheduledCards)
	}
}

views {
	Box {
		createBox (BoxCreation)
		updateBox (BoxCreation)
		deleteBox (DeleteBox)
		fillBoxWithCards (FillBox)
	}
	Card {
		//createCard (CardCreation)
		//deleteCard(CardId)
	}
	ScheduledCard {
		createScheduledCard (ScheduledCard)
		score(ScoreCard)
		removeFromBox(RemoveCardFromBox)
		recalculateScheduledCards(RecalculateScheduledCards)
	}
	ScoredCard {
		score(ScoreCard)
		createScoredCard(ScoredCard)
	}
}

models {
	schema public
	persistent Box {
		Unique PrimaryKey NotNull String boxId
		NotNull String name
		NotNull String username references com.anfelisa.user.User.userId
	}

	persistent Card {
		Unique PrimaryKey NotNull String cardId
		NotEmpty String given
		NotEmpty String wanted
		NotNull Integer maxPoints
	}

	persistent ScheduledCard {
		Unique PrimaryKey NotNull String scheduledCardId
		NotNull String cardId references Card.cardId
		NotNull Float ef
		Integer interval
		NotNull Integer n
		NotNull Integer count
		NotNull DateTime scheduledDate
		NotNull String boxId references Box.boxId
		Integer lastQuality
		NotNull DateTime timestamp
		NotNull Boolean removed
	}

	persistent ScoredCard {
		Unique PrimaryKey NotNull String scoredCardId
		NotNull String cardId references Card.cardId
		DateTime scheduledDateOfScored
		NotNull String boxId references Box.boxId
		Integer quality
		NotNull DateTime timestamp
		Integer points
		NotNull String scheduledCardId references ScheduledCard.scheduledCardId
	}

	ReinforceCard {
		Unique PrimaryKey NotNull String scheduledCardId
		NotNull DateTime scheduledDate
		Integer lastQuality
		NotNull DateTime timestamp			
		CardContent cardContent
	}
	
	ReinforceCardList {
		NotNull String boxId
		NotNull String boxName
		List ReinforceCard list
	}

	Score {
		Integer cards
		Integer cardsForToday
		Integer cardsForTomorrow
		Integer cardsToBeReinforced
		Integer zero
		Integer one
		Integer two
		Integer three
		Integer four
		Integer five
		Integer noQuality
	}

	CardInfo {
		String cardId
		String cardOfBoxId
		String content
		String boxName
		Integer count
		DateTime last
		DateTime next
		Integer quality
	}
	
	BoxInfo {
		Integer todaysCards
		Boolean hasOpenCards
		Box box
	}
		
	BoxList {
		List BoxInfo boxList
	}
		
	MyBoxList {
		List Box boxList
	}
		
	CardContent {
		Boolean complex
		String given
		Boolean large
		String wanted
		String header
		List Line lines
	}
	
	Line {
		List String words
	}
	
	CourseToBoxAddition {
		NotNull String boxId 
		NotNull String courseId 
		NotNull Boolean autoAdd
		NotNull String name
	}
	
	BoxId {
		NotNull String boxId 
	}
	
	CardId {
		NotNull String cardId
		NotNull String testId
		NotNull String contentHash 
	}
	
	CardQuality {
		NotNull Integer submittedQuality
	}
	
	ContentHash {
		NotNull String contentHash
	}
	ContentHashesOfCreatedCards {
		NotNull String testId
		List String contentHashesOfCreatedCards
		List String contentHashesOfObsoleteCards
	}
	
	FillBox {
		String boxId
		List ScheduledCard cardsToBeAdded
	}
	
	AllBoxes {
		List Box boxList
	}
	
	ScheduledCardId {
		String scheduledCardId
	}
	DaysBehind {
		Integer daysBehind
	}
}

data {
	BoxCreation : ( Box com.anfelisa.user.Credentials )
	CardCreation : ( Card )
	ScheduledCard : ( ScheduledCard )
	ScoredCard : ( ScoredCard )
	BoxList : ( BoxList com.anfelisa.user.Username )
	Card : ( Card Box Score CardInfo CardContent com.anfelisa.user.Credentials DaysBehind )
	BoxId : ( Box com.anfelisa.user.Credentials )
	DeleteBox : (BoxId com.anfelisa.user.Credentials)
	ScoreCard : (Card ScheduledCard ScoredCard CardQuality com.anfelisa.user.Credentials )
	FillBox : (FillBox com.anfelisa.user.Credentials)
	CardId : (CardId)
	AllBoxes : (AllBoxes)
	ScheduledCardId : (ScheduledCardId)
	ReinforceCardList : (ReinforceCardList com.anfelisa.user.Credentials Box)
	RecalculateScheduledCards : (Box DaysBehind)
	RemoveCardFromBox : (ScheduledCardId com.anfelisa.user.Credentials)
}
