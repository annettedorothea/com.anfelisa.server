com.anfelisa.box

target JAVA

models {
	persistent Box {
		primitiveAttributes {
			Unique PrimaryKey NotNull Serial boxId
			NotNull String name
			NotNull String username references com.anfelisa.user.User.username
		}
	}

	persistent BoxOfCourse {
		primitiveAttributes {
			NotNull Integer boxId references Box.boxId
			NotNull Integer courseId references com.anfelisa.course.Course.courseId
			NotNull Boolean autoAdd
		}
	}

	persistent Card {
		primitiveAttributes {
			Unique PrimaryKey NotNull Serial cardId
			NotEmpty String content
			NotNull Integer testId references com.anfelisa.test.Test.testId
			NotNull String contentHash
			NotNull Integer maxPoints
		}
	}

	persistent CardOfBox {
		primitiveAttributes {
			Unique PrimaryKey NotNull Serial cardOfBoxId
			NotNull Integer cardId references Card.cardId
			Float ef
			Integer interval
			NotNull Integer count
			DateTime date
			NotNull Integer boxId references Box.boxId
			Integer quality
			DateTime timestamp
			Integer points
		}
	}

	Score {
		primitiveAttributes {
			Integer cards
			Integer cardsForToday
			Integer cardsForTomorrow
			Integer zero
			Integer one
			Integer two
			Integer three
			Integer four
			Integer five
		}
	}

	CardInfo {
		primitiveAttributes {
			Integer cardId
			String content
			String boxName
			Integer count
			DateTime last
			DateTime next
			Integer quality
		}
	}
	
	BoxInfo {
		primitiveAttributes {
			Integer todaysCards
			Boolean hasOpenCards
		}
		complexAttributes {
			Box box
		}
	}
		
	BoxList {
		complexAttributes {
			List BoxInfo boxList
		}
	}
		
	MyBoxList {
		complexAttributes {
			List Box boxList
		}
	}
		
	CardContent {
		primitiveAttributes {
			Boolean complex
			String given
			Boolean large
			String wanted
			String header
		}
		complexAttributes {
			List Line lines
		}
	}
	
	Line {
		primitiveAttributes {
			List String words
		}
	}
	
	CourseToBoxAddition {
		primitiveAttributes {
			NotNull Integer boxId 
			NotNull Integer courseId 
			NotNull Boolean autoAdd
			NotNull String name
		}
		
	}
	
	CourseToBoxAdditionList {
		primitiveAttributes {
			NotNull Integer boxId 
		}
		complexAttributes {
			List CourseToBoxAddition courseToBoxAdditionList
		}
	}
	
}

data {
	BoxCreation : ( Box com.anfelisa.user.UsernameAndPassword )
	BoxToCourseAddition : ( BoxOfCourse )
	CardCreation : ( Card )
	CardOfBoxCreation : ( CardOfBox )
	BoxList : ( BoxList com.anfelisa.user.Username )
	Card : ( Card Box Score CardInfo CardContent )
	BoxId : ( Box )
	BoxOfCourseList : (CourseToBoxAdditionList com.anfelisa.user.UsernameAndPassword)
}

actions {
	POST CreateBox uses BoxCreation executes CreateBox
	POST AddCourseToBox uses BoxToCourseAddition executes AddCourseToBox
	POST CreateCard uses CardCreation executes CreateCard
	POST CreateCardOfBox uses CardOfBoxCreation executes CreateCardOfBox
	GET LoadBoxes uses BoxList
	GET LoadNextCard uses Card
	PUT UpdateBox uses BoxCreation executes UpdateBox
	GET LoadBox uses BoxId
	GET LoadBoxOfCourseList uses BoxOfCourseList
	PUT AddCoursesToBox uses BoxOfCourseList executes AddCoursesToBox
}

commands {
	CreateBox uses BoxCreation {
		on created publishes ( BoxCreated )
	}
	AddCourseToBox uses BoxToCourseAddition {
		on added publishes ( CourseAddedToBox )
	}
	CreateCard uses CardCreation {
		on created publishes (CardCreated)
	}
	CreateCardOfBox uses CardOfBoxCreation {
		on created publishes (CardOfBoxCreated)
	}
	UpdateBox uses BoxCreation {
		on created publishes ( BoxUpdated )
	}
	AddCoursesToBox uses BoxOfCourseList {
		on created publishes ( CoursesAddedToBox )
	}
}

events {
	BoxCreated uses BoxCreation listenedToBy ( Box.createBox )
	CourseAddedToBox uses BoxToCourseAddition listenedToBy ( BoxToCourse.addCourseToBox )
	CardCreated uses CardCreation listenedToBy ( Card.createCard )
	CardOfBoxCreated uses CardOfBoxCreation listenedToBy (CardOfBox.createCardOfBox)
	BoxUpdated uses BoxCreation listenedToBy ( Box.updateBox )
	CoursesAddedToBox uses BoxOfCourseList listenedToBy ( BoxToCourse.addCoursesToBox)
}

views {
	Box {
		createBox (BoxCreation)
		updateBox (BoxCreation)
	}
	BoxToCourse {
		addCourseToBox (BoxToCourseAddition)
		addCoursesToBox (BoxOfCourseList)
	}
	Card {
		createCard (CardCreation)
	}
	CardOfBox {
		createCardOfBox (CardOfBoxCreation)
	}
}
