JAVA
	
com.anfelisa.box

import com.anfelisa.user.AuthUser

ACE 
	GetBoxes
	GET "/boxes/my/" 
		authorize 
		queryParams Today.today 
		uses BoxList
		
	GetBox
		GET "/box/get" 
		authorize
		queryParams 
			BoxId.boxId 
			Today.today
		uses BoxInfo
		
	CreateBox
		POST "/box/create" 
		authorize 
		payload Box.categoryId Box.maxInterval 
		uses BoxCreation
		on ok ( Box.createBox )
	
	UpdateBox 
		PUT "/box/update"  
		authorize
		payload BoxUpdate.maxInterval BoxUpdate.boxId
		uses BoxUpdate
		on ok ( Box.updateBox )
	
	PostponeCards
		PUT "/cards/postpone" 
		authorize
		payload BoxId.boxId
		uses PostponeCards 
		on ok ( ScheduledCard.postponeCards )
		on noDelay
	
	DeleteBox 
		DELETE "/box/delete"  
		authorize
		queryParams BoxId.boxId
		uses DeleteBox 
		on ok (Box.deleteBox)
	
	LoadNextCard
		GET "/box/next-card"
		authorize  
		queryParams BoxId.boxId Today.today
		uses NextCard

	LoadNextReinforceCard
		GET "/box/next-reinforce-card" 
		authorize
		queryParams BoxId.boxId
		uses NextReinforceCard

	ScheduleNextCard
		POST "/card/schedule-next" 
		authorize 
		payload BoxId.boxId
		uses ScheduleCard 
		on ok (Box.scheduleCard)
	
	ScheduleCards
		POST "/cards/schedule" 
		authorize 
		payload ScheduledCards.cardIds
		uses ScheduleCards 
		on ok (Box.scheduleCards)
		on nullOrEmpty
	
	ScoreCard
		POST "/card/score"  
		authorize
		payload scoredCardScheduledCardId BoxId.boxId
		uses ScoreCard 
		on score (ScheduledCard.score ScheduledCard.scheduleNext)
		on scoreAndReinforce (ScheduledCard.score ScheduledCard.scheduleNext ReinforceCard.add)
	
	ScoreReinforceCard
		POST "/reinforce-card/score" 
		authorize 
		payload reinforceCardId quality
		uses ScoreReinforceCard  
		on remove (ReinforceCard.remove)
		on keep (ReinforceCard.update)
	

views 
	Box {
		createBox (BoxCreation)
		updateBox (BoxCreation)
		deleteBox (DeleteBox)
		scheduleCard(ScheduleCard)
		scheduleCards(ScheduleCards)
	}
	
	ScheduledCard { 
		score(ScoreCard)
		scheduleNext(ScoreCard)
		postponeCards(PostponeCards)
	}
	
	ReinforceCard { 
		add(ScoreCard)
		remove(ScoreReinforceCard)
		update(ScoreReinforceCard)
	}

models 
	schema public
	persistent Box {
		Unique PrimaryKey NotNull String boxId
		NotNull String userId references com.anfelisa.user.User.userId
		NotNull String categoryId references com.anfelisa.category.Category.categoryId
		Integer maxInterval
	}

	persistent ScheduledCard {
		Unique PrimaryKey NotNull String scheduledCardId
		NotNull String cardId references com.anfelisa.card.Card.cardId
		NotNull String boxId references Box.boxId
		NotNull DateTime createdDate
		NotNull Float ef
		Integer interval
		NotNull Integer n
		NotNull Integer count
		NotNull DateTime scheduledDate
		Integer lastQuality
		Integer quality
		DateTime scoredDate
	}

	persistent ReinforceCard {
		Unique PrimaryKey NotNull String reinforceCardId
		Unique PrimaryKey NotNull String scheduledCardId references ScheduledCard.scheduledCardId
		NotNull String boxId references Box.boxId
		NotNull DateTime changeDate
	}

	BoxInfo {
		Integer todaysCards
		Integer totalCards
		Integer reinforceCards
		Integer myCards
		Integer daysBehindSchedule
		NotNull String categoryName
		Integer maxInterval
		Integer quality0Count
		Integer quality1Count
		Integer quality2Count
		Integer quality3Count
		Integer quality4Count
		Integer quality5Count
	}
	BoxList {
		List BoxInfo boxList
	}
	Today {
		NotNull DateTime today
	}
	PostponeCards {
		NotNull Integer days
	}

	BoxUpdate {
		NotNull String userId
		NotNull String boxId
		Integer maxInterval
	}

	NextCard {
		NotNull String scheduledCardId
		NotNull String cardId
		NotNull DateTime scheduledDate
		Integer lastQuality
		String given
		String wanted
		String image
		String categoryId
		String rootCategoryId
		NotNull Integer count
		DateTime scoredDate
	}
	
	BoxId {
		NotNull String boxId
	}
	
	ScoreCard {
		NotNull String cardId
		
		NotNull String nextScheduledCardScheduledCardId
		NotNull DateTime nextScheduledCardCreatedDate
		NotNull Float nextScheduledCardEf
		Integer nextScheduledCardInterval
		NotNull Integer nextScheduledCardN
		NotNull Integer nextScheduledCardCount
		NotNull DateTime nextScheduledCardScheduledDate
		Integer nextScheduledCardLastQuality
		
		NotNull String scoredCardScheduledCardId
		Integer scoredCardQuality
		DateTime scoredCardScoredDate

		NotNull String reinforceCardId
		NotNull DateTime reinforceCardCreatedDate
	}
	
	NextReinforceCard {
		NotNull String reinforceCardId
		NotNull DateTime changeDate
		Integer lastQuality
		String given
		String wanted
		String image
		String categoryId
	}
	ScoreReinforceCard {
		NotNull String reinforceCardId
		NotNull Integer quality
		NotNull DateTime changeDate
	}
	
	ScheduledCards {
		List ScheduledCard newScheduledCards
		List String existingScheduledCardIds
		List String cardIds
		DateTime scheduledDate
	}
	
data 
	BoxList : ( BoxList com.anfelisa.user.UserId Today )
	BoxInfo : ( BoxInfo BoxId Today com.anfelisa.user.UserId )
	PostponeCards : (BoxId com.anfelisa.user.UserId PostponeCards Today)
	DeleteBox : (com.anfelisa.user.UserId BoxId)
	BoxUpdate : ( BoxUpdate )
	BoxCreation : ( Box )
	NextCard : ( NextCard BoxId Today com.anfelisa.user.UserId)
	ScoreCard : (com.anfelisa.user.UserId BoxId ScoreCard)
	ScoreReinforceCard : (com.anfelisa.user.UserId ScoreReinforceCard)
	NextReinforceCard : (com.anfelisa.user.UserId NextReinforceCard BoxId)
	ScheduleCard : (ScheduledCard com.anfelisa.user.UserId BoxId )
	ScheduleCards : (ScheduledCards com.anfelisa.user.UserId BoxId )
