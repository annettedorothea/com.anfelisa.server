HttpServer
	
com.anfelisa.box

import com.anfelisa.user.AuthUser

ACE 
	GetBoxes<BoxList>
	GET "/boxes/my/" 
		authorize 
		queryParams today
		response 
			boxList
		
	GetBox<BoxInfo>
		GET "/box/get" 
		authorize
		queryParams 
			boxId 
			today
		response 
			boxId
			categoryName
			daysBehindSchedule
			maxInterval
			maxCardsPerDay
			myCards
			quality0Count
			quality1Count
			quality2Count
			quality3Count
			quality4Count
			quality5Count
			reinforceCards
			todaysCards
			tomorrowsCards
			totalCards
		
	CreateBox<Box>
		POST "/box/create" 
		authorize 
		payload 
			categoryId 
		on ok ( Box.createBox )
	
	UpdateBox<BoxUpdate> 
		PUT "/box/update"  
		authorize
		payload 
			maxInterval 
			maxCardsPerDay
			boxId
		on ok ( Box.updateBox )
	
	PostponeCards<PostponeCards>
		PUT "/cards/postpone" 
		authorize
		payload 
			boxId
			today
		on ok ( ScheduledCard.postponeCards )
		on noDelay
	
	DeleteBox<DeleteBox>
		DELETE "/box/delete"  
		authorize
		queryParams boxId
		on ok (Box.deleteBox)
	
	LoadNextCard<NextCard>
		GET "/box/next-card"
		authorize  
		queryParams 
			boxId 
			today
		response
			cardId
			categoryId
			count
			given
			image
			lastQuality
			rootCategoryId
			scheduledCardId
			scheduledDate
			scoredDate
			wanted

	LoadNextReinforceCard<NextReinforceCard>
		GET "/box/next-reinforce-card" 
		authorize
		queryParams boxId
		response
			categoryId
			boxId
			changeDate
			given
			image
			lastQuality
			reinforceCardId
			wanted			

	ScheduleNextCard<ScheduleNextCard>
		POST "/card/schedule-next" 
		authorize 
		payload boxId
		on ok (Box.scheduleCard)
	
	ScheduleCards<ScheduledCards>
		POST "/cards/schedule" 
		authorize 
		payload cardIds
		on ok (Box.scheduleCards)
		on nullOrEmpty
	
	ScoreCard<ScoreCard>
		POST "/card/score"  
		authorize
		payload 
			scoredCardScheduledCardId 
			boxId
			scoredCardQuality
		on score (ScheduledCard.score ScheduledCard.scheduleNext)
		on scoreAndReinforce (ScheduledCard.score ScheduledCard.scheduleNext ReinforceCard.add)

	ScoreReinforceCard<ScoreReinforceCard>
		POST "/reinforce-card/score" 
		authorize 
		payload reinforceCardId quality
		on remove (ReinforceCard.remove)
		on keep (ReinforceCard.update)
	

views 
	Box {
		createBox (Box)
		updateBox (BoxUpdate)
		deleteBox (DeleteBox)
		scheduleCard(ScheduleNextCard)
		scheduleCards(ScheduledCards)
	}
	
	ScheduledCard { 
		score(ScoreCard)
		scheduleNext(ScoreCard)
		postponeCards(PostponeCards)
	}
	
	ReinforceCard { 
		add(ScoreCard)
		remove(ScoreReinforceCard)
		update(ScoreReinforceCard)
	}

models 
	persistent Box {
		Unique PrimaryKey NotNull String boxId
		NotNull String userId references com.anfelisa.user.User.userId
		NotNull String categoryId references com.anfelisa.category.Category.categoryId
		Integer maxInterval
		Integer maxCardsPerDay
	}

	persistent ScheduledCard {
		Unique PrimaryKey NotNull String scheduledCardId
		NotNull String cardId references com.anfelisa.card.Card.cardId
		NotNull String boxId references Box.boxId
		NotNull DateTime createdDate
		NotNull Float ef
		Integer interval
		NotNull Integer n
		NotNull Integer count
		NotNull DateTime scheduledDate
		Integer lastQuality
		Integer quality
		DateTime scoredDate
	}

	persistent ReinforceCard {
		Unique PrimaryKey NotNull String reinforceCardId
		Unique PrimaryKey NotNull String scheduledCardId references ScheduledCard.scheduledCardId
		NotNull String boxId references Box.boxId
		NotNull DateTime changeDate
	}

	BoxView {
		Integer todaysCards
		Integer tomorrowsCards
		Integer totalCards
		Integer reinforceCards
		Integer myCards
		Integer daysBehindSchedule
		NotNull String categoryName
		Integer maxInterval
		Integer maxCardsPerDay
		Integer quality0Count
		Integer quality1Count
		Integer quality2Count
		Integer quality3Count
		Integer quality4Count
		Integer quality5Count
		NotNull String boxId
	}

	BoxInfo extends BoxView {
		String userId
		NotNull DateTime today
	}
	BoxList {
		List BoxView boxList
		String userId
		NotNull DateTime today
	}
	PostponeCards {
		NotNull Integer days
		NotNull String boxId
		String userId
		NotNull DateTime today
	}

	BoxUpdate {
		NotNull String userId
		NotNull String boxId
		Integer maxInterval
		Integer maxCardsPerDay
	}

	NextCardView {
		NotNull String scheduledCardId
		NotNull String cardId
		NotNull DateTime scheduledDate
		Integer lastQuality
		String given
		String wanted
		String image
		String categoryId
		String rootCategoryId
		NotNull Integer count
		DateTime scoredDate
		NotNull String boxId
	}
	
	NextCard extends NextCardView {
		String userId
		NotNull DateTime today
	}
	
	ScoreCard {
		NotNull String cardId
		
		NotNull String nextScheduledCardScheduledCardId
		NotNull DateTime nextScheduledCardCreatedDate
		NotNull Float nextScheduledCardEf
		Integer nextScheduledCardInterval
		NotNull Integer nextScheduledCardN
		NotNull Integer nextScheduledCardCount
		NotNull DateTime nextScheduledCardScheduledDate
		Integer nextScheduledCardLastQuality
		
		NotNull String scoredCardScheduledCardId
		Integer scoredCardQuality
		DateTime scoredCardScoredDate

		NotNull String reinforceCardId
		NotNull DateTime reinforceCardCreatedDate

		String userId
		NotNull String boxId
	}
	
	NextReinforceCardView  {
		NotNull String reinforceCardId
		NotNull DateTime changeDate
		Integer lastQuality
		String given
		String wanted
		String image
		String categoryId
	}
	
	NextReinforceCard extends NextReinforceCardView {
		NotNull String boxId
		String userId
	}
	
	ScoreReinforceCard {
		NotNull String reinforceCardId
		NotNull Integer quality
		NotNull DateTime changeDate
		String userId
	}
	
	ScheduledCards {
		List ScheduledCard newScheduledCards
		List String existingScheduledCardIds
		List String cardIds
		DateTime scheduledDate
		String userId
		NotNull String boxId
	}
	
	DeleteBox {
		String userId
		NotNull String boxId
	}
	
	ScheduleNextCard extends ScheduledCard {
		String userId
		NotNull String boxId
	}

