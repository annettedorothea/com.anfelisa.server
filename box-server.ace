HttpServer
	
com.anfelisa.box

import com.anfelisa.user.AuthUser


ACE 
	CreateBox<BoxCreation>
		POST "/box/create"  
		authorize
		payload 
			categoryName
			dictionaryLookup
			givenLanguage
			wantedLanguage
			maxCardsPerDay
			maxInterval
		on ok (RootCategory.insert UserAccessToCategory.grantAccess Box.createBox)

	UpdateBox<BoxUpdate> 
		PUT "/box/update"  
		authorize
		payload 
			maxInterval 
			maxCardsPerDay
			boxId
			categoryId
			categoryName
			dictionaryLookup
			givenLanguage
			wantedLanguage
		on ok ( Box.updateBox RootCategory.update)
		
	GetBoxSettings<BoxSettingsWrapper>
	GET "/box/settings/{boxId}/" 
		authorize 
		pathParams boxId
		response 
			maxCardsPerDay
			maxInterval
			categoryName
			dictionaryLookup
			givenLanguage
			wantedLanguage
			categoryId

	ScheduleCards<ScheduledCards>
		POST "/cards/schedule" 
		authorize 
		payload cardIds
		on ok (Box.scheduleCards)
		on nullOrEmpty
	
	ScoreCard<ScoreCard>
		POST "/card/score"  
		authorize
		payload 
			scoredCardScheduledCardId 
			boxId
			scoredCardQuality
		on score (ScheduledCard.score ScheduledCard.scheduleNext)
		on scoreAndReinforce (ScheduledCard.score ScheduledCard.scheduleNext ReinforceCard.add)

	ScoreReinforceCard<ScoreReinforceCard>
		POST "/card/score-reinforce"  
		authorize
		payload 
			reinforceCardId 
			scoredCardQuality
		on keep (ReinforceCard.update)
		on remove (ReinforceCard.remove)

	GetBoxes<BoxList>
	GET "/boxes/my/" 
		authorize 
		queryParams today
		response 
			boxList
		
	InitMyBoxesForDay<InitMyBoxesData>
		PUT "/box/init"  
		authorize
		payload 
			today 
		on ok ( ScheduledCard.postponeCards ReinforceCard.clear )
	
	LoadNextCard<NextCard>
		GET "/box/next-card"
		authorize  
		queryParams 
			boxId 
			today
		response
			cardId
			categoryId
			count
			given
			image
			lastQuality
			rootCategoryId
			scheduledCardId
			reinforceCardId
			scheduledDate
			scoredDate
			wanted
			openTodaysCards
			allTodaysCards

	DeleteBox<DeleteBox>
		DELETE "/box/delete"  
		authorize
		queryParams boxId
		on ok ( ScheduledCard.deleteAll ReinforceCard.deleteAll RootCategory.deleteAll Box.deleteBox )
	
views 
	Box {
		createBox (BoxCreation)
		updateBox (BoxUpdate)
		deleteBox (DeleteBox)
		scheduleCards(ScheduledCards)
	}
	
	ScheduledCard { 
		score(ScoreCard)
		scheduleNext(ScoreCard)
		postponeCards(InitMyBoxesData)
		deleteAll(DeleteBox)
	}
	
	ReinforceCard { 
		add(ScoreCard)
		remove(ScoreReinforceCard)
		update(ScoreReinforceCard)
		clear(InitMyBoxesData)
		deleteAll(DeleteBox)
	}
	
	RootCategory {
		insert(BoxCreation)
		update(BoxUpdate)
		deleteAll(DeleteBox)
	}
	
	UserAccessToCategory { 
		grantAccess(BoxCreation)
		delete(DeleteBox)
	}

models 
	persistent Box {
		Unique PrimaryKey NotNull String boxId
		NotNull String userId references com.anfelisa.user.User.userId
		NotNull String categoryId references com.anfelisa.category.Category.categoryId
		Integer maxInterval
		NotNull Integer maxCardsPerDay
	}

	persistent ScheduledCard {
		Unique PrimaryKey NotNull String scheduledCardId
		NotNull String cardId references com.anfelisa.card.Card.cardId
		NotNull String boxId references Box.boxId
		NotNull DateTime createdDate
		NotNull Float ef
		Integer interval
		NotNull Integer n
		NotNull Integer count
		NotNull DateTime scheduledDate
		Integer lastQuality
		Integer quality
		DateTime scoredDate
	}

	persistent ReinforceCard {
		Unique PrimaryKey NotNull String reinforceCardId
		Unique PrimaryKey NotNull String scheduledCardId references ScheduledCard.scheduledCardId
		NotNull String boxId references Box.boxId
		NotNull DateTime changeDate
	}

	BoxView {
		Integer openTodaysCards
		Integer allTodaysCards
		NotNull String categoryName
		NotNull String categoryId
		Integer quality0Count
		Integer quality1Count
		Integer quality2Count
		Integer quality3Count
		Integer quality4Count
		Integer quality5Count
		NotNull String boxId
	}

	InitBoxes {
		DateTime minScheduledDate
		NotNull String boxId
	}

	BoxList {
		List BoxView boxList
		String userId
		NotNull DateTime today
	}
	InitMyBoxesData {
		String userId
		NotNull DateTime today
		List PostponeCards postponeCards
		List String outdatedReinforceCardsIds
	}
	PostponeCards {
		NotNull Integer days
		NotNull String boxId
	}

	BoxUpdate {
		NotNull String userId
		NotNull String boxId
		Integer maxInterval
		Integer maxCardsPerDay
		String categoryName
		Boolean dictionaryLookup
		String givenLanguage
		String wantedLanguage
		String categoryId
	}
	
	BoxSettings {
		NotNull String boxId
		Integer maxInterval
		Integer maxCardsPerDay
		String categoryName
		Boolean dictionaryLookup
		String givenLanguage
		String wantedLanguage
		String categoryId
	}

	BoxSettingsWrapper extends BoxSettings {
		NotNull String userId
	}


	NextCardView {
		NotNull String scheduledCardId
		NotNull String reinforceCardId
		NotNull String cardId
		NotNull DateTime scheduledDate
		Integer lastQuality
		String given
		String wanted
		String image
		String categoryId
		String rootCategoryId
		NotNull Integer count
		DateTime scoredDate
	}
	
	NextCard extends NextCardView {
		String userId
		NotNull String boxId
		NotNull DateTime today
		Integer openTodaysCards
		Integer allTodaysCards
	}
	
	TodaysCardsStatus {
		Integer openTodaysCards
		Integer allTodaysCards
	}

	ScoreCard {
		NotNull String cardId
		
		NotNull String nextScheduledCardScheduledCardId
		NotNull DateTime nextScheduledCardCreatedDate
		NotNull Float nextScheduledCardEf
		Integer nextScheduledCardInterval
		NotNull Integer nextScheduledCardN
		NotNull Integer nextScheduledCardCount
		NotNull DateTime nextScheduledCardScheduledDate
		Integer nextScheduledCardLastQuality
		
		NotNull String scoredCardScheduledCardId
		Integer scoredCardQuality
		DateTime scoredCardScoredDate

		NotNull String reinforceCardId
		NotNull DateTime reinforceCardCreatedDate

		String userId
		NotNull String boxId
	}

	ScoreReinforceCard {
		NotNull String reinforceCardId
		NotNull Integer scoredCardQuality
		NotNull DateTime changeDate
		String userId
	}
	
	ScheduledCards {
		List ScheduledCard newScheduledCards
		List String existingScheduledCardIds
		List String cardIds
		DateTime scheduledDate
		String userId
		NotNull String boxId
	}
	
	DeleteBox {
		String userId
		NotNull String boxId
		String rootCategoryId
		List String allReferencedCategories
	}

	BoxCreation extends com.anfelisa.category.Category, com.anfelisa.category.UserAccessToCategory, Box {
		String username
		Integer maxInterval
		NotNull Integer maxCardsPerDay
	}

/*
 * Scenario-Durchlauf loggt den resultierenden Event in eine Text-Datei raus,
 * so dass er in das folgende Scenario kopiert werden kann
 * 
 * content assist bei WHEN gibt nur attribute von payload bzw. url
 * 
 * 
 * scenarios InitMyBoxesForDayRemoveOutdatedReinforceCards 
	GIVEN
	com.anfelisa.user.RegisterUser.ok {
		email : "test@anfelisa.de"
		language : "de"
		password : "lala"
		token : "token"
		username : "test"
		userId : "userid"
		role : "STUDENT"
	} 
	com.anfelisa.user.ConfirmEmail.ok {
		token : "token"
		username : "test"
		userId : "userid"
	}
	com.anfelisa.category.CreateCategory.root {
		categoryAuthor : "test"
		categoryId : "catid"
		categoryIndex : 1
		categoryName : "root"
		rootCategoryId : "catid"
		userId : "userid"
		username : "test"
	}
	com.anfelisa.card.CreateCard.ok {
		cardAuthor : "test"
		cardId : "cardid"
		cardIndex : 1
		categoryId : "catid"
		given : "given"
		rootCategoryId : "catid"
		userId : "userid"
		username : "test"
		wanted : "wanted"
	}
	CreateBox.ok {
		boxId : "boxid"
		categoryId : "catid"
		maxCardsPerDay : 8
		userId : "userid"		
	}
	ScheduleCards.ok {
		newScheduledCards : [
			{
				cardId : "cardid"
				scheduledCardId : "scid"
				boxId : "boxid"
				createdDate : "12.02.2020 14:00:00"
				scheduledDate : "12.02.2020 14:00:00"
				boxId : "boxid"
				ef: "1F"
				n : 0
				
				
			}
		]
	} 
	ScoreCard.scoreAndReinforce {
		boxId : "boxid"
		cardId : "cardid"
		scoredCardQuality : 4
		scoredCardScheduledCardId : "scid"
	}
	WHEN InitMyBoxesForDay {
		today : "13.02.2020 14:00:00"
	} 
	authorization "test" : "lala"
	THEN 200*/
