HttpServer Java Dropwizard JDBI3 Liquibase
	
com.anfelisa.box

import com.anfelisa.user.AuthUser

ACE 
	CreateBox<BoxCreation>
		POST "/box/create"  
		authorize
		payload 
			NotNull categoryName
			dictionaryLookup 
			givenLanguage
			wantedLanguage
			NotNull maxCardsPerDay
			maxInterval
		on ok (RootCategory.insert UserAccessToCategory.grantAccess Box.createBox)

	CreateReverseBox<BoxCreation>
		POST "/box/create-reverse"  
		authorize
		payload 
			NotNull rootCategoryId
		on ok (Box.createBox)
		on alreadyExists

	ArchiveBox<BoxArchive>
		PUT "/box/archive"  
		authorize
		payload 
			NotNull boxId
			NotNull archived
		on ok (Box.archiveBox)

	UpdateBox<BoxUpdate> 
		PUT "/box/update"  
		authorize
		payload 
			maxInterval
			NotNull maxCardsPerDay
			NotNull boxId
			NotNull categoryId
			NotNull categoryName
			dictionaryLookup
			givenLanguage
			wantedLanguage
		on canEditCategory ( RootCategory.update)
		on ok ( Box.updateBox )
		
	GetBoxSettings<BoxSettingsWrapper>
		GET "/box/settings/{boxId}" 
		authorize 
		pathParams 
			NotNull boxId
		response 
			boxSettings

	ScheduleCards<ScheduledCards>
		POST "/cards/schedule" 
		authorize 
		payload 
			NotNull cardIds 
			NotNull boxId
		on ok (Box.scheduleCards)
		on nullOrEmpty
	
	SortCardsOut<SortCardsOut>
		POST "/cards/sort-out" 
		authorize 
		payload 
			NotNull cardIds 
			NotNull boxId
		on ok (Box.sortCardsOut ReinforceCard.sortOut)
		on nullOrEmpty
	
	ScoreCard<ScoreCard>
		POST "/card/score"  
		authorize
		payload 
			NotNull scheduledCardId 
			NotNull scoredCardQuality
		response intervalDifference
		on score (ScheduledCard.score ScheduledCard.scheduleNext)
		on reinforce (ReinforceCard.add)
		

	ScoreReinforceCard<ScoreReinforceCard>
		POST "/card/score-reinforce"  
		authorize
		payload 
			NotNull reinforceCardId 
			NotNull keep
		on keep (ReinforceCard.update)
		on remove (ReinforceCard.remove)

	InitMyBoxesForDay<InitMyBoxesData>
		PUT "/box/init"  
		authorize
		payload 
			NotNull todayAtMidnightInUTC 
		on ok ( ScheduledCard.postponeCards ReinforceCard.clear )
	
	GetBoxes<BoxList>
		GET "/boxes/my/" 
		authorize 
		queryParams 
			NotNull todayAtMidnightInUTC
		response 
			boxList
		
	GetBoxStatistics<BoxStatisticsList>
		GET "/boxes/statistics/" 
		authorize 
		queryParams 
			NotNull todayAtMidnightInUTC
		response 
			boxStatisticsList
		
	LoadNextCard<NextCard>
		GET "/box/next-card"
		authorize  
		queryParams 
			NotNull boxId 
			NotNull todayAtMidnightInUTC
		response
			nextCard
			allTodaysCards
			openTodaysCards
			reverse

	DeleteBox<DeleteBox>
		DELETE "/box/delete"  
		authorize
		queryParams 
			NotNull boxId
		on deleteBox ( 
			ScheduledCard.deleteAll 
			ReinforceCard.deleteAll 
			Box.deleteBox 
			UserAccessToCategory.delete
		)
		on deleteCategory (
			RootCategory.deleteAll 
		)
		on deleteReverseBox (
			Box.deleteReverseBox 
		)
		
	LoadAllActiveCards<ActiveCardList>
		GET "/box/active-cards/{boxId}" 
		authorize
		pathParams 
			NotNull boxId
		response 
			cardList
			editable
	
views 
	Box {
		createBox (BoxCreation)
		updateBox (BoxUpdate)
		deleteBox (DeleteBox)
		deleteReverseBox (DeleteBox)
		archiveBox (BoxArchive)
		scheduleCards(ScheduledCards)
		sortCardsOut(SortCardsOut)
	}
	
	ScheduledCard { 
		score(ScoreCard)
		scheduleNext(ScoreCard)
		postponeCards(InitMyBoxesData)
		deleteAll(DeleteBox)
	}
	
	ReinforceCard { 
		add(ScoreCard)
		remove(ScoreReinforceCard)
		update(ScoreReinforceCard)
		clear(InitMyBoxesData)
		deleteAll(DeleteBox)
		sortOut(SortCardsOut)
	}
	
	RootCategory {
		insert(BoxCreation)
		update(BoxUpdate)
		deleteAll(DeleteBox)
	}
	
	UserAccessToCategory {
		grantAccess(com.anfelisa.box.BoxCreation)
		delete(com.anfelisa.box.DeleteBox)
	}

models 
	persistent Box {
		Unique PrimaryKey NotNull String boxId
		NotNull String userId references com.anfelisa.user.User.userId
		NotNull String categoryId references com.anfelisa.category.Category.categoryId
		Integer maxInterval 
		NotNull Integer maxCardsPerDay
		NotNull Boolean reverse
		NotNull Boolean archived
	}
	
	persistent ScheduledCard {
		Unique PrimaryKey NotNull String scheduledCardId
		NotNull String cardId references com.anfelisa.card.Card.cardId
		NotNull String boxId references Box.boxId
		NotNull DateTime createdDate
		NotNull Float ef
		Integer interval
		NotNull Integer n
		NotNull Integer count
		DateTime scheduledDate
		Integer lastQuality
		Integer quality
		DateTime scoredDate
	}

	persistent ReinforceCard {
		Unique PrimaryKey NotNull String reinforceCardId
		Unique PrimaryKey NotNull String scheduledCardId references ScheduledCard.scheduledCardId
		NotNull String boxId references Box.boxId
		NotNull DateTime changeDate
	}

	BoxView {
		Integer openTodaysCards
		String categoryName
		String categoryAuthor
		String categoryId
		String boxId
		Boolean reverse
		Boolean editable
		Boolean archived
		Boolean deletable
	}

	BoxStatistics {
		String boxId
		Integer quality0Count
		Integer quality1Count
		Integer quality2Count
		Integer quality3Count
		Integer quality4Count
		Integer quality5Count
		List Integer countsPerDayNextWeek
		Integer maxCardsPerDay
	}
	
	BoxWithStatistics extends BoxView, BoxStatistics

	InitBoxes {
		DateTime minScheduledDate
		String boxId
	}

	BoxList {
		List BoxView boxList
		String userId
		DateTime todayAtMidnightInUTC
	}
	BoxStatisticsList {
		List BoxStatistics boxStatisticsList
		String userId
		DateTime todayAtMidnightInUTC
	}
	InitMyBoxesData {
		String userId
		DateTime todayAtMidnightInUTC
		List PostponeCards postponeCards
		List String outdatedReinforceCardsIds
	}
	PostponeCards {
		Integer days
		String boxId
	}

	BoxUpdate {
		String userId
		String boxId
		Integer maxInterval
		Integer maxCardsPerDay
		String categoryName
		Boolean dictionaryLookup
		String givenLanguage
		String wantedLanguage
		String categoryId
	}
	
	BoxSettings {
		String boxId
		Integer maxInterval
		Integer maxCardsPerDay
		String categoryName
		Boolean dictionaryLookup
		String givenLanguage
		String wantedLanguage
		String categoryId
		Integer allCards
		Integer allActiveCards
		Boolean shared
	}

	BoxSettingsWrapper {
		String userId
		String boxId
		BoxSettings boxSettings
	}
	
	NextCardView {
		String scheduledCardId
		String reinforceCardId
		String cardId
		DateTime scheduledDate
		Integer lastQuality
		String given
		String wanted
		String categoryId
		String categoryName
		String rootCategoryId
		Integer count
		DateTime scoredDate
	}

	TodaysCardsStatus {
		Integer openTodaysCards
		Integer allTodaysCards
	}

	NextCard extends TodaysCardsStatus {
		String userId
		String boxId
		DateTime todayAtMidnightInUTC
		NextCardView nextCard
		Boolean reverse
	}
	
	ScoreCard {
		String cardId
		
		String nextScheduledCardScheduledCardId
		DateTime nextScheduledCardCreatedDate
		Float nextScheduledCardEf
		Integer nextScheduledCardInterval
		Integer nextScheduledCardN
		Integer nextScheduledCardCount
		DateTime nextScheduledCardScheduledDate
		Integer nextScheduledCardLastQuality
		
		String scheduledCardId
		Integer scoredCardQuality
		DateTime scoredCardScoredDate

		String reinforceCardId
		DateTime reinforceCardCreatedDate

		String userId
		String boxId
		
		Integer intervalDifference
	}

	ScoreReinforceCard {
		String reinforceCardId
		Boolean keep
		DateTime changeDate
		String userId
	}
	
	ScheduledCards {
		List ScheduledCard newScheduledCards
		List String existingScheduledCardIds
		List String cardIds
		DateTime scheduledDate
		String userId
		String boxId
		Boolean reverse
	}
	
	SortCardsOut {
		List String sortedOutScheduledCardIds
		List String sortedOutReinforceCardIds
		List String cardIds
		String userId
		String boxId
		Boolean reverse
	}
	
	DeleteBox {
		String userId
		String boxId
		String reverseBoxId
		String rootCategoryId
	}

	BoxArchive {
		String userId
		String boxId
		Boolean archived
	}

	BoxCreation extends com.anfelisa.category.Category, com.anfelisa.category.UserAccessToCategory, Box {
		String username
	}

	ReverseBoxCreation {
		String boxId
		String username
	}

	CardWithStatistics extends com.anfelisa.card.CardWithInfo {
		NotNull Float ef
		Integer interval
		NotNull Integer count
		Integer lastQuality
	}

	ActiveCardList {
		String userId
		String boxId
		List CardWithStatistics cardList
		Boolean editable
	}

