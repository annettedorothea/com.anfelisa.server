HttpServer Java 

com.anfelisa.category.deletecategory

scenarios 
	DeleteCategory
		GIVEN
			com.anfelisa.category.createcategory.CreateSecondCategory
		WHEN
			com.anfelisa.category.DeleteCategory
				{
					categoryId: "cat1-${testId}"
				}
				authorization "Annette-${testId}" : "password"
		THEN 200
		persistence
			categoryWasDeleted Category selectBy(categoryId: "cat1-${testId}") shouldBe null
			indexWasShifted Category selectBy(categoryId: "cat2-${testId}") shouldBe 
			{
				categoryAuthor: "Annette-${testId}",
				categoryId: "cat2-${testId}",
				categoryIndex: 1,
				categoryName: "level 1 #2",
				dictionaryLookup: false,
				parentCategoryId: "boxId-${testId}",
				rootCategoryId: "boxId-${testId}"
			}

	DeleteCategoryUnauthorized
		GIVEN
			com.anfelisa.category.createcategory.CreateSecondCategory
		WHEN
			com.anfelisa.category.DeleteCategory
				{
					categoryId: "cat1-${testId}"
				}
		THEN 401
		persistence
			categoryWasNotDeleted Category selectBy ( categoryId: "cat1-${testId}") shouldBe
			{
				categoryAuthor: "Annette-${testId}",
				categoryId: "cat1-${testId}",
				categoryIndex: 1,
				categoryName: "level 1 #1",
				dictionaryLookup: false,
				parentCategoryId: "boxId-${testId}",
				rootCategoryId: "boxId-${testId}"				
			}

	
	DeleteCategoryNoEditingAccess
		GIVEN
			com.anfelisa.category.createcategory.CreateSecondCategory
			com.anfelisa.user.registeruser.RegisterTwoUsers excludeGIVEN
			com.anfelisa.category.inviteusertocategory.InviteUserToCategory excludeGIVEN
		WHEN
			com.anfelisa.category.DeleteCategory
				{
					categoryId: "cat1-${testId}"
				}
				authorization "Anne-${testId}" : "pw"
		THEN 401
		persistence
			categoryWasNotDeleted Category selectBy ( categoryId: "cat1-${testId}") shouldBe
			{
				categoryAuthor: "Annette-${testId}",
				categoryId: "cat1-${testId}",
				categoryIndex: 1,
				categoryName: "level 1 #1",
				dictionaryLookup: false,
				parentCategoryId: "boxId-${testId}",
				rootCategoryId: "boxId-${testId}"				
			}

	DeleteCategoryNoAccess
		GIVEN
			com.anfelisa.category.createcategory.CreateSecondCategory
			com.anfelisa.user.registeruser.RegisterUserAdmin
		WHEN
			com.anfelisa.category.DeleteCategory
				{
					categoryId: "cat1-${testId}"
				}
				authorization "Admin" : "admin-password"
		THEN 401
		persistence
			categoryWasNotDeleted Category selectBy ( categoryId: "cat1-${testId}") shouldBe
			{
				categoryAuthor: "Annette-${testId}",
				categoryId: "cat1-${testId}",
				categoryIndex: 1,
				categoryName: "level 1 #1",
				dictionaryLookup: false,
				parentCategoryId: "boxId-${testId}",
				rootCategoryId: "boxId-${testId}"				
			}

	DeleteCategoryDoesNotExist
		GIVEN
			com.anfelisa.category.createcategory.CreateSecondCategory
			com.anfelisa.user.registeruser.RegisterUserAdmin
		WHEN
			com.anfelisa.category.DeleteCategory
				{
					categoryId: "xx"
				}
				authorization "Annette-${testId}" : "password"
		THEN 400

	DeleteRootCategory
		GIVEN
			com.anfelisa.category.createcategory.CreateSecondCategory
		WHEN
			com.anfelisa.category.DeleteCategory
				{
					categoryId: "boxId-${testId}"
				}
				authorization "Annette-${testId}" : "password"
		THEN 400
		persistence
			boxWasNotDeleted Box selectBy ( boxId: "boxId-${testId}") shouldBe
			{
				categoryId: "boxId-${testId}",
				boxId: "boxId-${testId}",
				maxCardsPerDay: 10,
				maxInterval: null,
				userId: "uuid-${testId}",
				reverse: false
			}
			rootCategoryWasNotDeleted Category selectBy ( categoryId: "boxId-${testId}") shouldBe
			{
				categoryAuthor: "Annette-${testId}",
				categoryId: "boxId-${testId}",
				categoryIndex: null,
				categoryName: "cat",
				dictionaryLookup: false,
				parentCategoryId: null,
				rootCategoryId: "boxId-${testId}"				
			}
			firstCategoryWasNotDeleted Category selectBy ( categoryId: "cat1-${testId}") shouldBe
			{
				categoryAuthor: "Annette-${testId}",
				categoryId: "cat1-${testId}",
				categoryIndex: 1,
				categoryName: "level 1 #1",
				dictionaryLookup: false,
				parentCategoryId: "boxId-${testId}",
				rootCategoryId: "boxId-${testId}"				
			}
			secondCategoryWasNotDeleted Category selectBy ( categoryId: "cat2-${testId}") shouldBe
			{
				categoryAuthor: "Annette-${testId}",
				categoryId: "cat2-${testId}",
				categoryIndex: 2,
				categoryName: "level 1 #2",
				dictionaryLookup: false,
				parentCategoryId: "boxId-${testId}",
				rootCategoryId: "boxId-${testId}"				
			}

