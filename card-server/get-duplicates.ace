HttpServer Java 

com.anfelisa.card.getduplicates

scenarios 
	GetDuplicates
		GIVEN
			com.anfelisa.card.createcard.CreateFifthCard
			com.anfelisa.category.createcategory.CreateSecondCategory excludeGIVEN
			com.anfelisa.card.createcard.CreateCardInOtherCategory excludeGIVEN
			com.anfelisa.box.createbox.CreateSecondBox excludeGIVEN
			com.anfelisa.card.createcard.CreateCardInOtherBox excludeGIVEN
		WHEN
			com.anfelisa.card.GetDuplicates
				{
					categoryId: "boxId-${testId}",
					given: "ive",
					wanted: "nted",
					naturalInputOrder: true
				}
				authorization "Annette-${testId}" : "password"
		THEN 200
		response shouldBe {
			cardList : [
				{
					cardAuthor: "Annette-${testId}",
					cardId: "c3-${testId}",
					cardIndex: 3,
					categoryId: "cat1-${testId}",
					given: "3given",
					rootCategoryId: "boxId-${testId}",
					wanted: "3wanted",
					categoryName: "level 1 #1"
				},
				{
					cardAuthor: "Annette-${testId}",
					cardId: "c4-${testId}",
					cardIndex: 4,
					categoryId: "cat1-${testId}",
					given: "4given4",
					rootCategoryId: "boxId-${testId}",
					wanted: "4wanted4",
					categoryName: "level 1 #1"
				},
				{
					cardAuthor: "Annette-${testId}",
					cardId: "c6-${testId}",
					cardIndex: 1,
					categoryId: "cat2-${testId}",
					given: "aa-given",
					rootCategoryId: "boxId-${testId}",
					wanted: "zz-wanted",
					categoryName: "level 1 #2"
				},
				{
					cardAuthor: "Annette-${testId}",
					cardId: "c1-${testId}",
					cardIndex: 1,
					categoryId: "cat1-${testId}",
					given: "given",
					image: "image",
					rootCategoryId: "boxId-${testId}",
					wanted: "wanted",
					categoryName: "level 1 #1"
				},
				{
					cardAuthor: "Annette-${testId}",
					cardId: "c2-${testId}",
					cardIndex: 2,
					categoryId: "cat1-${testId}",
					given: "given2",
					image: "image2",
					rootCategoryId: "boxId-${testId}",
					wanted: "wanted2",
					categoryName: "level 1 #1"
				}
			]
		}

	GetDuplicatesNaturalInputOrderIsNull
		GIVEN
			com.anfelisa.card.createcard.CreateCard
		WHEN
			com.anfelisa.card.GetDuplicates
				{
					categoryId: "boxId-${testId}",
					given: "ive",
					wanted: "nted",
					naturalInputOrder: null
				}
				authorization "Annette-${testId}" : "password"
		THEN 200
		response shouldBe {
			cardList : [
				{
					cardAuthor: "Annette-${testId}",
					cardId: "c1-${testId}",
					cardIndex: 1,
					categoryId: "cat1-${testId}",
					given: "given",
					image: "image",
					rootCategoryId: "boxId-${testId}",
					wanted: "wanted",
					categoryName: "level 1 #1"
				}
			]
		}

	GetDuplicatesNaturalGivenAndWantedAreNull
		GIVEN
			com.anfelisa.card.createcard.CreateCard
		WHEN
			com.anfelisa.card.GetDuplicates
				{,
					categoryId: "boxId-${testId}",
					given: null,
					wanted: null,
					naturalInputOrder: true
				}
				authorization "Annette-${testId}" : "password"
		THEN 200
		response shouldBe {
			cardList : []
		}

	GetDuplicatesLimit
		GIVEN
			com.anfelisa.card.createcard.CreateRandomCard 60x
		WHEN
			com.anfelisa.card.GetDuplicates
				{
					categoryId: "boxId-${testId}",
					given: "ive",
					wanted: "nted",
					naturalInputOrder: true
				}
				authorization "Annette-${testId}" : "password"
		THEN 200
		verifications 
			shouldReturn25Items

	GetDuplicatesOrderByWanted
		GIVEN
			com.anfelisa.card.createcard.CreateFifthCard
			com.anfelisa.category.createcategory.CreateSecondCategory excludeGIVEN
			com.anfelisa.card.createcard.CreateCardInOtherCategory excludeGIVEN
			com.anfelisa.box.createbox.CreateSecondBox excludeGIVEN
			com.anfelisa.card.createcard.CreateCardInOtherBox excludeGIVEN
		WHEN
			com.anfelisa.card.GetDuplicates
				{
					categoryId: "boxId-${testId}",
					given: "ive",
					wanted: "nted",
					naturalInputOrder: false
				}
				authorization "Annette-${testId}" : "password"
		THEN 200
		response shouldBe {
			cardList : [
				{
					cardAuthor: "Annette-${testId}",
					cardId: "c3-${testId}",
					cardIndex: 3,
					categoryId: "cat1-${testId}",
					given: "3given",
					rootCategoryId: "boxId-${testId}",
					wanted: "3wanted",
					categoryName: "level 1 #1"
				},
				{
					cardAuthor: "Annette-${testId}",
					cardId: "c4-${testId}",
					cardIndex: 4,
					categoryId: "cat1-${testId}",
					given: "4given4",
					rootCategoryId: "boxId-${testId}",
					wanted: "4wanted4",
					categoryName: "level 1 #1"
				},
				{
					cardAuthor: "Annette-${testId}",
					cardId: "c1-${testId}",
					cardIndex: 1,
					categoryId: "cat1-${testId}",
					given: "given",
					image: "image",
					rootCategoryId: "boxId-${testId}",
					wanted: "wanted",
					categoryName: "level 1 #1"
				},
				{
					cardAuthor: "Annette-${testId}",
					cardId: "c2-${testId}",
					cardIndex: 2,
					categoryId: "cat1-${testId}",
					given: "given2",
					image: "image2",
					rootCategoryId: "boxId-${testId}",
					wanted: "wanted2",
					categoryName: "level 1 #1"
				},
				{
					cardAuthor: "Annette-${testId}",
					cardId: "c6-${testId}",
					cardIndex: 1,
					categoryId: "cat2-${testId}",
					given: "aa-given",
					rootCategoryId: "boxId-${testId}",
					wanted: "zz-wanted",
					categoryName: "level 1 #2"
				}
			]
		}

	GetDuplicatesCategoryDoesNotExist
		GIVEN
			com.anfelisa.card.createcard.CreateFifthCard
		WHEN
			com.anfelisa.card.GetDuplicates
				{
					categoryId: "lala",
					given: "ive",
					wanted: "nted",
					naturalInputOrder: true
				}
				authorization "Annette-${testId}" : "password"
		THEN 400

	GetDuplicatesNoAccessToCategory
		GIVEN
			com.anfelisa.card.createcard.CreateFifthCard
			com.anfelisa.user.registeruser.RegisterUserAdmin
		WHEN
			com.anfelisa.card.GetDuplicates
				{
					categoryId: "boxId-${testId}",
					given: "ive",
					wanted: "nted",
					naturalInputOrder: true
				}
				authorization "Admin" : "admin-password"
		THEN 401
		
	GetDuplicatesUnauthorized
		GIVEN
			com.anfelisa.card.createcard.CreateFifthCard
		WHEN
			com.anfelisa.card.GetDuplicates
				{
					categoryId: "boxId-${testId}",
					given: "ive",
					wanted: "nted",
					naturalInputOrder: true
				}
		THEN 401
		
		
