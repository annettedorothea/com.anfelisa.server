HttpServer Java 

com.anfelisa.card.movecard

scenarios 
	MoveCards
		GIVEN
			com.anfelisa.card.createcard.CreateFifthCard
			com.anfelisa.category.createcategory.CreateSecondCategory excludeGIVEN
		WHEN
			com.anfelisa.card.MoveCards
				{
					categoryId: "cat2-${testId}",
					cardIdList: [
						"c1-${testId}", "c2-${testId}", "c4-${testId}"
					]
				}
				authorization "Annette-${testId}" : "password"
		THEN 200
		persistence
			firstCard Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat2-${testId}",
				given: "given",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}
			secondCard Card selectByPrimaryKey ( cardId : "c2-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c2-${testId}",
				cardIndex: 2,
				categoryId: "cat2-${testId}",
				given: "given2",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted2"
			}
			thirdCard Card selectByPrimaryKey ( cardId : "c3-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c3-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "3given",
				rootCategoryId: "boxId-${testId}",
				wanted: "3wanted"
			}
			fourthCard Card selectByPrimaryKey ( cardId : "c4-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c4-${testId}",
				cardIndex: 3,
				categoryId: "cat2-${testId}",
				given: "4given4",
				rootCategoryId: "boxId-${testId}",
				wanted: "4wanted4"
			}
			fifthCard Card selectByPrimaryKey ( cardId : "c5-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c5-${testId}",
				cardIndex: 2,
				categoryId: "cat1-${testId}",
				given: "different",
				rootCategoryId: "boxId-${testId}",
				wanted: "different"
			}

	MoveCardsTargetNotEmpty
		GIVEN
			com.anfelisa.card.createcard.CreateFifthCard
			com.anfelisa.category.createcategory.CreateSecondCategory excludeGIVEN
			com.anfelisa.card.createcard.CreateCardInOtherCategory excludeGIVEN
		WHEN
			com.anfelisa.card.MoveCards
				{
					categoryId: "cat2-${testId}",
					cardIdList: [
						"c1-${testId}", "c2-${testId}", "c4-${testId}"
					] 
				}
				authorization "Annette-${testId}" : "password"
		THEN 200
		persistence
			firstCard Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 2,
				categoryId: "cat2-${testId}",
				given: "given",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}
			secondCard Card selectByPrimaryKey ( cardId : "c2-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c2-${testId}",
				cardIndex: 3,
				categoryId: "cat2-${testId}",
				given: "given2",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted2"
			}
			thirdCard Card selectByPrimaryKey ( cardId : "c3-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c3-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "3given",
				rootCategoryId: "boxId-${testId}",
				wanted: "3wanted"
			}
			fourthCard Card selectByPrimaryKey ( cardId : "c4-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c4-${testId}",
				cardIndex: 4,
				categoryId: "cat2-${testId}",
				given: "4given4",
				rootCategoryId: "boxId-${testId}",
				wanted: "4wanted4"
			}
			fifthCard Card selectByPrimaryKey ( cardId : "c5-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c5-${testId}",
				cardIndex: 2,
				categoryId: "cat1-${testId}",
				given: "different",
				rootCategoryId: "boxId-${testId}",
				wanted: "different"
			}

	MoveCardsCardDoesNotExist
		GIVEN
			com.anfelisa.card.createcard.CreateFifthCard
			com.anfelisa.category.createcategory.CreateSecondCategory excludeGIVEN
		WHEN
			com.anfelisa.card.MoveCards
				{
					categoryId: "cat2-${testId}",
					cardIdList: [
						"c1-${testId}", "lala", "c2-${testId}", "c4-${testId}"
					] 
				}
				authorization "Annette-${testId}" : "password"
		THEN 400
		persistence
			firstCard Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}
			secondCard Card selectByPrimaryKey ( cardId : "c2-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c2-${testId}",
				cardIndex: 2,
				categoryId: "cat1-${testId}",
				given: "given2",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted2"
			}
			thirdCard Card selectByPrimaryKey ( cardId : "c3-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c3-${testId}",
				cardIndex: 3,
				categoryId: "cat1-${testId}",
				given: "3given",
				rootCategoryId: "boxId-${testId}",
				wanted: "3wanted"
			}
			fourthCard Card selectByPrimaryKey ( cardId : "c4-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c4-${testId}",
				cardIndex: 4,
				categoryId: "cat1-${testId}",
				given: "4given4",
				rootCategoryId: "boxId-${testId}",
				wanted: "4wanted4"
			}
			fifthCard Card selectByPrimaryKey ( cardId : "c5-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c5-${testId}",
				cardIndex: 5,
				categoryId: "cat1-${testId}",
				given: "different",
				rootCategoryId: "boxId-${testId}",
				wanted: "different"
			}

	MoveCardsNoAccessToCategory
		GIVEN
			com.anfelisa.card.createcard.CreateCard
			com.anfelisa.category.createcategory.CreateCategoryAsAdmin
		WHEN
			com.anfelisa.card.MoveCards
				{
					categoryId: "adminCat-${testId}",
					cardIdList: [
						"c1-${testId}"
					] 
				}
				authorization "Admin" : "admin-password"
		THEN 401
		persistence
			firstCard Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}

	MoveCardsNoAccessToCard
		GIVEN
			com.anfelisa.card.createcard.CreateCard
			com.anfelisa.category.createcategory.CreateCategoryAsAdmin
		WHEN
			com.anfelisa.card.MoveCards
				{
					categoryId: "adminCat-${testId}",
					cardIdList: [
						"c1-${testId}"
					] 
				}
				authorization "Admin" : "admin-password"
		THEN 401
		persistence
			firstCard Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}

	MoveCardsNoEditingAccessToCard
		GIVEN
			com.anfelisa.card.createcard.CreateCard
			com.anfelisa.category.createcategory.CreateSecondCategory excludeGIVEN
			com.anfelisa.user.registeruser.RegisterTwoUsers excludeGIVEN
			com.anfelisa.category.inviteusertocategory.InviteUserToCategory excludeGIVEN
		WHEN
			com.anfelisa.card.MoveCards
				{
					categoryId: "cat2-${testId}",
					cardIdList: [ "c1-${testId}" ]
				}
				authorization "Anne-${testId}" : "pw"
		THEN 401
		persistence
			firstCard Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}

	MoveCardsNoEditingAccessToCategory
		GIVEN
			com.anfelisa.card.createcard.CreateCard
			com.anfelisa.category.createcategory.CreateSecondCategory excludeGIVEN
			com.anfelisa.user.registeruser.RegisterTwoUsers excludeGIVEN
			com.anfelisa.category.inviteusertocategory.InviteUserToCategory excludeGIVEN
		WHEN
			com.anfelisa.card.MoveCards
				{
					categoryId: "cat2-${testId}",
					cardIdList: [ "c1-${testId}" ]
				}
				authorization "Anne-${testId}" : "pw"
		THEN 401
		persistence
			firstCard Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}

	MoveCardsUnauthorized
		GIVEN
			com.anfelisa.card.createcard.CreateFifthCard
			com.anfelisa.category.createcategory.CreateSecondCategory excludeGIVEN
		WHEN
			com.anfelisa.card.MoveCards
				{
					categoryId: "cat2-${testId}",
					cardIdList: [
						"c1-${testId}", "c2-${testId}", "c4-${testId}"
					] 
				}
		THEN 401
		persistence
			firstCard Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}
			secondCard Card selectByPrimaryKey ( cardId : "c2-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c2-${testId}",
				cardIndex: 2,
				categoryId: "cat1-${testId}",
				given: "given2",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted2"
			}
			thirdCard Card selectByPrimaryKey ( cardId : "c3-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c3-${testId}",
				cardIndex: 3,
				categoryId: "cat1-${testId}",
				given: "3given",
				rootCategoryId: "boxId-${testId}",
				wanted: "3wanted"
			}
			fourthCard Card selectByPrimaryKey ( cardId : "c4-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c4-${testId}",
				cardIndex: 4,
				categoryId: "cat1-${testId}",
				given: "4given4",
				rootCategoryId: "boxId-${testId}",
				wanted: "4wanted4"
			}
			fifthCard Card selectByPrimaryKey ( cardId : "c5-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c5-${testId}",
				cardIndex: 5,
				categoryId: "cat1-${testId}",
				given: "different",
				rootCategoryId: "boxId-${testId}",
				wanted: "different"
			}


