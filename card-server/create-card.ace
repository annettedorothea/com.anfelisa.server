HttpServer Java 

com.anfelisa.card.createcard

scenarios 
	CreateCard
		GIVEN
			com.anfelisa.category.createcategory.CreateCategory
		WHEN
			com.anfelisa.card.CreateCard
				uuid "c1-${testId}"
				{
					categoryId: "cat1-${testId}",
					given: "given",
					image: "image",
					wanted: "wanted"
				}
				authorization "Annette-${testId}" : "password"
		THEN 200
		persistence
			firstCard Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given",
				image: "image",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}

	CreateSecondCard
		GIVEN
			CreateCard
		WHEN
			com.anfelisa.card.CreateCard
				uuid "c2-${testId}"
				{
					categoryId: "cat1-${testId}",
					given: "given2",
					image: "image2",
					wanted: "wanted2"
				}
				authorization "Annette-${testId}" : "password"
		THEN 200
		persistence
			firstCard Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given",
				image: "image",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}
			secondCard Card selectByPrimaryKey ( cardId : "c2-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c2-${testId}",
				cardIndex: 2,
				categoryId: "cat1-${testId}",
				given: "given2",
				image: "image2",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted2"
			}
		

	CreateThirdCard
		GIVEN
			CreateSecondCard
		WHEN
			com.anfelisa.card.CreateCard
				uuid "c3-${testId}"
				{
					categoryId: "cat1-${testId}",
					given: "3given",
					wanted: "3wanted"
				}
				authorization "Annette-${testId}" : "password"
		THEN 200
		persistence
			firstCard Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given",
				image: "image",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}
			secondCard Card selectByPrimaryKey ( cardId : "c2-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c2-${testId}",
				cardIndex: 2,
				categoryId: "cat1-${testId}",
				given: "given2",
				image: "image2",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted2"
			}
			thirdCard Card selectByPrimaryKey ( cardId : "c3-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c3-${testId}",
				cardIndex: 3,
				categoryId: "cat1-${testId}",
				given: "3given",
				rootCategoryId: "boxId-${testId}",
				wanted: "3wanted"
			}

	CreateFourthCard
		GIVEN
			CreateThirdCard
		WHEN
			com.anfelisa.card.CreateCard
				uuid "c4-${testId}"
				{
					categoryId: "cat1-${testId}",
					given: "4given4",
					wanted: "4wanted4"
				}
				authorization "Annette-${testId}" : "password"
		THEN 200
		persistence
			firstCard Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given",
				image: "image",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}
			secondCard Card selectByPrimaryKey ( cardId : "c2-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c2-${testId}",
				cardIndex: 2,
				categoryId: "cat1-${testId}",
				given: "given2",
				image: "image2",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted2"
			}
			thirdCard Card selectByPrimaryKey ( cardId : "c3-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c3-${testId}",
				cardIndex: 3,
				categoryId: "cat1-${testId}",
				given: "3given",
				rootCategoryId: "boxId-${testId}",
				wanted: "3wanted"
			}
			fourthCard Card selectByPrimaryKey ( cardId : "c4-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c4-${testId}",
				cardIndex: 4,
				categoryId: "cat1-${testId}",
				given: "4given4",
				rootCategoryId: "boxId-${testId}",
				wanted: "4wanted4"
			}

	CreateFifthCard
		GIVEN
			CreateFourthCard
		WHEN
			com.anfelisa.card.CreateCard
				uuid "c5-${testId}"
				{
					categoryId: "cat1-${testId}",
					given: "different",
					wanted: "different"
				}
				authorization "Annette-${testId}" : "password"
		THEN 200
		persistence
			firstCard Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given",
				image: "image",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}
			secondCard Card selectByPrimaryKey ( cardId : "c2-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c2-${testId}",
				cardIndex: 2,
				categoryId: "cat1-${testId}",
				given: "given2",
				image: "image2",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted2"
			}
			thirdCard Card selectByPrimaryKey ( cardId : "c3-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c3-${testId}",
				cardIndex: 3,
				categoryId: "cat1-${testId}",
				given: "3given",
				rootCategoryId: "boxId-${testId}",
				wanted: "3wanted"
			}
			fourthCard Card selectByPrimaryKey ( cardId : "c4-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c4-${testId}",
				cardIndex: 4,
				categoryId: "cat1-${testId}",
				given: "4given4",
				rootCategoryId: "boxId-${testId}",
				wanted: "4wanted4"
			}
			fifthCard Card selectByPrimaryKey ( cardId : "c5-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c5-${testId}",
				cardIndex: 5,
				categoryId: "cat1-${testId}",
				given: "different",
				rootCategoryId: "boxId-${testId}",
				wanted: "different"
			}

	CreateCardWithLongUuid
		GIVEN
			com.anfelisa.category.createcategory.CreateCategory
		WHEN
			com.anfelisa.card.CreateCard
				uuid "123456789-123456789-123456789-${testId}"
				{
					categoryId: "cat1-${testId}",
					given: "x",
					wanted: "y"
				}
				authorization "Annette-${testId}" : "password"
		THEN 200
		persistence
			firstCard Card selectByPrimaryKey ( cardId : "123456789-123456789-123456789-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "123456789-123456789-123456789-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "x",
				rootCategoryId: "boxId-${testId}",
				wanted: "y"
			}

	CreateRandomCard
		GIVEN
			com.anfelisa.category.createcategory.CreateCategory
		WHEN
			com.anfelisa.card.CreateCard
				uuid "${random}-${testId}"
				{
					categoryId: "cat1-${testId}",
					given: "given${random}",
					wanted: "wanted${random}"
				}
				authorization "Annette-${testId}" : "password"
		THEN 200
		persistence
			randomCardWasCreated Card filterAndCountBy ( categoryId: "cat1-${testId}" ) shouldBe 1

	CreateCardInOtherCategory
		GIVEN
			com.anfelisa.category.createcategory.CreateCategory
			com.anfelisa.category.createcategory.CreateSecondCategory excludeGIVEN
		WHEN
			com.anfelisa.card.CreateCard
				uuid "c6-${testId}"
				{
					categoryId: "cat2-${testId}",
					given: "aa-given",
					wanted: "zz-wanted"
				}
				authorization "Annette-${testId}" : "password"
		THEN 200
		persistence
			cardWasCreated Card selectByPrimaryKey ( cardId : "c6-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c6-${testId}",
				cardIndex: 1,
				categoryId: "cat2-${testId}",
				given: "aa-given",
				rootCategoryId: "boxId-${testId}",
				wanted: "zz-wanted"
			}

	CreateCardInOtherBox
		GIVEN
			com.anfelisa.box.createbox.CreateSecondBox
		WHEN
			com.anfelisa.card.CreateCard
				uuid "c7-${testId}"
				{
					categoryId: "boxId2-${testId}",
					given: "given",
					wanted: "wanted"
				}
				authorization "Annette-${testId}" : "password"
		THEN 200
		persistence
			cardWasCreated Card selectByPrimaryKey ( cardId : "c7-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c7-${testId}",
				cardIndex: 1,
				categoryId: "boxId2-${testId}",
				given: "given",
				rootCategoryId: "boxId2-${testId}",
				wanted: "wanted"
			}

	CreateCardMissingCategoryId
		GIVEN
			com.anfelisa.category.createcategory.CreateCategory
		WHEN
			com.anfelisa.card.CreateCard
				uuid "c2-${testId}"
				{
					given: "given",
					image: "image",
					wanted: "wanted"
				}
				authorization "Annette-${testId}" : "password"
		THEN 400
		persistence
			cardWasNotCreated Card selectBy(cardId: "c2-${testId}") shouldBe null

	CreateCardGivenNull
		GIVEN
			com.anfelisa.category.createcategory.CreateCategory
		WHEN
			com.anfelisa.card.CreateCard
				uuid "c1-${testId}"
				{
					categoryId: "cat1-${testId}",
					image: "image",
					wanted: "wanted"
				}
				authorization "Annette-${testId}" : "password"
		THEN 400
		persistence
			cardWasNotCreated Card selectBy(cardId: "c1-${testId}") shouldBe null

	CreateCardGivenEmpty
		GIVEN
			com.anfelisa.category.createcategory.CreateCategory
		WHEN
			com.anfelisa.card.CreateCard
				uuid "c1-${testId}"
				{
					categoryId: "cat1-${testId}",
					given: "  ",
					image: "image",
					wanted: "wanted"
				}
				authorization "Annette-${testId}" : "password"
		THEN 400
		persistence
			cardWasNotCreated Card selectBy(cardId: "c1-${testId}") shouldBe null

	CreateCardWantedNull
		GIVEN
			com.anfelisa.category.createcategory.CreateCategory
		WHEN
			com.anfelisa.card.CreateCard
				uuid "c1-${testId}"
				{
					categoryId: "cat1-${testId}",
					given: "given",
					image: "image"
				}
				authorization "Annette-${testId}" : "password"
		THEN 400
		persistence
			cardWasNotCreated Card selectBy(cardId: "c1-${testId}") shouldBe null
		
	CreateCardWantedEmpty
		GIVEN
			com.anfelisa.category.createcategory.CreateCategory
		WHEN
			com.anfelisa.card.CreateCard
				uuid "c1-${testId}"
				{
					categoryId: "cat1-${testId}",
					given: "given",
					image: "image",
					wanted: "  "
				}
				authorization "Annette-${testId}" : "password"
		THEN 400
		persistence
			cardWasNotCreated Card selectBy(cardId: "c1-${testId}") shouldBe null

	CreateCardImageNull
		GIVEN
			com.anfelisa.category.createcategory.CreateCategory
		WHEN
			com.anfelisa.card.CreateCard
				uuid "c1-${testId}"
				{
					categoryId: "cat1-${testId}",
					given: "given",
					wanted: "wanted"
				}
				authorization "Annette-${testId}" : "password"
		THEN 200
		persistence
			cardWasCreated Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given",
				image: null,
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}

	CreateCardImageEmpty
		GIVEN
			com.anfelisa.category.createcategory.CreateCategory
		WHEN
			com.anfelisa.card.CreateCard
				uuid "c1-${testId}"
				{
					categoryId: "cat1-${testId}",
					given: "given",
					image: "  ",
					wanted: "wanted"
				}
				authorization "Annette-${testId}" : "password"
		THEN 200
		persistence
			cardWasCreated Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given",
				image: "  ",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}

	CreateCardCategoryDoesNotExist
		GIVEN
			com.anfelisa.category.createcategory.CreateCategory
		WHEN
			com.anfelisa.card.CreateCard
				uuid "c1-${testId}"
				{
					categoryId: "lala",
					given: "given",
					image: "image",
					wanted: "wanted"
				}
				authorization "Annette-${testId}" : "password"
		THEN 400
		persistence
			cardWasNotCreated Card selectBy(cardId: "c1-${testId}") shouldBe null

	CreateCardNoAccessToCategory
		GIVEN
			com.anfelisa.category.createcategory.CreateCategory
			com.anfelisa.user.registeruser.RegisterUserAdmin
		WHEN
			com.anfelisa.card.CreateCard
				uuid "c1-${testId}"
				{
					categoryId: "cat1-${testId}",
					given: "given",
					image: "image",
					wanted: "wanted"
				}
				authorization "Admin" : "admin-password"
		THEN 401
		persistence
			cardWasNotCreated Card selectBy(cardId: "c1-${testId}") shouldBe null
		
	CreateCardNoEditingAccessToCategory
		GIVEN
			com.anfelisa.category.createcategory.CreateCategory
			com.anfelisa.user.registeruser.RegisterTwoUsers excludeGIVEN
			com.anfelisa.category.inviteusertocategory.InviteUserToCategory excludeGIVEN
		WHEN
			com.anfelisa.card.CreateCard
				uuid "c1-${testId}"
				{
					categoryId: "cat1-${testId}",
					given: "given",
					image: "image",
					wanted: "wanted"
				}
				authorization "Anne-${testId}" : "pw"
		THEN 401
		persistence
			cardWasNotCreated Card selectBy(cardId: "c1-${testId}") shouldBe null
		
	CreateCardUnauthorized
		GIVEN
			com.anfelisa.category.createcategory.CreateCategoryAsAdmin
		WHEN
			com.anfelisa.card.CreateCard
				uuid "c1-${testId}"
				{
					categoryId: "cat1-${testId}",
					given: "given",
					image: "image",
					wanted: "wanted"
				}
		THEN 401
		persistence
			cardWasNotCreated Card selectBy(cardId: "c1-${testId}") shouldBe null
		
	CreateCardAsAdmin
		GIVEN
			com.anfelisa.category.createcategory.CreateCategoryAsAdmin
		WHEN
			com.anfelisa.card.CreateCard
				uuid "c6-${testId}"
				{
					categoryId: "adminCat-${testId}",
					given: "given",
					image: "image",
					wanted: "wanted"
				}
				authorization "Admin" : "admin-password"
		THEN 200
		persistence
			cardWasCreated Card selectByPrimaryKey ( cardId : "c6-${testId}" ) shouldBe
			{
				cardAuthor: "Admin",
				cardId: "c6-${testId}",
				cardIndex: 1,
				categoryId: "adminCat-${testId}",
				given: "given",
				image: "image",
				rootCategoryId: "adminBox-${testId}",
				wanted: "wanted"
			}
		
