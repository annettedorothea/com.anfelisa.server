HttpServer Java 

com.anfelisa.card.updatecard

scenarios 
	UpdateCard
		GIVEN
			com.anfelisa.card.createcard.CreateCard
		WHEN
			com.anfelisa.card.UpdateCard
				{
					cardId: "c1-${testId}",
					given: "given-updated",
					wanted: "wanted-updated"
				}
				authorization "Annette-${testId}" : "password"
		THEN 200
		persistence
			wasUpdated Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given-updated",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted-updated"
			}

	UpdateCardMissingCardId
		GIVEN
			com.anfelisa.card.createcard.CreateCard
		WHEN
			com.anfelisa.card.UpdateCard
				{,
					given: "given",
					wanted: "wanted"
				}
				authorization "Annette-${testId}" : "password"
		THEN 400
		persistence
			wasNotUpdated Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}

	UpdateCardGivenNull
		GIVEN
			com.anfelisa.card.createcard.CreateCard
		WHEN
			com.anfelisa.card.UpdateCard
				{
					cardId: "c1-${testId}",
					wanted: "wanted"
				}
				authorization "Annette-${testId}" : "password"
		THEN 400
		persistence
			wasNotUpdated Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}

	UpdateCardGivenEmpty
		GIVEN
			com.anfelisa.card.createcard.CreateCard
		WHEN
			com.anfelisa.card.UpdateCard
				{
					cardId: "c1-${testId}",
					given: "  ",
					wanted: "wanted"
				}
				authorization "Annette-${testId}" : "password"
		THEN 400
		persistence
			wasNotUpdated Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}

	UpdateCardWantedNull
		GIVEN
			com.anfelisa.card.createcard.CreateCard
		WHEN
			com.anfelisa.card.UpdateCard
				{
					cardId: "c1-${testId}",
					given: "given"
				}
				authorization "Annette-${testId}" : "password"
		THEN 400
		persistence
			wasNotUpdated Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}
		
	UpdateCardWantedEmpty
		GIVEN
			com.anfelisa.card.createcard.CreateCard
		WHEN
			com.anfelisa.card.UpdateCard
				{
					cardId: "c1-${testId}",
					given: "given",
					wanted: "  "
				}
				authorization "Annette-${testId}" : "password"
		THEN 400
		persistence
			wasNotUpdated Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}

	UpdateCardImageNull
		GIVEN
			com.anfelisa.card.createcard.CreateCard
		WHEN
			com.anfelisa.card.UpdateCard
				{
					cardId: "c1-${testId}",
					given: "given-x",
					wanted: "wanted-x"
				}
				authorization "Annette-${testId}" : "password"
		THEN 200
		persistence
			wasUpdated Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given-x",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted-x"
			}

	UpdateCardImageEmpty
		GIVEN
			com.anfelisa.card.createcard.CreateCard
		WHEN
			com.anfelisa.card.UpdateCard
				{
					cardId: "c1-${testId}",
					given: "given",
					wanted: "wanted"
				}
				authorization "Annette-${testId}" : "password"
		THEN 200
		persistence
			wasUpdated Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}

	UpdateCardCardDoesNotExist
		GIVEN
			com.anfelisa.card.createcard.CreateCard
		WHEN
			com.anfelisa.card.UpdateCard
				{
					cardId: "lala",
					given: "given",
					wanted: "wanted"
				}
				authorization "Annette-${testId}" : "password"
		THEN 400
		persistence
			wasNotUpdated Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}

	UpdateCardNoAccessToCard
		GIVEN
			com.anfelisa.card.createcard.CreateCard
			com.anfelisa.user.registeruser.RegisterUserAdmin
		WHEN
			com.anfelisa.card.UpdateCard
				{
					cardId: "c1-${testId}",
					given: "given",
					wanted: "wanted"
				}
				authorization "Admin" : "admin-password"
		THEN 401
		persistence
			wasNotUpdated Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}
		
	UpdateCardNoEditingAccessToCard
		GIVEN
			com.anfelisa.card.createcard.CreateCard
			com.anfelisa.user.registeruser.RegisterTwoUsers excludeGIVEN
			com.anfelisa.category.inviteusertocategory.InviteUserToCategory excludeGIVEN
		WHEN
			com.anfelisa.card.UpdateCard
				{
					cardId: "c1-${testId}",
					given: "given-updated",
					wanted: "wanted-updated"
				}
				authorization "Anne-${testId}" : "pw"
		THEN 401
		persistence
			wasNotUpdated Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}
		
	UpdateCardUnauthorized
		GIVEN
			com.anfelisa.card.createcard.CreateCard
		WHEN
			com.anfelisa.card.UpdateCard
				{
					cardId: "c1-${testId}",
					given: "given",
					wanted: "wanted"
				}
		THEN 401
		persistence
			wasNotUpdated Card selectByPrimaryKey ( cardId : "c1-${testId}" ) shouldBe
			{
				cardAuthor: "Annette-${testId}",
				cardId: "c1-${testId}",
				cardIndex: 1,
				categoryId: "cat1-${testId}",
				given: "given",
				rootCategoryId: "boxId-${testId}",
				wanted: "wanted"
			}
		
		
