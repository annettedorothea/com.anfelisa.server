common

target ES6

actions {
	Init executes Init
	Route executes Route
	RouteHome executes Route
	Login executes Login
	Logout executes Logout
	SaveResult executes SaveResult
	ReadLastResultId executes ReadLastResultId	
}

commands {
	Init {
		on publicCourses publishes (navigation.UserIsNotLoggedIn) triggers ( navigation.ReadPublicCourses )
		on publicLessons publishes (navigation.UserIsNotLoggedIn) triggers ( navigation.ReadPublicLessons )
		on publicTests publishes (navigation.UserIsNotLoggedIn) triggers ( navigation.ReadPublicTests )
		on publicTest publishes (navigation.UserIsNotLoggedIn) triggers ( navigation.ReadPublicTest )
		on privateCourses publishes (navigation.UserIsLoggedIn) triggers ( navigation.ReadPrivateCourses navigation.ReadStatistics navigation.ReadBoxes )
		on privateLessons publishes (navigation.UserIsLoggedIn) triggers ( navigation.ReadPrivateLessons navigation.ReadBoxes )
		on privateTests publishes (navigation.UserIsLoggedIn) triggers ( navigation.ReadPrivateTests navigation.ReadBoxes )
		on privateTest publishes (navigation.UserIsLoggedIn) triggers ( navigation.ReadPrivateTest navigation.ReadBoxes ) 
		on result publishes (navigation.UserIsLoggedIn) triggers ( navigation.ReadResult navigation.ReadBoxes )
		on box publishes (navigation.UserIsLoggedIn) triggers ( navigation.ReadPrivateCourses navigation.ReadBoxes navigation.ReadNextCard )
	}
	Route {
		on ok publishes ( UpdateHash ) triggers ( Init )
	}
	Login {
		on ok publishes (UserLoggedIn) triggers ( Route )
		on error publishes ( ServerError ) triggers ( RouteHome )
	}
	Logout {
		on ok publishes (UserLoggedOut) triggers ( Route )
	}
	SaveResult {
		on resultSaved triggers (
			ReadLastResultId
		)
		on serverError publishes (
			common.ServerError
		)
	}
	ReadLastResultId {
		on resultIdRead triggers (
			common.Route
		)
		on serverError publishes (
			common.ServerError
		)
	}
}

events {
	InitOK listenedToBy ( Common.initLanguageInLocalStorage Common.initSchemaInLocalStorage )
	ServerError listenedToBy ( Error.renderServerError )
	Error listenedToBy ( Error.renderError )
	UpdateHash listenedToBy ( Common.updateHash )
	UserLoggedIn listenedToBy ( Common.initUserInLocalStorage )
	UserLoggedOut listenedToBy ( Common.removeUserFromLocalStorage navigation.Boxes.hideBoxes )
} 

views {
	Error {
		renderError
		renderServerError
	}
	Common {
		initLanguageInLocalStorage
		initSchemaInLocalStorage
		updateHash
		initUserInLocalStorage
		removeUserFromLocalStorage
	}
	Header {
		renderLogin
		renderLogout
	}
}