/********************************************************************************
 * generated by de.acegen 1.2.1
 ********************************************************************************/




package com.anfelisa.card.actions;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.anfelisa.box.models.BoxModel;
import com.anfelisa.box.models.ScheduledCardModel;
import com.anfelisa.card.models.CardListModel;
import com.anfelisa.card.models.CardWithInfoModel;
import com.anfelisa.category.models.CategoryModel;
import com.anfelisa.category.models.UserAccessToCategoryModel;

import de.acegen.CustomAppConfiguration;
import de.acegen.Data;
import de.acegen.IDaoProvider;
import de.acegen.PersistenceConnection;
import de.acegen.PersistenceHandle;
import de.acegen.ViewProvider;

public class GetCardsAction extends AbstractGetCardsAction {

	static final Logger LOG = LoggerFactory.getLogger(GetCardsAction.class);

	public GetCardsAction(PersistenceConnection persistenceConnection, CustomAppConfiguration appConfiguration, IDaoProvider daoProvider, 
			ViewProvider viewProvider) {
		super(persistenceConnection, appConfiguration, daoProvider, viewProvider);
	}


	@Override
	protected Data<CardListModel> loadDataForGetRequest(Data<CardListModel> data, PersistenceHandle readonlyHandle) {
		if (data.getModel().getReverse() == null) {
			data.getModel().setReverse(false);
		}
		if (data.getModel().getFilterNonScheduled() == null) {
			data.getModel().setFilterNonScheduled(false);
		}
		CategoryModel category = daoProvider.getCategoryDao().selectByCategoryId(readonlyHandle,
				data.getModel().getCategoryId());
		if (category == null) {
			throwIllegalArgumentException("categoryDoesNotExist");
		}
		UserAccessToCategoryModel userAccessToCategoryModel = daoProvider.getUserAccessToCategoryDao()
				.hasUserAccessTo(readonlyHandle, data.getModel().getCategoryId(), data.getModel().getUserId());
		if (userAccessToCategoryModel == null) {
			throwSecurityException();
		}
		BoxModel box = daoProvider.getBoxDao().selectByCategoryIdAndUserId(readonlyHandle,
				category.getRootCategoryId(), data.getModel().getUserId(), data.getModel().getReverse());
		if (box == null) {
			throwIllegalArgumentException("boxNotFound");
		}

		List<CardWithInfoModel> allCards = daoProvider.getCardDao().selectAllOfCategory(readonlyHandle,
				data.getModel().getCategoryId(), data.getModel().getPriority());
		List<CardWithInfoModel> cardList = new ArrayList<>();
		List<ScheduledCardModel> allUnscored = daoProvider.getCardDao()
				.selectUnscoredByCategoryAndBoxId(readonlyHandle, data.getModel().getCategoryId(), box.getBoxId(), data.getModel().getPriority());
		for (CardWithInfoModel card : allCards) {
			ScheduledCardModel scheduledCardModel = find(allUnscored, card);
			if (scheduledCardModel == null) {
				cardList.add(card);
			} else if (!data.getModel().getFilterNonScheduled()) {
				card.setNext(scheduledCardModel.getScheduledDate());
				cardList.add(card);
			}
		}
		data.getModel().setCardList(cardList);
		return data;
	}

	private ScheduledCardModel find(List<ScheduledCardModel> allUnscored, CardWithInfoModel card) {
		for (ScheduledCardModel scheduledCardModel : allUnscored) {
			if (scheduledCardModel.getCardId().equals(card.getCardId())) {
				return scheduledCardModel;
			}
		}
		return null;
	}
	

}



/******* S.D.G. *******/



