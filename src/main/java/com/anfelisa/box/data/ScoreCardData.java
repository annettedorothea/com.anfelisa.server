/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/




package com.anfelisa.box.data;

import com.fasterxml.jackson.annotation.JsonProperty;

public class ScoreCardData extends AbstractScoreCardData implements IScoreCardData {
	
	public ScoreCardData(
		@JsonProperty("cardId") String cardId, 
		@JsonProperty("nextScheduledCardScheduledCardId") String nextScheduledCardScheduledCardId, 
		@JsonProperty("nextScheduledCardCreatedDate") java.time.LocalDateTime nextScheduledCardCreatedDate, 
		@JsonProperty("nextScheduledCardEf") Float nextScheduledCardEf, 
		@JsonProperty("nextScheduledCardInterval") Integer nextScheduledCardInterval, 
		@JsonProperty("nextScheduledCardN") Integer nextScheduledCardN, 
		@JsonProperty("nextScheduledCardCount") Integer nextScheduledCardCount, 
		@JsonProperty("nextScheduledCardScheduledDate") java.time.LocalDateTime nextScheduledCardScheduledDate, 
		@JsonProperty("nextScheduledCardLastQuality") Integer nextScheduledCardLastQuality, 
		@JsonProperty("scheduledCardId") String scheduledCardId, 
		@JsonProperty("scoredCardQuality") Integer scoredCardQuality, 
		@JsonProperty("scoredCardScoredDate") java.time.LocalDateTime scoredCardScoredDate, 
		@JsonProperty("reinforceCardId") String reinforceCardId, 
		@JsonProperty("reinforceCardCreatedDate") java.time.LocalDateTime reinforceCardCreatedDate, 
		@JsonProperty("userId") String userId, 
		@JsonProperty("boxId") String boxId, 
		@JsonProperty("intervalDifference") Integer intervalDifference, 
		@JsonProperty("maxInterval") Integer maxInterval, 
		@JsonProperty("maxCardsPerDay") Integer maxCardsPerDay, 
		@JsonProperty("uuid") String uuid
	) {
		super(
			cardId,
			nextScheduledCardScheduledCardId,
			nextScheduledCardCreatedDate,
			nextScheduledCardEf,
			nextScheduledCardInterval,
			nextScheduledCardN,
			nextScheduledCardCount,
			nextScheduledCardScheduledDate,
			nextScheduledCardLastQuality,
			scheduledCardId,
			scoredCardQuality,
			scoredCardScoredDate,
			reinforceCardId,
			reinforceCardCreatedDate,
			userId,
			boxId,
			intervalDifference,
			maxInterval,
			maxCardsPerDay,
			uuid
		);
	}

	public ScoreCardData( String uuid ) {
		super(uuid);
	}

	public void migrateLegacyData(String json) {
	}

	public static com.anfelisa.box.models.IScoreCardModel generateTestData() {
		java.util.Random random = new java.util.Random();
		com.anfelisa.box.models.IScoreCardModel testData = new com.anfelisa.box.models.ScoreCardModel();
		testData.setCardId(randomString(random));
		testData.setNextScheduledCardScheduledCardId(randomString(random));
		testData.setNextScheduledCardCreatedDate(random.nextBoolean() ? java.time.LocalDateTime.now().plusMinutes(random.nextInt(60)) : java.time.LocalDateTime.now().minusMinutes(random.nextInt(60)) );
		testData.setNextScheduledCardEf(random.nextFloat());
		testData.setNextScheduledCardInterval(random.nextInt(50));
		testData.setNextScheduledCardN(random.nextInt(50));
		testData.setNextScheduledCardCount(random.nextInt(50));
		testData.setNextScheduledCardScheduledDate(random.nextBoolean() ? java.time.LocalDateTime.now().plusMinutes(random.nextInt(60)) : java.time.LocalDateTime.now().minusMinutes(random.nextInt(60)) );
		testData.setNextScheduledCardLastQuality(random.nextInt(50));
		testData.setScheduledCardId(randomString(random));
		testData.setScoredCardQuality(random.nextInt(50));
		testData.setScoredCardScoredDate(random.nextBoolean() ? java.time.LocalDateTime.now().plusMinutes(random.nextInt(60)) : java.time.LocalDateTime.now().minusMinutes(random.nextInt(60)) );
		testData.setReinforceCardId(randomString(random));
		testData.setReinforceCardCreatedDate(random.nextBoolean() ? java.time.LocalDateTime.now().plusMinutes(random.nextInt(60)) : java.time.LocalDateTime.now().minusMinutes(random.nextInt(60)) );
		testData.setUserId(randomString(random));
		testData.setBoxId(randomString(random));
		testData.setIntervalDifference(random.nextInt(50));
		testData.setMaxInterval(random.nextInt(50));
		testData.setMaxCardsPerDay(random.nextInt(50));
		return testData;
	}
	
	private static String randomString(java.util.Random random) {
		String chars = "aaaaaaabcdeeeeeeeffffghiiiiiiijkllllllmmmmnnnnnnnooooooooopqrstttuuuuuuuvxyz";
		int n = random.nextInt(20) + 5;
		StringBuilder sb = new StringBuilder(n);
		for (int i = 0; i < n; i++) {
			int index = random.nextInt(chars.length());
			sb.append(chars.charAt(index));
		}
		String string  = sb.toString(); 
		return string.substring(0,1).toUpperCase() + string.substring(1).toLowerCase();
	}
	
}



/******* S.D.G. *******/



