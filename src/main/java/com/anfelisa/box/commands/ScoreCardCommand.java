/********************************************************************************
 * generated by de.acegen 1.2.1
 ********************************************************************************/

package com.anfelisa.box.commands;

import java.time.LocalDateTime;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.anfelisa.box.models.BoxModel;
import com.anfelisa.box.models.ReinforceCardModel;
import com.anfelisa.box.models.ScheduledCardModel;
import com.anfelisa.box.models.ScoreCardModel;

import de.acegen.CustomAppConfiguration;
import de.acegen.Data;
import de.acegen.IDaoProvider;
import de.acegen.PersistenceHandle;
import de.acegen.ViewProvider;

public class ScoreCardCommand extends AbstractScoreCardCommand {

	static final Logger LOG = LoggerFactory.getLogger(ScoreCardCommand.class);

	public ScoreCardCommand(IDaoProvider daoProvider, ViewProvider viewProvider,
			CustomAppConfiguration appConfiguration) {
		super(daoProvider, viewProvider, appConfiguration);
	}

	@Override
	protected Data<ScoreCardModel>  executeCommand(Data<ScoreCardModel> data, PersistenceHandle readonlyHandle) {
		ScheduledCardModel scheduledCard = this.daoProvider.getScheduledCardDao().selectByScheduledCardId(
				readonlyHandle,
				data.getModel().getScheduledCardId());
		if (scheduledCard == null) {
			throwIllegalArgumentException("cardDoesNotExist");
		}
		BoxModel box = daoProvider.getBoxDao().selectByBoxId(readonlyHandle, scheduledCard.getBoxId());
		if (!data.getModel().getUserId().equals(box.getUserId())) {
			throwSecurityException();
		}
		
		if (scheduledCard.getQuality() == null) {
			Float ef = scheduledCard.getEf();
			Integer interval = scheduledCard.getInterval();
			Integer count = scheduledCard.getCount() + 1;
			Integer n = scheduledCard.getN();
			Integer quality = data.getModel().getScoredCardQuality();

			if (quality >= 3) {
				if (n == 0) {
					interval = 1;
				} else if (n == 1) {
					interval = 6;
				} else {
					interval = Math.round(interval * ef);
				}
				n++;
			} else {
				n = 0;
				interval = 1;
			}
			Integer calculatedInterval = interval;

			Float qFactor = (float) (5 - quality);
			ef = (ef + (0.1F - qFactor * (0.08F + qFactor * 0.02F)));
			if (ef < 1.3) {
				ef = 1.3F;
			}

			if (box.getMaxInterval() != null && interval > box.getMaxInterval()) {
				interval = box.getMaxInterval();
			}
			LocalDateTime newTime = data.getSystemTime().plusDays(interval);
			if (box.getMaxCardsPerDay() != null) {
				Integer cardCount = daoProvider.getScheduledCardDao().selectCardCountOfDay(readonlyHandle, box.getBoxId(),
						stripTime(newTime), stripTime(newTime.plusDays(1)));
				while (cardCount >= box.getMaxCardsPerDay()) {
					interval += 1;
					newTime = data.getSystemTime().plusDays(interval);
					cardCount = daoProvider.getScheduledCardDao().selectCardCountOfDay(readonlyHandle, box.getBoxId(),
							stripTime(newTime), stripTime(newTime.plusDays(1)));
				}
			}
			data.getModel().setNextScheduledCardScheduledCardId(data.getUuid());
			data.getModel().setNextScheduledCardEf(ef);
			data.getModel().setNextScheduledCardInterval(interval);
			data.getModel().setNextScheduledCardCount(count);
			data.getModel().setNextScheduledCardN(n);
			data.getModel().setNextScheduledCardScheduledDate(newTime);
			data.getModel().setNextScheduledCardLastQuality(quality);
			data.getModel().setNextScheduledCardCreatedDate(data.getSystemTime());

			data.getModel().setCardId(scheduledCard.getCardId());
			data.getModel().setBoxId(scheduledCard.getBoxId());

			data.getModel().setScoredCardScoredDate(data.getSystemTime());

			this.addScoreOutcome(data);
			ReinforceCardModel reinforceCard = daoProvider.getReinforceCardDao().selectByScheduledCardId(readonlyHandle,
					scheduledCard.getScheduledCardId());
			if (quality <= 3 && reinforceCard == null) {
				this.addReinforceOutcome(data);
				data.getModel().setReinforceCardId(data.getUuid());
				data.getModel().setReinforceCardCreatedDate(data.getSystemTime());
			}

			data.getModel().setIntervalDifference(interval - calculatedInterval); 
		} else {
			data.getModel().setIntervalDifference(0); 
		}


		data.getModel().setMaxCardsPerDay(box.getMaxCardsPerDay());
		data.getModel().setMaxInterval(box.getMaxInterval());

		return data;
	}

	private LocalDateTime stripTime(LocalDateTime value) {
		return value.withHour(0).withMinute(0).withSecond(0).withNano(0);
	}

}

/******* S.D.G. *******/
