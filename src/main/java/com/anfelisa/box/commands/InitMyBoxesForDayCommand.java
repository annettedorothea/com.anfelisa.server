/********************************************************************************
 * generated by de.acegen 1.2.1
 ********************************************************************************/




package com.anfelisa.box.commands;

import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.anfelisa.box.data.IInitMyBoxesDataData;
import com.anfelisa.box.data.PostponeCardsData;
import com.anfelisa.box.models.IInitBoxesModel;
import com.anfelisa.box.models.IPostponeCardsModel;
import com.anfelisa.box.models.IReinforceCardModel;

import de.acegen.CustomAppConfiguration;
import de.acegen.IDaoProvider;
import de.acegen.PersistenceHandle;
import de.acegen.ViewProvider;

public class InitMyBoxesForDayCommand extends AbstractInitMyBoxesForDayCommand {

	static final Logger LOG = LoggerFactory.getLogger(InitMyBoxesForDayCommand.class);

	public InitMyBoxesForDayCommand(IDaoProvider daoProvider, ViewProvider viewProvider, 
			CustomAppConfiguration appConfiguration) {
		super(daoProvider, viewProvider, appConfiguration);
	}

	@Override
	protected IInitMyBoxesDataData executeCommand(IInitMyBoxesDataData data, PersistenceHandle readonlyHandle) {
		List<IInitBoxesModel> boxList = this.daoProvider.getBoxDao().selectInitBoxesModelByUserId(readonlyHandle,
				data.getUserId(), data.getTodayAtMidnightInUTC());
		List<IPostponeCardsModel> postponeCards = new ArrayList<IPostponeCardsModel>();
		List<String> outdatedReinforceCardsIds = new ArrayList<String>();
		LocalDateTime today = data.getTodayAtMidnightInUTC();
		for (IInitBoxesModel box : boxList) {
			List<IReinforceCardModel> outdatedReinforceCards = this.daoProvider.getReinforceCardDao()
					.selectOutdatedReinforceCards(readonlyHandle, box.getBoxId(), today);
			for (IReinforceCardModel card : outdatedReinforceCards) {
				outdatedReinforceCardsIds.add(card.getScheduledCardId());
			}
			LocalDateTime min = box.getMinScheduledDate();
			if (min != null) {
				if (min.isBefore(today)) {
					int days = (int) ChronoUnit.DAYS.between(min, today) + 1;
					PostponeCardsData postponeData = new PostponeCardsData(days, box.getBoxId(),
							data.getUuid());
					postponeCards.add(postponeData);
				}
			}
		}
		data.setPostponeCards(postponeCards);
		data.setOutdatedReinforceCardsIds(outdatedReinforceCardsIds);
		this.addOkOutcome(data);
		return data;
	}

}




/******* S.D.G. *******/



