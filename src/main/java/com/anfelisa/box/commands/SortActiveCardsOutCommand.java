/********************************************************************************
 * generated by de.acegen 1.1.0
 ********************************************************************************/

package com.anfelisa.box.commands;

import de.acegen.ViewProvider;
import de.acegen.IDaoProvider;
import de.acegen.CustomAppConfiguration;
import de.acegen.PersistenceHandle;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.anfelisa.box.data.ISortCardsOutData;
import com.anfelisa.box.models.IBoxModel;
import com.anfelisa.box.models.IReinforceCardModel;
import com.anfelisa.box.models.IScheduledCardModel;
import com.anfelisa.card.models.ICardModel;

public class SortActiveCardsOutCommand extends AbstractSortActiveCardsOutCommand {

	static final Logger LOG = LoggerFactory.getLogger(SortActiveCardsOutCommand.class);

	public SortActiveCardsOutCommand(ISortCardsOutData commandData, IDaoProvider daoProvider, ViewProvider viewProvider,
			CustomAppConfiguration appConfiguration) {
		super(commandData, daoProvider, viewProvider, appConfiguration);
	}

	@Override
	protected void executeCommand(PersistenceHandle readonlyHandle) {
		if (commandData.getCardIds() == null || commandData.getCardIds().isEmpty()) {
			this.addNullOrEmptyOutcome();
		} else {
			this.commandData.setSortedOutScheduledCardIds(new ArrayList<String>());
			this.commandData.setSortedOutReinforceCardIds(new ArrayList<String>());
			for (String cardId : commandData.getCardIds()) {
				ICardModel card = daoProvider.getCardDao().selectByCardId(readonlyHandle, cardId);
				if (card == null) {
					throwIllegalArgumentException("cardDoesNotExist");
				}
				IBoxModel box = daoProvider.getBoxDao().selectByBoxId(readonlyHandle, commandData.getBoxId());
				if (box == null) {
					throwIllegalArgumentException("boxDoesNotExist");
				}
				if (box.getUserId().equals(commandData.getUserId())) {
					throwSecurityException();
				}
				IScheduledCardModel scheduledCard = daoProvider.getScheduledCardDao()
						.selectUnscoredByCardIdAndBoxId(readonlyHandle, cardId, box.getBoxId());
				if (scheduledCard != null) {
					this.commandData.getSortedOutScheduledCardIds().add(scheduledCard.getScheduledCardId());
					List<IReinforceCardModel> allOfCard = daoProvider.getReinforceCardDao()
							.selectAllOfCard(readonlyHandle, cardId);
					for (IReinforceCardModel reinforceCard : allOfCard) {
						this.commandData.getSortedOutReinforceCardIds().add(reinforceCard.getReinforceCardId());
					}
				}
			}
			this.addOkOutcome();
		}
	}

}

/******* S.D.G. *******/
