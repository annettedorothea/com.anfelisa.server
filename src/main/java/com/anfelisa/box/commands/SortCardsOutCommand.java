/********************************************************************************
 * generated by de.acegen 1.2.1
 ********************************************************************************/

package com.anfelisa.box.commands;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.anfelisa.box.models.BoxModel;
import com.anfelisa.box.models.ReinforceCardModel;
import com.anfelisa.box.models.ScheduledCardModel;
import com.anfelisa.box.models.SortCardsOutModel;
import com.anfelisa.card.models.CardModel;

import de.acegen.CustomAppConfiguration;
import de.acegen.Data;
import de.acegen.IDaoProvider;
import de.acegen.PersistenceHandle;
import de.acegen.ViewProvider;

public class SortCardsOutCommand extends AbstractSortCardsOutCommand {

	static final Logger LOG = LoggerFactory.getLogger(SortCardsOutCommand.class);

	public SortCardsOutCommand(IDaoProvider daoProvider, ViewProvider viewProvider,
			CustomAppConfiguration appConfiguration) {
		super(daoProvider, viewProvider, appConfiguration);
	}

	@Override
	protected Data<SortCardsOutModel> executeCommand(Data<SortCardsOutModel> data, PersistenceHandle readonlyHandle) {
		if (data.getModel().getCardIds() == null || data.getModel().getCardIds().isEmpty()) {
			this.addNullOrEmptyOutcome(data);
		} else {
			data.getModel().setSortedOutScheduledCardIds(new ArrayList<String>());
			data.getModel().setSortedOutReinforceCardIds(new ArrayList<String>());
			BoxModel box = daoProvider.getBoxDao().selectByBoxId(readonlyHandle, data.getModel().getBoxId());
			if (box == null) {
				throwIllegalArgumentException("boxDoesNotExist");
			}
			if (!box.getUserId().equals(data.getModel().getUserId())) {
				throwSecurityException();
			}
			for (String cardId : data.getModel().getCardIds()) {
				CardModel card = daoProvider.getCardDao().selectByCardId(readonlyHandle, cardId);
				if (card == null) {
					throwIllegalArgumentException("cardDoesNotExist");
				}
				ScheduledCardModel scheduledCard = daoProvider.getScheduledCardDao()
						.selectUnscoredByCardIdAndBoxId(readonlyHandle, cardId, box.getBoxId());
				if (scheduledCard != null) {
					data.getModel().getSortedOutScheduledCardIds().add(scheduledCard.getScheduledCardId());
					List<ReinforceCardModel> allOfCard = daoProvider.getReinforceCardDao()
							.selectAllOfCard(readonlyHandle, cardId);
					for (ReinforceCardModel reinforceCard : allOfCard) {
						data.getModel().getSortedOutReinforceCardIds().add(reinforceCard.getReinforceCardId());
					}
				}
			}
			this.addOkOutcome(data);
		}
		return data;
	}
}

/******* S.D.G. *******/
