/********************************************************************************
 * generated by de.acegen 1.2.1
 ********************************************************************************/

package com.anfelisa.box.commands;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.anfelisa.box.models.BoxModel;
import com.anfelisa.box.models.BoxUpdateModel;
import com.anfelisa.box.utils.LanguageValidator;
import com.anfelisa.category.models.UserAccessToCategoryModel;

import de.acegen.CustomAppConfiguration;
import de.acegen.Data;
import de.acegen.IDaoProvider;
import de.acegen.PersistenceHandle;
import de.acegen.ViewProvider;

public class UpdateBoxCommand extends AbstractUpdateBoxCommand {

	static final Logger LOG = LoggerFactory.getLogger(UpdateBoxCommand.class);

	public UpdateBoxCommand(IDaoProvider daoProvider, ViewProvider viewProvider,
			CustomAppConfiguration appConfiguration) {
		super(daoProvider, viewProvider, appConfiguration);
	}

	@Override
	protected Data<BoxUpdateModel> executeCommand(Data<BoxUpdateModel> data, PersistenceHandle readonlyHandle) {
		BoxModel box = daoProvider.getBoxDao().selectByBoxId(readonlyHandle, data.getModel().getBoxId());
		if (!box.getUserId().equals(data.getModel().getUserId())) {
			throwSecurityException();
		}
		UserAccessToCategoryModel access = daoProvider.getUserAccessToCategoryDao()
				.selectByCategoryIdAndUserId(readonlyHandle, box.getCategoryId(), data.getModel().getUserId());
		if (access == null) {
			throwSecurityException();
		}
		if (access.getEditable()) {
			this.addCanEditCategoryOutcome(data);
		}

		if (data.getModel().getMaxCardsPerDay() == 0) {
			throwIllegalArgumentException("maxCardsPerDayMustNotBeZero");
		}

		if (data.getModel().getDictionaryLookup() != null && data.getModel().getDictionaryLookup()) {
			if (!LanguageValidator.isLanguageValid(data.getModel().getGivenLanguage())) {
				throwIllegalArgumentException("givenLanguageIsInvalid");
			}
			if (!LanguageValidator.isLanguageValid(data.getModel().getWantedLanguage())) {
				throwIllegalArgumentException("wantedLanguageIsInvalid");
			}
		} else {
			data.getModel().setGivenLanguage(null);
			data.getModel().setWantedLanguage(null);
			data.getModel().setDictionaryLookup(false);
		}
		this.addOkOutcome(data);
		return data;
	}

}

/******* S.D.G. *******/
