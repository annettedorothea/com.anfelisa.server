/********************************************************************************
 * generated by de.acegen 1.2.1
 ********************************************************************************/

package com.anfelisa.box.commands;

import java.util.ArrayList;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.anfelisa.box.data.IScheduledCardsData;
import com.anfelisa.box.models.IBoxModel;
import com.anfelisa.box.models.IScheduledCardModel;
import com.anfelisa.box.models.ScheduledCardModel;
import com.anfelisa.card.models.ICardModel;

import de.acegen.CustomAppConfiguration;
import de.acegen.IDaoProvider;
import de.acegen.PersistenceHandle;
import de.acegen.ViewProvider;

public class ScheduleCardsCommand extends AbstractScheduleCardsCommand {

	static final Logger LOG = LoggerFactory.getLogger(ScheduleCardsCommand.class);

	public ScheduleCardsCommand(IDaoProvider daoProvider, ViewProvider viewProvider,
			CustomAppConfiguration appConfiguration) {
		super(daoProvider, viewProvider, appConfiguration);
	}

	@Override
	protected IScheduledCardsData executeCommand(IScheduledCardsData data, PersistenceHandle readonlyHandle) {
		if (data.getCardIds() == null || data.getCardIds().size() == 0) {
			this.addNullOrEmptyOutcome(data);
		} else {
			data.setExistingScheduledCardIds(new ArrayList<String>());
			data.setNewScheduledCards(new ArrayList<IScheduledCardModel>());
			data.setScheduledDate(data.getSystemTime());
			IBoxModel box = daoProvider.getBoxDao().selectByBoxId(readonlyHandle, data.getBoxId());
			if (box == null) {
				throwIllegalArgumentException("boxDoesNotExist");
			}
			if (!box.getUserId().equals(data.getUserId())) {
				throwSecurityException();
			}
			for (String cardId : data.getCardIds()) {
				ICardModel card = daoProvider.getCardDao().selectByCardId(readonlyHandle, cardId);
				if (card == null) {
					throwIllegalArgumentException("cardDoesNotExist");
				}
				IScheduledCardModel scheduledCard = daoProvider.getScheduledCardDao()
						.selectUnscoredByCardIdAndBoxId(readonlyHandle, cardId, box.getBoxId());
				ScheduledCardModel newScheduledCard;
				if (scheduledCard == null) {
					newScheduledCard = new ScheduledCardModel(
							combineUuids(cardId, data.getUuid()), cardId, box.getBoxId(),
							data.getSystemTime(), 2.5F, 1, 1, 0, data.getSystemTime(), null,
							null, null);
					data.getNewScheduledCards().add(newScheduledCard);
				} else {
					data.getExistingScheduledCardIds().add(scheduledCard.getScheduledCardId());
				}
			}
			this.addOkOutcome(data);
		}
		return data;
	}

	private String combineUuids(String uuid1, String uuid2) {
		return (uuid1.length() >= 12 ? uuid1.substring(0, 12) : uuid1) + "-"
				+ (uuid2.length() >= 12 ? uuid2.substring(0, 12) : uuid2);
	}

}

/******* S.D.G. *******/
