/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/

package com.anfelisa.category.commands;

import de.acegen.ViewProvider;
import de.acegen.IDaoProvider;
import de.acegen.CustomAppConfiguration;
import de.acegen.PersistenceHandle;
import de.acegen.Data;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.anfelisa.category.models.CategoryModel;
import com.anfelisa.category.models.UserAccessToCategoryModel;

public class ToggleCategoryOrderCommand extends AbstractToggleCategoryOrderCommand {

	static final Logger LOG = LoggerFactory.getLogger(ToggleCategoryOrderCommand.class);

	public ToggleCategoryOrderCommand(IDaoProvider daoProvider, ViewProvider viewProvider,
			CustomAppConfiguration appConfiguration) {
		super(daoProvider, viewProvider, appConfiguration);
	}

	@Override
	protected Data<com.anfelisa.category.models.ToggleCategoryOrderModel> executeCommand(
			Data<com.anfelisa.category.models.ToggleCategoryOrderModel> data, PersistenceHandle readonlyHandle) {
		CategoryModel category1 = daoProvider.getCategoryDao().selectByCategoryId(readonlyHandle,
				data.getModel().getCategoryId());
		if (category1 == null) {
			throwIllegalArgumentException("categoryDoesNotExist");
		}
		if (category1.getRootCategoryId().equals(category1.getCategoryId())) {
			this.addNoMoveOutcome(data);
			return data;
		}
		UserAccessToCategoryModel accessToRootCategory = this.daoProvider.getUserAccessToCategoryDao()
				.hasUserAccessTo(readonlyHandle, category1.getRootCategoryId(), data.getModel().getUserId());
		if (accessToRootCategory == null || !accessToRootCategory.getEditable()) {
			throwSecurityException();
		}

		CategoryModel category2 = daoProvider.getCategoryDao().selectByParentCategoryIdAndIndex(readonlyHandle,
				category1.getParentCategoryId(), category1.getCategoryIndex() + (data.getModel().getDown() ? 1 : -1));
		if (category2 == null) {
			this.addNoMoveOutcome(data);
			return data;
		}

		int index1 = category1.getCategoryIndex();
		int index2 = category2.getCategoryIndex();

		category1.setCategoryIndex(index2);
		category2.setCategoryIndex(index1);

		data.getModel().setUpdatedCategory1(category1);
		data.getModel().setUpdatedCategory2(category2);

		this.addOkOutcome(data);
		return data;
	}

}

/******* S.D.G. *******/
