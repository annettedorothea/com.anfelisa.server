/********************************************************************************
 * generated by de.acegen 1.2.1
 ********************************************************************************/




package com.anfelisa.category.commands;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.anfelisa.category.models.CategoryModel;
import com.anfelisa.category.models.CategoryMoveModel;
import com.anfelisa.category.models.UserAccessToCategoryModel;

import de.acegen.CustomAppConfiguration;
import de.acegen.Data;
import de.acegen.IDaoProvider;
import de.acegen.PersistenceHandle;
import de.acegen.ViewProvider;

public class MoveCategoryCommand extends AbstractMoveCategoryCommand {

	static final Logger LOG = LoggerFactory.getLogger(MoveCategoryCommand.class);

	public MoveCategoryCommand(IDaoProvider daoProvider, ViewProvider viewProvider, 
			CustomAppConfiguration appConfiguration) {
		super(daoProvider, viewProvider, appConfiguration);
	}

	@Override
	protected Data<CategoryMoveModel> executeCommand(Data<CategoryMoveModel> data, PersistenceHandle readonlyHandle) {
		CategoryModel movedCategory = this.daoProvider.getCategoryDao().selectByCategoryId(readonlyHandle,
				data.getModel().getMovedCategoryId());

		CategoryModel targetCategory = this.daoProvider.getCategoryDao().selectByCategoryId(readonlyHandle,
				data.getModel().getTargetCategoryId());

		if (movedCategory == null || targetCategory == null) {
			throwIllegalArgumentException("movedCategoriesMustNotBeNull");
		}

		UserAccessToCategoryModel accessToMovedCategory = this.daoProvider.getUserAccessToCategoryDao()
				.hasUserAccessTo(readonlyHandle, data.getModel().getMovedCategoryId(), data.getModel().getUserId());
		if (accessToMovedCategory == null || !accessToMovedCategory.getEditable()) {
			throwSecurityException();
		}
		UserAccessToCategoryModel accessToTargetCategory = this.daoProvider.getUserAccessToCategoryDao()
				.hasUserAccessTo(readonlyHandle, data.getModel().getTargetCategoryId(), data.getModel().getUserId());
		if (accessToTargetCategory == null || !accessToTargetCategory.getEditable()) {
			throwSecurityException();
		}

		if (!movedCategory.getRootCategoryId().equals(targetCategory.getRootCategoryId())) {
			throwIllegalArgumentException("categoriesMustBeInSameRootCategory");
		}
		
		if (targetCategory.getCategoryId().equals(movedCategory.getCategoryId())) {
			throwIllegalArgumentException("cannotMoveCategoryToItself");
		}

		if (isChildOf(movedCategory, targetCategory, readonlyHandle)) {
			throwIllegalArgumentException("cannotMoveCategoryToOneOfItsChildren");
		}
		
		if (targetCategory.getCategoryId().equals(movedCategory.getParentCategoryId())) {
			this.addNoMoveOutcome(data);
		} else {
			data.getModel().setCategoryIndexWhereRemoved(movedCategory.getCategoryIndex());
			data.getModel().setParentCategoryIdWhereRemoved(movedCategory.getParentCategoryId());

			Integer categoryIndexInTargetCategory = this.daoProvider.getCategoryDao()
					.selectMaxIndexInCategory(readonlyHandle, data.getModel().getTargetCategoryId());
			if (categoryIndexInTargetCategory == null) {
				categoryIndexInTargetCategory = 1;
			} else {
				categoryIndexInTargetCategory++;
			}
			movedCategory.setCategoryIndex(categoryIndexInTargetCategory);
			movedCategory.setParentCategoryId(data.getModel().getTargetCategoryId());

			data.getModel().setMovedCategory(movedCategory);

			this.addOkOutcome(data);
		}
		return data;
	}

	private boolean isChildOf(CategoryModel parent, CategoryModel child, PersistenceHandle readonlyHandle) {
		if (child.getParentCategoryId() == null) {
			return false;
		}
		if (child.getParentCategoryId().equals(parent.getCategoryId())) {
			return true;
		}
		return isChildOf(parent,
				this.daoProvider.getCategoryDao().selectByCategoryId(readonlyHandle, child.getParentCategoryId()),
				readonlyHandle);
	}

}




/******* S.D.G. *******/



