/********************************************************************************
 * generated by de.acegen 1.2.1
 ********************************************************************************/




package com.anfelisa.category.commands;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.anfelisa.box.models.BoxModel;
import com.anfelisa.category.models.CategoryModel;
import com.anfelisa.category.models.UserAccessToCategoryModel;
import com.anfelisa.category.models.UserToCategoryInvitationModel;
import com.anfelisa.user.models.UserModel;

import de.acegen.CustomAppConfiguration;
import de.acegen.Data;
import de.acegen.IDaoProvider;
import de.acegen.PersistenceHandle;
import de.acegen.ViewProvider;

public class InviteUserToCategoryCommand extends AbstractInviteUserToCategoryCommand {

	static final Logger LOG = LoggerFactory.getLogger(InviteUserToCategoryCommand.class);

	public InviteUserToCategoryCommand(IDaoProvider daoProvider, ViewProvider viewProvider, 
			CustomAppConfiguration appConfiguration) {
		super(daoProvider, viewProvider, appConfiguration);
	}

	@Override
	protected Data<UserToCategoryInvitationModel> executeCommand(Data<UserToCategoryInvitationModel> data, PersistenceHandle readonlyHandle) {
		if (data.getModel().getEditable() == null) {
			data.getModel().setEditable(false);
		}
		CategoryModel category = daoProvider.getCategoryDao().selectByCategoryId(readonlyHandle, 
				data.getModel().getCategoryId());
		if (category == null) {
			throwIllegalArgumentException("categoryDoesNotExist");
		}

		UserModel invitedUser = this.daoProvider.getUserDao().selectByUsername(readonlyHandle, data.getModel().getInvitedUsername());
		if (invitedUser == null) {
			this.throwIllegalArgumentException("userDoesNotExist");
		} else {
			data.getModel().setInvitedUserId(invitedUser.getUserId());
		}
		
		if (invitedUser.getUserId().equals(data.getModel().getUserId())) {
			this.throwIllegalArgumentException("userCannotInviteHimself");
		}
		
		UserAccessToCategoryModel access = this.daoProvider.getUserAccessToCategoryDao().selectByCategoryIdAndUserId(readonlyHandle, data.getModel().getCategoryId(), data.getModel().getUserId());
		if (access == null || !access.getEditable()) {
			throwSecurityException();
		}
		
		BoxModel originalBox = this.daoProvider.getBoxDao().selectByCategoryIdAndUserId(readonlyHandle, data.getModel().getCategoryId(), data.getModel().getUserId(), false);
		if (originalBox == null) {
			this.throwIllegalArgumentException("original box is null");
		}
		
		UserAccessToCategoryModel alreadyExistingAccess = this.daoProvider.getUserAccessToCategoryDao().selectByCategoryIdAndUserId(readonlyHandle, data.getModel().getCategoryId(), invitedUser.getUserId());
		if (alreadyExistingAccess == null) {
			this.addInsertOutcome(data);
			BoxModel boxForInvitedUser = new BoxModel();
			boxForInvitedUser.setBoxId(data.getUuid());
			boxForInvitedUser.setCategoryId(data.getModel().getCategoryId());
			boxForInvitedUser.setMaxCardsPerDay(originalBox.getMaxCardsPerDay());
			boxForInvitedUser.setMaxInterval(originalBox.getMaxInterval());
			boxForInvitedUser.setUserId(invitedUser.getUserId());
			boxForInvitedUser.setArchived(false);
			boxForInvitedUser.setReverse(false);
			data.getModel().setBoxForInvitedUser(boxForInvitedUser);
		} else {
			this.addUpdateOutcome(data);
		}
		
		return data;
	}

}




/******* S.D.G. *******/



