/********************************************************************************
 * generated by de.acegen 1.2.1
 ********************************************************************************/




package com.anfelisa.category.actions;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.anfelisa.box.models.BoxModel;
import com.anfelisa.category.models.CategoryTreeItemModel;
import com.anfelisa.category.models.CategoryTreeModel;
import com.anfelisa.category.models.UserAccessToCategoryModel;

import de.acegen.CustomAppConfiguration;
import de.acegen.Data;
import de.acegen.IDaoProvider;
import de.acegen.PersistenceConnection;
import de.acegen.PersistenceHandle;
import de.acegen.ViewProvider;

public class GetCategoryTreeAction extends AbstractGetCategoryTreeAction {

	static final Logger LOG = LoggerFactory.getLogger(GetCategoryTreeAction.class);

	public GetCategoryTreeAction(PersistenceConnection persistenceConnection, CustomAppConfiguration appConfiguration, IDaoProvider daoProvider, 
			ViewProvider viewProvider) {
		super(persistenceConnection, appConfiguration, daoProvider, viewProvider);
	}


	@Override
	protected Data<CategoryTreeModel> loadDataForGetRequest(Data<CategoryTreeModel> data, PersistenceHandle readonlyHandle) {
		UserAccessToCategoryModel access = this.daoProvider.getUserAccessToCategoryDao()
				.selectByCategoryIdAndUserId(readonlyHandle, data.getModel().getRootCategoryId(), data.getModel().getUserId());
		if (access == null) {
			throwSecurityException();
		}
		CategoryTreeItemModel rootCategory = daoProvider.getCategoryDao().selectRoot(readonlyHandle,
				data.getModel().getRootCategoryId(), data.getModel().getUserId(), data.getModel().getReverse());
		loadChildren(data.getModel(), rootCategory, rootCategory.getCategoryId(), readonlyHandle);

		BoxModel box = daoProvider.getBoxDao().selectByCategoryIdAndUserId(readonlyHandle,
				rootCategory.getCategoryId(), data.getModel().getUserId(), data.getModel().getReverse());
		if (box == null) {
			throwIllegalArgumentException("boxNotFound");
		}
		data.getModel().setBoxId(box.getBoxId());

		if (data.getModel().getFilterNonScheduled() != null && data.getModel().getFilterNonScheduled()) {
			initNonScheduledCount(rootCategory, box.getBoxId(), data.getModel().getPriority(), readonlyHandle);
		}
		data.getModel().setRootCategory(rootCategory);

		if (box.getReverse()) {
			data.getModel().setReverseBoxExists(true);
		} else {
			BoxModel reverseBox = daoProvider.getBoxDao().selectByCategoryIdAndUserId(readonlyHandle,
					rootCategory.getCategoryId(), data.getModel().getUserId(), true);
			data.getModel().setReverseBoxExists(reverseBox != null);
		}
		return data;
	}

	private void loadChildren(CategoryTreeModel data, CategoryTreeItemModel categoryItemModel, String rootCategoryId,
			PersistenceHandle readonlyHandle) {
		List<CategoryTreeItemModel> children = daoProvider.getCategoryDao().selectAllChildrenForTree(readonlyHandle,
				categoryItemModel.getCategoryId(), data.getUserId(), data.getReverse());
		categoryItemModel.setChildCategories(children);
		for (CategoryTreeItemModel child : children) {
			loadChildren(data, child, rootCategoryId, readonlyHandle);
		}
	}

	private void initNonScheduledCount(CategoryTreeItemModel categoryItemModel, String boxId, Integer priority,
			PersistenceHandle readonlyHandle) {
		Integer nonScheduledCardCount = daoProvider.getCardDao().selectNonScheduledCardCountOfCategory(readonlyHandle,
				categoryItemModel.getCategoryId(), boxId, priority);
		for (CategoryTreeItemModel child : categoryItemModel.getChildCategories()) {
			initNonScheduledCount(child, boxId, priority, readonlyHandle);
			nonScheduledCardCount += child.getNonScheduledCount();
		}
		categoryItemModel.setNonScheduledCount(nonScheduledCardCount);
	}
	

}



/******* S.D.G. *******/



