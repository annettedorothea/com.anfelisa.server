/********************************************************************************
 * generated by de.acegen 1.2.1
 ********************************************************************************/




package com.anfelisa.category.actions;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.anfelisa.box.models.IBoxModel;
import com.anfelisa.category.data.ICategoryTreeData;
import com.anfelisa.category.models.ICategoryTreeItemModel;
import com.anfelisa.category.models.IUserAccessToCategoryModel;

import de.acegen.CustomAppConfiguration;
import de.acegen.IDaoProvider;
import de.acegen.PersistenceConnection;
import de.acegen.PersistenceHandle;
import de.acegen.ViewProvider;

public class GetCategoryTreeAction extends AbstractGetCategoryTreeAction {

	static final Logger LOG = LoggerFactory.getLogger(GetCategoryTreeAction.class);

	public GetCategoryTreeAction(PersistenceConnection persistenceConnection, CustomAppConfiguration appConfiguration, IDaoProvider daoProvider, 
			ViewProvider viewProvider) {
		super(persistenceConnection, appConfiguration, daoProvider, viewProvider);
	}


	@Override
	protected ICategoryTreeData loadDataForGetRequest(ICategoryTreeData data, PersistenceHandle readonlyHandle) {
		IUserAccessToCategoryModel access = this.daoProvider.getUserAccessToCategoryDao()
				.selectByCategoryIdAndUserId(readonlyHandle, data.getRootCategoryId(), data.getUserId());
		if (access == null) {
			throwSecurityException();
		}
		ICategoryTreeItemModel rootCategory = daoProvider.getCategoryDao().selectRoot(readonlyHandle,
				data.getRootCategoryId(), data.getUserId(), data.getReverse());
		loadChildren(data, rootCategory, rootCategory.getCategoryId(), readonlyHandle);

		IBoxModel box = daoProvider.getBoxDao().selectByCategoryIdAndUserId(readonlyHandle,
				rootCategory.getCategoryId(), data.getUserId(), data.getReverse());
		if (box == null) {
			throwIllegalArgumentException("boxNotFound");
		}
		data.setBoxId(box.getBoxId());

		if (data.getFilterNonScheduled() != null && data.getFilterNonScheduled()) {
			initNonScheduledCount(rootCategory, box.getBoxId(), data.getPriority(), readonlyHandle);
		}
		data.setRootCategory(rootCategory);

		if (box.getReverse()) {
			data.setReverseBoxExists(true);
		} else {
			IBoxModel reverseBox = daoProvider.getBoxDao().selectByCategoryIdAndUserId(readonlyHandle,
					rootCategory.getCategoryId(), data.getUserId(), true);
			data.setReverseBoxExists(reverseBox != null);
		}
		return data;
	}

	private void loadChildren(ICategoryTreeData data, ICategoryTreeItemModel categoryItemModel, String rootCategoryId,
			PersistenceHandle readonlyHandle) {
		List<ICategoryTreeItemModel> children = daoProvider.getCategoryDao().selectAllChildrenForTree(readonlyHandle,
				categoryItemModel.getCategoryId(), data.getUserId(), data.getReverse());
		categoryItemModel.setChildCategories(children);
		for (ICategoryTreeItemModel child : children) {
			loadChildren(data, child, rootCategoryId, readonlyHandle);
		}
	}

	private void initNonScheduledCount(ICategoryTreeItemModel categoryItemModel, String boxId, Integer priority,
			PersistenceHandle readonlyHandle) {
		Integer nonScheduledCardCount = daoProvider.getCardDao().selectNonScheduledCardCountOfCategory(readonlyHandle,
				categoryItemModel.getCategoryId(), boxId, priority);
		for (ICategoryTreeItemModel child : categoryItemModel.getChildCategories()) {
			initNonScheduledCount(child, boxId, priority, readonlyHandle);
			nonScheduledCardCount += child.getNonScheduledCount();
		}
		categoryItemModel.setNonScheduledCount(nonScheduledCardCount);
	}
	

}



/******* S.D.G. *******/



