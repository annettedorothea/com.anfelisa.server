/********************************************************************************
 * generated by de.acegen 1.2.1
 ********************************************************************************/




package de.acegen;


import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;

import org.jdbi.v3.core.mapper.RowMapper;


public abstract class AbstractMapper<T> implements RowMapper<T> {
	
	protected Integer mapToInteger(ResultSet r, String key) throws SQLException {
		return r.getObject(key) != null ? r.getInt(key) : null;
	}
	
	protected Long mapToLong(ResultSet r, String key) throws SQLException {
		return r.getObject(key) != null ? r.getLong(key) : null;
	}
	
	protected String mapToString(ResultSet r, String key) throws SQLException {
		return r.getString(key);
	}
	
	protected Float mapToFloat(ResultSet r, String key) throws SQLException {
		return r.getObject(key) != null ? r.getFloat(key) : null;
	}
	
	protected Boolean mapToBoolean(ResultSet r, String key) throws SQLException {
		return r.getObject(key) != null ? r.getBoolean(key) : null;
		// SQLite: return r.getObject(key) != null ? (r.getInt(key) == 1 ? true : false) : null;
	}
	
	protected LocalDateTime mapToDateTime(ResultSet r, String key) throws SQLException {
		return r.getTimestamp(key) != null ? r.getTimestamp(key).toLocalDateTime() : null;
		// SQLite: return r.getString(key) != null ? Instant.ofEpochMilli(Long.parseLong(r.getString(key))).atZone(ZoneId.systemDefault()).toLocalDateTime() : null;
	}
}



/******* S.D.G. *******/



