/********************************************************************************
 * generated by de.acegen 1.2.1
 ********************************************************************************/




package de.acegen;

import java.util.List;

public abstract class Event<T extends IDataContainer> implements IEvent<T> {

	private String eventName;
	private IDaoProvider daoProvider;
	private ViewProvider viewProvider;
	private CustomAppConfiguration appConfiguration;

	public Event(String eventName, IDaoProvider daoProvider, ViewProvider viewProvider, CustomAppConfiguration appConfiguration) {
		super();
		this.eventName = eventName;
		this.daoProvider = daoProvider;
		this.viewProvider = viewProvider;
		this.appConfiguration = appConfiguration;
	}

	public void notifyListeners(T data, PersistenceHandle handle) {
		List<EventConsumer> consumerList = viewProvider.getConsumerForEvent(eventName);
		if (consumerList != null) {
			for (EventConsumer consumer : consumerList) {
				consumer.consumeEvent(data, handle);
			}
		}
	}

	public void notifyAfterCommitListeners(T data, PersistenceHandle handle) {
		List<EventConsumer> consumerList = viewProvider.getAfterCommitConsumerForEvent(eventName);
		if (consumerList != null) {
			for (EventConsumer consumer : consumerList) {
				consumer.consumeEvent(data, handle);
			}
		}
	}

	public String getEventName() {
		return eventName;
	}

	public void publish(T data, PersistenceHandle handle, PersistenceHandle timelineHandle) {
		if (appConfiguration.getConfig().writeTimeline()) {
			daoProvider.getAceDao().addEventToTimeline(this.getEventName(), data, timelineHandle);
		}
		this.notifyListeners(data, handle);
	}

	public void publishAfterCommit(T data, PersistenceHandle handle, PersistenceHandle timelineHandle) {
		if (appConfiguration.getConfig().writeTimeline()) {
			daoProvider.getAceDao().addEventToTimeline(this.getEventName(), data, timelineHandle);
		}
		this.notifyAfterCommitListeners(data, handle);
	}

}



/******* S.D.G. *******/



