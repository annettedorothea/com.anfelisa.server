/********************************************************************************
 * generated by de.acegen 1.5.4
 ********************************************************************************/




package de.acegen;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.jdbi.v3.core.mapper.RowMapper;
import org.jdbi.v3.core.statement.Query;
import org.jdbi.v3.core.statement.Update;
		
@SuppressWarnings("all")
public class AbstractDao {
	protected void update(PersistenceHandle handle, String sql, Map<String, Object> params) {
		Update statement = handle.getHandle().createUpdate(sql);
		for (String paramName : params.keySet()) {
			Object value = params.get(paramName);
			if (value instanceof List) {
				statement.bindList(paramName, (List)value);
			} else {
				statement.bind(paramName, value);
			}
		}
		statement.execute();
	}

	protected <T> T selectOne(PersistenceHandle handle, String sql, Map<String, Object> params, RowMapper<T> mapper) {
		Query query = handle.getHandle().createQuery(sql);
		for (String paramName : params.keySet()) {
			query.bind(paramName, params.get(paramName));
		}
		Optional<T> optional = query.map(mapper).findFirst();
		return optional.isPresent() ? optional.get() : null;
	}
	
	protected <T> List<T> selectList(PersistenceHandle handle, String sql, Map<String, Object> params, RowMapper<T> mapper) {
		Query query = handle.getHandle().createQuery(sql);
		for (String paramName : params.keySet()) {
			query.bind(paramName, params.get(paramName));
		}
		return query.map(mapper).list();
	}

}



/******* S.D.G. *******/



