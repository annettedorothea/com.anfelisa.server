/********************************************************************************
 * generated by de.acegen 1.2.1
 ********************************************************************************/




package de.acegen;

import java.time.LocalDateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public abstract class WriteAction<T extends IDataContainer> extends Action<T> {

	static final Logger LOG = LoggerFactory.getLogger(WriteAction.class);
	
	private PersistenceConnection persistenceConnection;
	protected CustomAppConfiguration appConfiguration;
	protected IDaoProvider daoProvider;
	protected ViewProvider viewProvider;
	
	public WriteAction(String actionName, PersistenceConnection persistenceConnection, CustomAppConfiguration appConfiguration, 
			IDaoProvider daoProvider, ViewProvider viewProvider) {
		super(actionName);
		this.persistenceConnection = persistenceConnection;
		this.appConfiguration = appConfiguration;
		this.daoProvider = daoProvider;
		this.viewProvider = viewProvider;
	}

	protected abstract T initActionDataFromNonDeterministicDataProvider(T data);

	protected abstract ICommand<T> getCommand();

	public T apply(T data) {
		DatabaseHandle databaseHandle = new DatabaseHandle(persistenceConnection.getJdbi(), appConfiguration);
		databaseHandle.beginTransaction();
		try {
			if (!daoProvider.getAceDao().checkUuid(data.getUuid())) {
				LOG.warn("duplicate request {} {} ", actionName, data.getUuid());
				databaseHandle.rollbackTransaction();
				return data;
			}

			if (appConfiguration.getConfig().writeTimeline()) {
				daoProvider.getAceDao().addActionToTimeline(this.getActionName(), data, databaseHandle.getTimelineHandle());
			}

			data.setSystemTime(LocalDateTime.now());
			data = this.initActionData(data);
			if (Config.DEV.equals(appConfiguration.getConfig().getMode())) {
				data = initActionDataFromNonDeterministicDataProvider(data);
			}
			
			ICommand<T> command = this.getCommand();
			data = command.execute(data, databaseHandle.getReadonlyHandle(), databaseHandle.getTimelineHandle());
			command.publishEvents(data, databaseHandle.getHandle(), databaseHandle.getTimelineHandle());
			databaseHandle.commitTransaction();
			command.publishAfterCommitEvents(data, databaseHandle.getHandle(), databaseHandle.getTimelineHandle());
			return data;
		} catch (IllegalArgumentException x) {
			LOG.error(actionName + " IllegalArgumentException {} ", x.getMessage());
			try {
				if (appConfiguration.getConfig().writeError()) {
					daoProvider.getAceDao().addExceptionToTimeline(data.getUuid(), x, databaseHandle.getTimelineHandle());
				}
				databaseHandle.rollbackTransaction();
			} catch (Exception ex) {
				LOG.error(actionName + ": failed to rollback or to save or report exception " + ex.getMessage());
			}
			throw x;
		} catch (SecurityException x) {
			LOG.error(actionName + " SecurityException");
			try {
				if (appConfiguration.getConfig().writeError()) {
					daoProvider.getAceDao().addExceptionToTimeline(data.getUuid(), x, databaseHandle.getTimelineHandle());
				}
				databaseHandle.rollbackTransaction();
			} catch (Exception ex) {
				LOG.error(actionName + ": failed to rollback or to save or report exception " + ex.getMessage());
			}
			throw x;
		} catch (Exception x) {
			LOG.error(actionName + " Exception {} ", x.getMessage());
			try {
				if (appConfiguration.getConfig().writeError()) {
					daoProvider.getAceDao().addExceptionToTimeline(data.getUuid(), x, databaseHandle.getTimelineHandle());
				}
				databaseHandle.rollbackTransaction();
			} catch (Exception ex) {
				LOG.error(actionName + ": failed to rollback or to save or report exception " + ex.getMessage());
			}
			throw x;
		} finally {
			databaseHandle.close();
		}
	}

}




/******* S.D.G. *******/



