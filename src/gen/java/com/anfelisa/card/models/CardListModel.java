/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/




package com.anfelisa.card.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

import java.util.List;
import java.util.ArrayList;

import de.acegen.DateTimeToStringConverter;
import de.acegen.StringToDateTimeConverter;
import de.acegen.AbstractModel;

@SuppressWarnings("all")
public class CardListModel extends AbstractModel {

	private String userId;

	private java.util.List<com.anfelisa.card.models.CardWithInfoModel> cardList;

	private String categoryId;

	private Boolean filterNonScheduled;

	private Integer priority;

	private Boolean reverse;

	
	private Boolean frozen = false;

	public CardListModel() {
	}

	public CardListModel(
		@JsonProperty("userId") String userId,
		@JsonProperty("cardList") java.util.List<com.anfelisa.card.models.CardWithInfoModel> cardList,
		@JsonProperty("categoryId") String categoryId,
		@JsonProperty("filterNonScheduled") Boolean filterNonScheduled,
		@JsonProperty("priority") Integer priority,
		@JsonProperty("reverse") Boolean reverse
	) {
		this.userId = userId;
		this.cardList = cardList;
		this.categoryId = categoryId;
		this.filterNonScheduled = filterNonScheduled;
		this.priority = priority;
		this.reverse = reverse;
	}

	@JsonProperty
	public String getUserId() {
		return this.userId;
	}
	
	@JsonProperty
	public void setUserId(String userId) {
		if (this.frozen) {
			throw new RuntimeException("userId is frozen");
		}
		this.userId = userId;
	}
	
	@JsonProperty
	public java.util.List<com.anfelisa.card.models.CardWithInfoModel> getCardList() {
		return this.cardList;
	}
	
	@JsonProperty
	public void setCardList(java.util.List<com.anfelisa.card.models.CardWithInfoModel> cardList) {
		if (this.frozen) {
			throw new RuntimeException("cardList is frozen");
		}
		this.cardList = cardList;
	}
	
	@JsonProperty
	public String getCategoryId() {
		return this.categoryId;
	}
	
	@JsonProperty
	public void setCategoryId(String categoryId) {
		if (this.frozen) {
			throw new RuntimeException("categoryId is frozen");
		}
		this.categoryId = categoryId;
	}
	
	@JsonProperty
	public Boolean getFilterNonScheduled() {
		return this.filterNonScheduled;
	}
	
	@JsonProperty
	public void setFilterNonScheduled(Boolean filterNonScheduled) {
		if (this.frozen) {
			throw new RuntimeException("filterNonScheduled is frozen");
		}
		this.filterNonScheduled = filterNonScheduled;
	}
	
	@JsonProperty
	public Integer getPriority() {
		return this.priority;
	}
	
	@JsonProperty
	public void setPriority(Integer priority) {
		if (this.frozen) {
			throw new RuntimeException("priority is frozen");
		}
		this.priority = priority;
	}
	
	@JsonProperty
	public Boolean getReverse() {
		return this.reverse;
	}
	
	@JsonProperty
	public void setReverse(Boolean reverse) {
		if (this.frozen) {
			throw new RuntimeException("reverse is frozen");
		}
		this.reverse = reverse;
	}
	
	
	
	@Override
	public void freeze() {
		this.frozen = true;
		if (this.cardList != null) {
			for ( int i = 0; i < cardList.size(); i++ ) {
				cardList.get(i).freeze();
			}
		}
	}

	public com.anfelisa.card.models.CardListModel deepCopy() {
		com.anfelisa.card.models.CardListModel copy = new CardListModel();
		copy.setUserId(this.getUserId());
		List<com.anfelisa.card.models.CardWithInfoModel> cardListCopy = new ArrayList<com.anfelisa.card.models.CardWithInfoModel>();
		if (this.getCardList() != null) {
			for(com.anfelisa.card.models.CardWithInfoModel item: this.getCardList()) {
				cardListCopy.add(item.deepCopy());
			}
		}
		copy.setCardList(cardListCopy);
		copy.setCategoryId(this.getCategoryId());
		copy.setFilterNonScheduled(this.getFilterNonScheduled());
		copy.setPriority(this.getPriority());
		copy.setReverse(this.getReverse());
		return copy;
	}
	
	public static CardListModel generateTestData() {
		java.util.Random random = new java.util.Random();
		int n;
		CardListModel testData = new CardListModel();
		testData.setUserId(randomString(random));
		java.util.List<com.anfelisa.card.models.CardWithInfoModel> cardListList = new java.util.ArrayList<com.anfelisa.card.models.CardWithInfoModel>();
		n = random.nextInt(20) + 1;
		for ( int i = 0; i < n; i++ ) {
			cardListList.add(com.anfelisa.card.models.CardWithInfoModel.generateTestData());
		}
		testData.setCardList(cardListList);
		testData.setCategoryId(randomString(random));
		testData.setFilterNonScheduled(random.nextBoolean());
		testData.setPriority(random.nextInt(50));
		testData.setReverse(random.nextBoolean());
		return testData;
	}
	
	private static String randomString(java.util.Random random) {
		String chars = "aaaaaaabcdeeeeeeeffffghiiiiiiijkllllllmmmmnnnnnnnooooooooopqrstttuuuuuuuvxyz";
		int n = random.nextInt(20) + 5;
		StringBuilder sb = new StringBuilder(n);
		for (int i = 0; i < n; i++) {
			int index = random.nextInt(chars.length());
			sb.append(chars.charAt(index));
		}
		String string  = sb.toString(); 
		return string.substring(0,1).toUpperCase() + string.substring(1).toLowerCase();
	}

}



/******* S.D.G. *******/



