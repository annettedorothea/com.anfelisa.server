/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/




package com.anfelisa.user.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

import java.util.List;
import java.util.ArrayList;

import de.acegen.DateTimeToStringConverter;
import de.acegen.StringToDateTimeConverter;
import de.acegen.AbstractModel;

@SuppressWarnings("all")
public class DeleteUserModel extends AbstractModel {

	private String usernameToBeDeleted;

	private String username;

	private String userId;

	private String role;

	private java.util.List<String> rootCategoryIds;

	
	private Boolean frozen = false;

	public DeleteUserModel() {
	}

	public DeleteUserModel(
		@JsonProperty("usernameToBeDeleted") String usernameToBeDeleted,
		@JsonProperty("username") String username,
		@JsonProperty("userId") String userId,
		@JsonProperty("role") String role,
		@JsonProperty("rootCategoryIds") java.util.List<String> rootCategoryIds
	) {
		this.usernameToBeDeleted = usernameToBeDeleted;
		this.username = username;
		this.userId = userId;
		this.role = role;
		this.rootCategoryIds = rootCategoryIds;
	}

	@JsonProperty
	public String getUsernameToBeDeleted() {
		return this.usernameToBeDeleted;
	}
	
	@JsonProperty
	public void setUsernameToBeDeleted(String usernameToBeDeleted) {
		if (this.frozen) {
			throw new RuntimeException("usernameToBeDeleted is frozen");
		}
		this.usernameToBeDeleted = usernameToBeDeleted;
	}
	
	@JsonProperty
	public String getUsername() {
		return this.username;
	}
	
	@JsonProperty
	public void setUsername(String username) {
		if (this.frozen) {
			throw new RuntimeException("username is frozen");
		}
		this.username = username;
	}
	
	@JsonProperty
	public String getUserId() {
		return this.userId;
	}
	
	@JsonProperty
	public void setUserId(String userId) {
		if (this.frozen) {
			throw new RuntimeException("userId is frozen");
		}
		this.userId = userId;
	}
	
	@JsonProperty
	public String getRole() {
		return this.role;
	}
	
	@JsonProperty
	public void setRole(String role) {
		if (this.frozen) {
			throw new RuntimeException("role is frozen");
		}
		this.role = role;
	}
	
	@JsonProperty
	public java.util.List<String> getRootCategoryIds() {
		return this.rootCategoryIds;
	}
	
	@JsonProperty
	public void setRootCategoryIds(java.util.List<String> rootCategoryIds) {
		if (this.frozen) {
			throw new RuntimeException("rootCategoryIds is frozen");
		}
		this.rootCategoryIds = rootCategoryIds;
	}
	
	
	
	@Override
	public void freeze() {
		this.frozen = true;
	}

	public com.anfelisa.user.models.DeleteUserModel deepCopy() {
		com.anfelisa.user.models.DeleteUserModel copy = new DeleteUserModel();
		copy.setUsernameToBeDeleted(this.getUsernameToBeDeleted());
		copy.setUsername(this.getUsername());
		copy.setUserId(this.getUserId());
		copy.setRole(this.getRole());
		List<String> rootCategoryIdsCopy = new ArrayList<String>();
		if (this.getRootCategoryIds() != null) {
			for(String item: this.getRootCategoryIds()) {
				rootCategoryIdsCopy.add(item);
			}
		}
		copy.setRootCategoryIds(rootCategoryIdsCopy);
		return copy;
	}
	
	public static DeleteUserModel generateTestData() {
		java.util.Random random = new java.util.Random();
		int n;
		DeleteUserModel testData = new DeleteUserModel();
		testData.setUsernameToBeDeleted(randomString(random));
		testData.setUsername(randomString(random));
		testData.setUserId(randomString(random));
		testData.setRole(randomString(random));
		java.util.List<String> rootCategoryIdsList = new java.util.ArrayList<String>();
		n = random.nextInt(20) + 1;
		for ( int i = 0; i < n; i++ ) {
			rootCategoryIdsList.add(randomString(random));
		}
		testData.setRootCategoryIds(rootCategoryIdsList);
		return testData;
	}
	
	private static String randomString(java.util.Random random) {
		String chars = "aaaaaaabcdeeeeeeeffffghiiiiiiijkllllllmmmmnnnnnnnooooooooopqrstttuuuuuuuvxyz";
		int n = random.nextInt(20) + 5;
		StringBuilder sb = new StringBuilder(n);
		for (int i = 0; i < n; i++) {
			int index = random.nextInt(chars.length());
			sb.append(chars.charAt(index));
		}
		String string  = sb.toString(); 
		return string.substring(0,1).toUpperCase() + string.substring(1).toLowerCase();
	}

}



/******* S.D.G. *******/



