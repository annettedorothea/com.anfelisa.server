/********************************************************************************
 * generated by de.acegen 1.5.4
 ********************************************************************************/




package com.anfelisa.box.events;

import de.acegen.IDaoProvider;
import de.acegen.IEvent;
import de.acegen.Event;
import de.acegen.ViewProvider;
import com.anfelisa.box.data.*;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import de.acegen.IDataContainer;
import de.acegen.CustomAppConfiguration;
import de.acegen.PersistenceHandle;

import java.io.IOException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings("all")
public class EventReplayService {
	
	private static ObjectMapper mapper = new ObjectMapper();
	private static final Logger LOG = LoggerFactory.getLogger(EventReplayService.class);

	static {
		mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
	}

	public static void replayEvent(String eventClass, String json, PersistenceHandle handle, IDaoProvider daoProvider, ViewProvider viewProvider, CustomAppConfiguration appConfiguration) {
		try {
			if (eventClass.equals("com.anfelisa.box.events.CreateBoxOkEvent")) {
				BoxCreationData data = mapper.readValue(json, BoxCreationData.class);
				data.migrateLegacyData(json);
				Event event = new Event<BoxCreationData>("com.anfelisa.box.events.CreateBoxOkEvent", daoProvider, viewProvider, appConfiguration);
				event.notifyListeners(data, handle);
				event.notifyAfterCommitListeners(data, handle);
			}
			if (eventClass.equals("com.anfelisa.box.events.CreateReverseBoxOkEvent")) {
				BoxCreationData data = mapper.readValue(json, BoxCreationData.class);
				data.migrateLegacyData(json);
				Event event = new Event<BoxCreationData>("com.anfelisa.box.events.CreateReverseBoxOkEvent", daoProvider, viewProvider, appConfiguration);
				event.notifyListeners(data, handle);
				event.notifyAfterCommitListeners(data, handle);
			}
			if (eventClass.equals("com.anfelisa.box.events.ArchiveBoxOkEvent")) {
				BoxArchiveData data = mapper.readValue(json, BoxArchiveData.class);
				data.migrateLegacyData(json);
				Event event = new Event<BoxArchiveData>("com.anfelisa.box.events.ArchiveBoxOkEvent", daoProvider, viewProvider, appConfiguration);
				event.notifyListeners(data, handle);
				event.notifyAfterCommitListeners(data, handle);
			}
			if (eventClass.equals("com.anfelisa.box.events.UpdateBoxCanEditCategoryEvent")) {
				BoxUpdateData data = mapper.readValue(json, BoxUpdateData.class);
				data.migrateLegacyData(json);
				Event event = new Event<BoxUpdateData>("com.anfelisa.box.events.UpdateBoxCanEditCategoryEvent", daoProvider, viewProvider, appConfiguration);
				event.notifyListeners(data, handle);
				event.notifyAfterCommitListeners(data, handle);
			}
			if (eventClass.equals("com.anfelisa.box.events.UpdateBoxOkEvent")) {
				BoxUpdateData data = mapper.readValue(json, BoxUpdateData.class);
				data.migrateLegacyData(json);
				Event event = new Event<BoxUpdateData>("com.anfelisa.box.events.UpdateBoxOkEvent", daoProvider, viewProvider, appConfiguration);
				event.notifyListeners(data, handle);
				event.notifyAfterCommitListeners(data, handle);
			}
			if (eventClass.equals("com.anfelisa.box.events.ScheduleCardsOkEvent")) {
				ScheduledCardsData data = mapper.readValue(json, ScheduledCardsData.class);
				data.migrateLegacyData(json);
				Event event = new Event<ScheduledCardsData>("com.anfelisa.box.events.ScheduleCardsOkEvent", daoProvider, viewProvider, appConfiguration);
				event.notifyListeners(data, handle);
				event.notifyAfterCommitListeners(data, handle);
			}
			if (eventClass.equals("com.anfelisa.box.events.SortCardsOutOkEvent")) {
				SortCardsOutData data = mapper.readValue(json, SortCardsOutData.class);
				data.migrateLegacyData(json);
				Event event = new Event<SortCardsOutData>("com.anfelisa.box.events.SortCardsOutOkEvent", daoProvider, viewProvider, appConfiguration);
				event.notifyListeners(data, handle);
				event.notifyAfterCommitListeners(data, handle);
			}
			if (eventClass.equals("com.anfelisa.box.events.ScoreCardScoreEvent")) {
				ScoreCardData data = mapper.readValue(json, ScoreCardData.class);
				data.migrateLegacyData(json);
				Event event = new Event<ScoreCardData>("com.anfelisa.box.events.ScoreCardScoreEvent", daoProvider, viewProvider, appConfiguration);
				event.notifyListeners(data, handle);
				event.notifyAfterCommitListeners(data, handle);
			}
			if (eventClass.equals("com.anfelisa.box.events.ScoreCardReinforceEvent")) {
				ScoreCardData data = mapper.readValue(json, ScoreCardData.class);
				data.migrateLegacyData(json);
				Event event = new Event<ScoreCardData>("com.anfelisa.box.events.ScoreCardReinforceEvent", daoProvider, viewProvider, appConfiguration);
				event.notifyListeners(data, handle);
				event.notifyAfterCommitListeners(data, handle);
			}
			if (eventClass.equals("com.anfelisa.box.events.ScoreReinforceCardKeepEvent")) {
				ScoreReinforceCardData data = mapper.readValue(json, ScoreReinforceCardData.class);
				data.migrateLegacyData(json);
				Event event = new Event<ScoreReinforceCardData>("com.anfelisa.box.events.ScoreReinforceCardKeepEvent", daoProvider, viewProvider, appConfiguration);
				event.notifyListeners(data, handle);
				event.notifyAfterCommitListeners(data, handle);
			}
			if (eventClass.equals("com.anfelisa.box.events.ScoreReinforceCardRemoveEvent")) {
				ScoreReinforceCardData data = mapper.readValue(json, ScoreReinforceCardData.class);
				data.migrateLegacyData(json);
				Event event = new Event<ScoreReinforceCardData>("com.anfelisa.box.events.ScoreReinforceCardRemoveEvent", daoProvider, viewProvider, appConfiguration);
				event.notifyListeners(data, handle);
				event.notifyAfterCommitListeners(data, handle);
			}
			if (eventClass.equals("com.anfelisa.box.events.InitMyBoxesForDayOkEvent")) {
				InitMyBoxesDataData data = mapper.readValue(json, InitMyBoxesDataData.class);
				data.migrateLegacyData(json);
				Event event = new Event<InitMyBoxesDataData>("com.anfelisa.box.events.InitMyBoxesForDayOkEvent", daoProvider, viewProvider, appConfiguration);
				event.notifyListeners(data, handle);
				event.notifyAfterCommitListeners(data, handle);
			}
			if (eventClass.equals("com.anfelisa.box.events.DeleteBoxDeleteBoxEvent")) {
				DeleteBoxData data = mapper.readValue(json, DeleteBoxData.class);
				data.migrateLegacyData(json);
				Event event = new Event<DeleteBoxData>("com.anfelisa.box.events.DeleteBoxDeleteBoxEvent", daoProvider, viewProvider, appConfiguration);
				event.notifyListeners(data, handle);
				event.notifyAfterCommitListeners(data, handle);
			}
			if (eventClass.equals("com.anfelisa.box.events.DeleteBoxDeleteCategoryEvent")) {
				DeleteBoxData data = mapper.readValue(json, DeleteBoxData.class);
				data.migrateLegacyData(json);
				Event event = new Event<DeleteBoxData>("com.anfelisa.box.events.DeleteBoxDeleteCategoryEvent", daoProvider, viewProvider, appConfiguration);
				event.notifyListeners(data, handle);
				event.notifyAfterCommitListeners(data, handle);
			}
		} catch (IOException e) {
			LOG.error("failed to replay event {} with data {}", eventClass, json, e);
		}
	}

}



/******* S.D.G. *******/



