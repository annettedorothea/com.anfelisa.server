/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/




package com.anfelisa.box.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

import de.acegen.DateTimeToStringConverter;
import de.acegen.StringToDateTimeConverter;
import de.acegen.AbstractModel;

@SuppressWarnings("unused")
public class BoxArchiveModel extends AbstractModel {

	private String userId;

	private String boxId;

	private Boolean archived;

	
	private Boolean frozen = false;

	public BoxArchiveModel() {
	}

	public BoxArchiveModel(
		@JsonProperty("userId") String userId,
		@JsonProperty("boxId") String boxId,
		@JsonProperty("archived") Boolean archived
	) {
		this.userId = userId;
		this.boxId = boxId;
		this.archived = archived;
	}

	@JsonProperty
	public String getUserId() {
		return this.userId;
	}
	
	@JsonProperty
	public void setUserId(String userId) {
		if (this.frozen) {
			throw new RuntimeException("userId is frozen");
		}
		this.userId = userId;
	}
	
	@JsonProperty
	public String getBoxId() {
		return this.boxId;
	}
	
	@JsonProperty
	public void setBoxId(String boxId) {
		if (this.frozen) {
			throw new RuntimeException("boxId is frozen");
		}
		this.boxId = boxId;
	}
	
	@JsonProperty
	public Boolean getArchived() {
		return this.archived;
	}
	
	@JsonProperty
	public void setArchived(Boolean archived) {
		if (this.frozen) {
			throw new RuntimeException("archived is frozen");
		}
		this.archived = archived;
	}
	
	
	
	@Override
	public void freeze() {
		this.frozen = true;
	}

	public static BoxArchiveModel generateTestData() {
		java.util.Random random = new java.util.Random();
		BoxArchiveModel testData = new BoxArchiveModel();
		testData.setUserId(randomString(random));
		testData.setBoxId(randomString(random));
		testData.setArchived(random.nextBoolean());
		return testData;
	}
	
	private static String randomString(java.util.Random random) {
		String chars = "aaaaaaabcdeeeeeeeffffghiiiiiiijkllllllmmmmnnnnnnnooooooooopqrstttuuuuuuuvxyz";
		int n = random.nextInt(20) + 5;
		StringBuilder sb = new StringBuilder(n);
		for (int i = 0; i < n; i++) {
			int index = random.nextInt(chars.length());
			sb.append(chars.charAt(index));
		}
		String string  = sb.toString(); 
		return string.substring(0,1).toUpperCase() + string.substring(1).toLowerCase();
	}

}



/******* S.D.G. *******/



