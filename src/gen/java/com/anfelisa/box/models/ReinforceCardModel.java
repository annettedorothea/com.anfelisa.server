/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/




package com.anfelisa.box.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

import java.util.List;
import java.util.ArrayList;

import de.acegen.DateTimeToStringConverter;
import de.acegen.StringToDateTimeConverter;
import de.acegen.AbstractModel;

@SuppressWarnings("all")
public class ReinforceCardModel extends AbstractModel {

	private String reinforceCardId;

	private String scheduledCardId;

	private String boxId;

	private java.time.LocalDateTime changeDate;

	
	private Boolean frozen = false;

	public ReinforceCardModel() {
	}

	public ReinforceCardModel(
		@JsonProperty("reinforceCardId") String reinforceCardId,
		@JsonProperty("scheduledCardId") String scheduledCardId,
		@JsonProperty("boxId") String boxId,
		@JsonProperty("changeDate") java.time.LocalDateTime changeDate
	) {
		this.reinforceCardId = reinforceCardId;
		this.scheduledCardId = scheduledCardId;
		this.boxId = boxId;
		this.changeDate = changeDate;
	}

	@JsonProperty
	public String getReinforceCardId() {
		return this.reinforceCardId;
	}
	
	@JsonProperty
	public void setReinforceCardId(String reinforceCardId) {
		if (this.frozen) {
			throw new RuntimeException("reinforceCardId is frozen");
		}
		this.reinforceCardId = reinforceCardId;
	}
	
	@JsonProperty
	public String getScheduledCardId() {
		return this.scheduledCardId;
	}
	
	@JsonProperty
	public void setScheduledCardId(String scheduledCardId) {
		if (this.frozen) {
			throw new RuntimeException("scheduledCardId is frozen");
		}
		this.scheduledCardId = scheduledCardId;
	}
	
	@JsonProperty
	public String getBoxId() {
		return this.boxId;
	}
	
	@JsonProperty
	public void setBoxId(String boxId) {
		if (this.frozen) {
			throw new RuntimeException("boxId is frozen");
		}
		this.boxId = boxId;
	}
	
	@JsonProperty
	@JsonSerialize(converter = DateTimeToStringConverter.class)
	@JsonDeserialize(converter = StringToDateTimeConverter.class)
	public java.time.LocalDateTime getChangeDate() {
		return this.changeDate;
	}
	
	@JsonProperty
	@JsonSerialize(converter = DateTimeToStringConverter.class)
	@JsonDeserialize(converter = StringToDateTimeConverter.class)
	public void setChangeDate(java.time.LocalDateTime changeDate) {
		if (this.frozen) {
			throw new RuntimeException("changeDate is frozen");
		}
		this.changeDate = changeDate;
	}
	
	
	
	@Override
	public void freeze() {
		this.frozen = true;
	}

	public com.anfelisa.box.models.ReinforceCardModel deepCopy() {
		com.anfelisa.box.models.ReinforceCardModel copy = new ReinforceCardModel();
		copy.setReinforceCardId(this.getReinforceCardId());
		copy.setScheduledCardId(this.getScheduledCardId());
		copy.setBoxId(this.getBoxId());
		copy.setChangeDate(this.getChangeDate());
		return copy;
	}
	
	public static ReinforceCardModel generateTestData() {
		java.util.Random random = new java.util.Random();
		ReinforceCardModel testData = new ReinforceCardModel();
		testData.setReinforceCardId(randomString(random));
		testData.setScheduledCardId(randomString(random));
		testData.setBoxId(randomString(random));
		testData.setChangeDate(random.nextBoolean() ? java.time.LocalDateTime.now().plusMinutes(random.nextInt(60)) : java.time.LocalDateTime.now().minusMinutes(random.nextInt(60)) );
		return testData;
	}
	
	private static String randomString(java.util.Random random) {
		String chars = "aaaaaaabcdeeeeeeeffffghiiiiiiijkllllllmmmmnnnnnnnooooooooopqrstttuuuuuuuvxyz";
		int n = random.nextInt(20) + 5;
		StringBuilder sb = new StringBuilder(n);
		for (int i = 0; i < n; i++) {
			int index = random.nextInt(chars.length());
			sb.append(chars.charAt(index));
		}
		String string  = sb.toString(); 
		return string.substring(0,1).toUpperCase() + string.substring(1).toLowerCase();
	}

}



/******* S.D.G. *******/



