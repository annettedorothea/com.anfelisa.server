/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/




package com.anfelisa.box.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

import de.acegen.DateTimeToStringConverter;
import de.acegen.StringToDateTimeConverter;
import de.acegen.AbstractModel;

@SuppressWarnings("unused")
public class BoxWithStatisticsModel extends AbstractModel {

	private Integer openTodaysCards;

	private String categoryName;

	private Boolean editable;

	private Boolean deletable;

	private String boxId;

	private String categoryId;

	private Integer maxCardsPerDay;

	private Boolean reverse;

	private Boolean archived;

	private Integer quality0Count;

	private Integer quality1Count;

	private Integer quality2Count;

	private Integer quality3Count;

	private Integer quality4Count;

	private Integer quality5Count;

	private java.util.List<Integer> countsPerDayNextWeek;

	
	private Boolean frozen = false;

	public BoxWithStatisticsModel() {
	}

	public BoxWithStatisticsModel(
		@JsonProperty("openTodaysCards") Integer openTodaysCards,
		@JsonProperty("categoryName") String categoryName,
		@JsonProperty("editable") Boolean editable,
		@JsonProperty("deletable") Boolean deletable,
		@JsonProperty("boxId") String boxId,
		@JsonProperty("categoryId") String categoryId,
		@JsonProperty("maxCardsPerDay") Integer maxCardsPerDay,
		@JsonProperty("reverse") Boolean reverse,
		@JsonProperty("archived") Boolean archived,
		@JsonProperty("quality0Count") Integer quality0Count,
		@JsonProperty("quality1Count") Integer quality1Count,
		@JsonProperty("quality2Count") Integer quality2Count,
		@JsonProperty("quality3Count") Integer quality3Count,
		@JsonProperty("quality4Count") Integer quality4Count,
		@JsonProperty("quality5Count") Integer quality5Count,
		@JsonProperty("countsPerDayNextWeek") java.util.List<Integer> countsPerDayNextWeek
	) {
		this.openTodaysCards = openTodaysCards;
		this.categoryName = categoryName;
		this.editable = editable;
		this.deletable = deletable;
		this.boxId = boxId;
		this.categoryId = categoryId;
		this.maxCardsPerDay = maxCardsPerDay;
		this.reverse = reverse;
		this.archived = archived;
		this.quality0Count = quality0Count;
		this.quality1Count = quality1Count;
		this.quality2Count = quality2Count;
		this.quality3Count = quality3Count;
		this.quality4Count = quality4Count;
		this.quality5Count = quality5Count;
		this.countsPerDayNextWeek = countsPerDayNextWeek;
	}

	@JsonProperty
	public Integer getOpenTodaysCards() {
		return this.openTodaysCards;
	}
	
	@JsonProperty
	public void setOpenTodaysCards(Integer openTodaysCards) {
		if (this.frozen) {
			throw new RuntimeException("openTodaysCards is frozen");
		}
		this.openTodaysCards = openTodaysCards;
	}
	
	@JsonProperty
	public String getCategoryName() {
		return this.categoryName;
	}
	
	@JsonProperty
	public void setCategoryName(String categoryName) {
		if (this.frozen) {
			throw new RuntimeException("categoryName is frozen");
		}
		this.categoryName = categoryName;
	}
	
	@JsonProperty
	public Boolean getEditable() {
		return this.editable;
	}
	
	@JsonProperty
	public void setEditable(Boolean editable) {
		if (this.frozen) {
			throw new RuntimeException("editable is frozen");
		}
		this.editable = editable;
	}
	
	@JsonProperty
	public Boolean getDeletable() {
		return this.deletable;
	}
	
	@JsonProperty
	public void setDeletable(Boolean deletable) {
		if (this.frozen) {
			throw new RuntimeException("deletable is frozen");
		}
		this.deletable = deletable;
	}
	
	@JsonProperty
	public String getBoxId() {
		return this.boxId;
	}
	
	@JsonProperty
	public void setBoxId(String boxId) {
		if (this.frozen) {
			throw new RuntimeException("boxId is frozen");
		}
		this.boxId = boxId;
	}
	
	@JsonProperty
	public String getCategoryId() {
		return this.categoryId;
	}
	
	@JsonProperty
	public void setCategoryId(String categoryId) {
		if (this.frozen) {
			throw new RuntimeException("categoryId is frozen");
		}
		this.categoryId = categoryId;
	}
	
	@JsonProperty
	public Integer getMaxCardsPerDay() {
		return this.maxCardsPerDay;
	}
	
	@JsonProperty
	public void setMaxCardsPerDay(Integer maxCardsPerDay) {
		if (this.frozen) {
			throw new RuntimeException("maxCardsPerDay is frozen");
		}
		this.maxCardsPerDay = maxCardsPerDay;
	}
	
	@JsonProperty
	public Boolean getReverse() {
		return this.reverse;
	}
	
	@JsonProperty
	public void setReverse(Boolean reverse) {
		if (this.frozen) {
			throw new RuntimeException("reverse is frozen");
		}
		this.reverse = reverse;
	}
	
	@JsonProperty
	public Boolean getArchived() {
		return this.archived;
	}
	
	@JsonProperty
	public void setArchived(Boolean archived) {
		if (this.frozen) {
			throw new RuntimeException("archived is frozen");
		}
		this.archived = archived;
	}
	
	@JsonProperty
	public Integer getQuality0Count() {
		return this.quality0Count;
	}
	
	@JsonProperty
	public void setQuality0Count(Integer quality0Count) {
		if (this.frozen) {
			throw new RuntimeException("quality0Count is frozen");
		}
		this.quality0Count = quality0Count;
	}
	
	@JsonProperty
	public Integer getQuality1Count() {
		return this.quality1Count;
	}
	
	@JsonProperty
	public void setQuality1Count(Integer quality1Count) {
		if (this.frozen) {
			throw new RuntimeException("quality1Count is frozen");
		}
		this.quality1Count = quality1Count;
	}
	
	@JsonProperty
	public Integer getQuality2Count() {
		return this.quality2Count;
	}
	
	@JsonProperty
	public void setQuality2Count(Integer quality2Count) {
		if (this.frozen) {
			throw new RuntimeException("quality2Count is frozen");
		}
		this.quality2Count = quality2Count;
	}
	
	@JsonProperty
	public Integer getQuality3Count() {
		return this.quality3Count;
	}
	
	@JsonProperty
	public void setQuality3Count(Integer quality3Count) {
		if (this.frozen) {
			throw new RuntimeException("quality3Count is frozen");
		}
		this.quality3Count = quality3Count;
	}
	
	@JsonProperty
	public Integer getQuality4Count() {
		return this.quality4Count;
	}
	
	@JsonProperty
	public void setQuality4Count(Integer quality4Count) {
		if (this.frozen) {
			throw new RuntimeException("quality4Count is frozen");
		}
		this.quality4Count = quality4Count;
	}
	
	@JsonProperty
	public Integer getQuality5Count() {
		return this.quality5Count;
	}
	
	@JsonProperty
	public void setQuality5Count(Integer quality5Count) {
		if (this.frozen) {
			throw new RuntimeException("quality5Count is frozen");
		}
		this.quality5Count = quality5Count;
	}
	
	@JsonProperty
	public java.util.List<Integer> getCountsPerDayNextWeek() {
		return this.countsPerDayNextWeek;
	}
	
	@JsonProperty
	public void setCountsPerDayNextWeek(java.util.List<Integer> countsPerDayNextWeek) {
		if (this.frozen) {
			throw new RuntimeException("countsPerDayNextWeek is frozen");
		}
		this.countsPerDayNextWeek = countsPerDayNextWeek;
	}
	
	
	public com.anfelisa.box.models.BoxViewModel mapToBoxViewModel() {
		com.anfelisa.box.models.BoxViewModel model = new com.anfelisa.box.models.BoxViewModel();
		model.setOpenTodaysCards(this.getOpenTodaysCards());
		model.setCategoryName(this.getCategoryName());
		model.setEditable(this.getEditable());
		model.setDeletable(this.getDeletable());
		model.setBoxId(this.getBoxId());
		model.setCategoryId(this.getCategoryId());
		model.setMaxCardsPerDay(this.getMaxCardsPerDay());
		model.setReverse(this.getReverse());
		model.setArchived(this.getArchived());
		return model;
	}	
	public com.anfelisa.box.models.BoxStatisticsModel mapToBoxStatisticsModel() {
		com.anfelisa.box.models.BoxStatisticsModel model = new com.anfelisa.box.models.BoxStatisticsModel();
		model.setBoxId(this.getBoxId());
		model.setQuality0Count(this.getQuality0Count());
		model.setQuality1Count(this.getQuality1Count());
		model.setQuality2Count(this.getQuality2Count());
		model.setQuality3Count(this.getQuality3Count());
		model.setQuality4Count(this.getQuality4Count());
		model.setQuality5Count(this.getQuality5Count());
		model.setCountsPerDayNextWeek(this.getCountsPerDayNextWeek());
		model.setMaxCardsPerDay(this.getMaxCardsPerDay());
		return model;
	}	
	
	@Override
	public void freeze() {
		this.frozen = true;
	}

	public static BoxWithStatisticsModel generateTestData() {
		java.util.Random random = new java.util.Random();
		int n;
		BoxWithStatisticsModel testData = new BoxWithStatisticsModel();
		testData.setOpenTodaysCards(random.nextInt(50));
		testData.setCategoryName(randomString(random));
		testData.setEditable(random.nextBoolean());
		testData.setDeletable(random.nextBoolean());
		testData.setBoxId(randomString(random));
		testData.setCategoryId(randomString(random));
		testData.setMaxCardsPerDay(random.nextInt(50));
		testData.setReverse(random.nextBoolean());
		testData.setArchived(random.nextBoolean());
		testData.setQuality0Count(random.nextInt(50));
		testData.setQuality1Count(random.nextInt(50));
		testData.setQuality2Count(random.nextInt(50));
		testData.setQuality3Count(random.nextInt(50));
		testData.setQuality4Count(random.nextInt(50));
		testData.setQuality5Count(random.nextInt(50));
		java.util.List<Integer> countsPerDayNextWeekList = new java.util.ArrayList<Integer>();
		n = random.nextInt(20) + 1;
		for ( int i = 0; i < n; i++ ) {
			countsPerDayNextWeekList.add(random.nextInt(50));
		}
		testData.setCountsPerDayNextWeek(countsPerDayNextWeekList);
		return testData;
	}
	
	private static String randomString(java.util.Random random) {
		String chars = "aaaaaaabcdeeeeeeeffffghiiiiiiijkllllllmmmmnnnnnnnooooooooopqrstttuuuuuuuvxyz";
		int n = random.nextInt(20) + 5;
		StringBuilder sb = new StringBuilder(n);
		for (int i = 0; i < n; i++) {
			int index = random.nextInt(chars.length());
			sb.append(chars.charAt(index));
		}
		String string  = sb.toString(); 
		return string.substring(0,1).toUpperCase() + string.substring(1).toLowerCase();
	}

}



/******* S.D.G. *******/



