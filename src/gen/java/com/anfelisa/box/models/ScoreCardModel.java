/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/




package com.anfelisa.box.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

import de.acegen.DateTimeToStringConverter;
import de.acegen.StringToDateTimeConverter;
import de.acegen.AbstractModel;

@SuppressWarnings("unused")
public class ScoreCardModel extends AbstractModel {

	private String cardId;

	private String nextScheduledCardScheduledCardId;

	private java.time.LocalDateTime nextScheduledCardCreatedDate;

	private Float nextScheduledCardEf;

	private Integer nextScheduledCardInterval;

	private Integer nextScheduledCardN;

	private Integer nextScheduledCardCount;

	private java.time.LocalDateTime nextScheduledCardScheduledDate;

	private Integer nextScheduledCardLastQuality;

	private String scheduledCardId;

	private Integer scoredCardQuality;

	private java.time.LocalDateTime scoredCardScoredDate;

	private String reinforceCardId;

	private java.time.LocalDateTime reinforceCardCreatedDate;

	private String userId;

	private String boxId;

	private Integer intervalDifference;

	private Integer maxInterval;

	private Integer maxCardsPerDay;

	
	private Boolean frozen = false;

	public ScoreCardModel() {
	}

	public ScoreCardModel(
		@JsonProperty("cardId") String cardId,
		@JsonProperty("nextScheduledCardScheduledCardId") String nextScheduledCardScheduledCardId,
		@JsonProperty("nextScheduledCardCreatedDate") java.time.LocalDateTime nextScheduledCardCreatedDate,
		@JsonProperty("nextScheduledCardEf") Float nextScheduledCardEf,
		@JsonProperty("nextScheduledCardInterval") Integer nextScheduledCardInterval,
		@JsonProperty("nextScheduledCardN") Integer nextScheduledCardN,
		@JsonProperty("nextScheduledCardCount") Integer nextScheduledCardCount,
		@JsonProperty("nextScheduledCardScheduledDate") java.time.LocalDateTime nextScheduledCardScheduledDate,
		@JsonProperty("nextScheduledCardLastQuality") Integer nextScheduledCardLastQuality,
		@JsonProperty("scheduledCardId") String scheduledCardId,
		@JsonProperty("scoredCardQuality") Integer scoredCardQuality,
		@JsonProperty("scoredCardScoredDate") java.time.LocalDateTime scoredCardScoredDate,
		@JsonProperty("reinforceCardId") String reinforceCardId,
		@JsonProperty("reinforceCardCreatedDate") java.time.LocalDateTime reinforceCardCreatedDate,
		@JsonProperty("userId") String userId,
		@JsonProperty("boxId") String boxId,
		@JsonProperty("intervalDifference") Integer intervalDifference,
		@JsonProperty("maxInterval") Integer maxInterval,
		@JsonProperty("maxCardsPerDay") Integer maxCardsPerDay
	) {
		this.cardId = cardId;
		this.nextScheduledCardScheduledCardId = nextScheduledCardScheduledCardId;
		this.nextScheduledCardCreatedDate = nextScheduledCardCreatedDate;
		this.nextScheduledCardEf = nextScheduledCardEf;
		this.nextScheduledCardInterval = nextScheduledCardInterval;
		this.nextScheduledCardN = nextScheduledCardN;
		this.nextScheduledCardCount = nextScheduledCardCount;
		this.nextScheduledCardScheduledDate = nextScheduledCardScheduledDate;
		this.nextScheduledCardLastQuality = nextScheduledCardLastQuality;
		this.scheduledCardId = scheduledCardId;
		this.scoredCardQuality = scoredCardQuality;
		this.scoredCardScoredDate = scoredCardScoredDate;
		this.reinforceCardId = reinforceCardId;
		this.reinforceCardCreatedDate = reinforceCardCreatedDate;
		this.userId = userId;
		this.boxId = boxId;
		this.intervalDifference = intervalDifference;
		this.maxInterval = maxInterval;
		this.maxCardsPerDay = maxCardsPerDay;
	}

	@JsonProperty
	public String getCardId() {
		return this.cardId;
	}
	
	@JsonProperty
	public void setCardId(String cardId) {
		if (this.frozen) {
			throw new RuntimeException("cardId is frozen");
		}
		this.cardId = cardId;
	}
	
	@JsonProperty
	public String getNextScheduledCardScheduledCardId() {
		return this.nextScheduledCardScheduledCardId;
	}
	
	@JsonProperty
	public void setNextScheduledCardScheduledCardId(String nextScheduledCardScheduledCardId) {
		if (this.frozen) {
			throw new RuntimeException("nextScheduledCardScheduledCardId is frozen");
		}
		this.nextScheduledCardScheduledCardId = nextScheduledCardScheduledCardId;
	}
	
	@JsonProperty
	@JsonSerialize(converter = DateTimeToStringConverter.class)
	@JsonDeserialize(converter = StringToDateTimeConverter.class)
	public java.time.LocalDateTime getNextScheduledCardCreatedDate() {
		return this.nextScheduledCardCreatedDate;
	}
	
	@JsonProperty
	@JsonSerialize(converter = DateTimeToStringConverter.class)
	@JsonDeserialize(converter = StringToDateTimeConverter.class)
	public void setNextScheduledCardCreatedDate(java.time.LocalDateTime nextScheduledCardCreatedDate) {
		if (this.frozen) {
			throw new RuntimeException("nextScheduledCardCreatedDate is frozen");
		}
		this.nextScheduledCardCreatedDate = nextScheduledCardCreatedDate;
	}
	
	@JsonProperty
	public Float getNextScheduledCardEf() {
		return this.nextScheduledCardEf;
	}
	
	@JsonProperty
	public void setNextScheduledCardEf(Float nextScheduledCardEf) {
		if (this.frozen) {
			throw new RuntimeException("nextScheduledCardEf is frozen");
		}
		this.nextScheduledCardEf = nextScheduledCardEf;
	}
	
	@JsonProperty
	public Integer getNextScheduledCardInterval() {
		return this.nextScheduledCardInterval;
	}
	
	@JsonProperty
	public void setNextScheduledCardInterval(Integer nextScheduledCardInterval) {
		if (this.frozen) {
			throw new RuntimeException("nextScheduledCardInterval is frozen");
		}
		this.nextScheduledCardInterval = nextScheduledCardInterval;
	}
	
	@JsonProperty
	public Integer getNextScheduledCardN() {
		return this.nextScheduledCardN;
	}
	
	@JsonProperty
	public void setNextScheduledCardN(Integer nextScheduledCardN) {
		if (this.frozen) {
			throw new RuntimeException("nextScheduledCardN is frozen");
		}
		this.nextScheduledCardN = nextScheduledCardN;
	}
	
	@JsonProperty
	public Integer getNextScheduledCardCount() {
		return this.nextScheduledCardCount;
	}
	
	@JsonProperty
	public void setNextScheduledCardCount(Integer nextScheduledCardCount) {
		if (this.frozen) {
			throw new RuntimeException("nextScheduledCardCount is frozen");
		}
		this.nextScheduledCardCount = nextScheduledCardCount;
	}
	
	@JsonProperty
	@JsonSerialize(converter = DateTimeToStringConverter.class)
	@JsonDeserialize(converter = StringToDateTimeConverter.class)
	public java.time.LocalDateTime getNextScheduledCardScheduledDate() {
		return this.nextScheduledCardScheduledDate;
	}
	
	@JsonProperty
	@JsonSerialize(converter = DateTimeToStringConverter.class)
	@JsonDeserialize(converter = StringToDateTimeConverter.class)
	public void setNextScheduledCardScheduledDate(java.time.LocalDateTime nextScheduledCardScheduledDate) {
		if (this.frozen) {
			throw new RuntimeException("nextScheduledCardScheduledDate is frozen");
		}
		this.nextScheduledCardScheduledDate = nextScheduledCardScheduledDate;
	}
	
	@JsonProperty
	public Integer getNextScheduledCardLastQuality() {
		return this.nextScheduledCardLastQuality;
	}
	
	@JsonProperty
	public void setNextScheduledCardLastQuality(Integer nextScheduledCardLastQuality) {
		if (this.frozen) {
			throw new RuntimeException("nextScheduledCardLastQuality is frozen");
		}
		this.nextScheduledCardLastQuality = nextScheduledCardLastQuality;
	}
	
	@JsonProperty
	public String getScheduledCardId() {
		return this.scheduledCardId;
	}
	
	@JsonProperty
	public void setScheduledCardId(String scheduledCardId) {
		if (this.frozen) {
			throw new RuntimeException("scheduledCardId is frozen");
		}
		this.scheduledCardId = scheduledCardId;
	}
	
	@JsonProperty
	public Integer getScoredCardQuality() {
		return this.scoredCardQuality;
	}
	
	@JsonProperty
	public void setScoredCardQuality(Integer scoredCardQuality) {
		if (this.frozen) {
			throw new RuntimeException("scoredCardQuality is frozen");
		}
		this.scoredCardQuality = scoredCardQuality;
	}
	
	@JsonProperty
	@JsonSerialize(converter = DateTimeToStringConverter.class)
	@JsonDeserialize(converter = StringToDateTimeConverter.class)
	public java.time.LocalDateTime getScoredCardScoredDate() {
		return this.scoredCardScoredDate;
	}
	
	@JsonProperty
	@JsonSerialize(converter = DateTimeToStringConverter.class)
	@JsonDeserialize(converter = StringToDateTimeConverter.class)
	public void setScoredCardScoredDate(java.time.LocalDateTime scoredCardScoredDate) {
		if (this.frozen) {
			throw new RuntimeException("scoredCardScoredDate is frozen");
		}
		this.scoredCardScoredDate = scoredCardScoredDate;
	}
	
	@JsonProperty
	public String getReinforceCardId() {
		return this.reinforceCardId;
	}
	
	@JsonProperty
	public void setReinforceCardId(String reinforceCardId) {
		if (this.frozen) {
			throw new RuntimeException("reinforceCardId is frozen");
		}
		this.reinforceCardId = reinforceCardId;
	}
	
	@JsonProperty
	@JsonSerialize(converter = DateTimeToStringConverter.class)
	@JsonDeserialize(converter = StringToDateTimeConverter.class)
	public java.time.LocalDateTime getReinforceCardCreatedDate() {
		return this.reinforceCardCreatedDate;
	}
	
	@JsonProperty
	@JsonSerialize(converter = DateTimeToStringConverter.class)
	@JsonDeserialize(converter = StringToDateTimeConverter.class)
	public void setReinforceCardCreatedDate(java.time.LocalDateTime reinforceCardCreatedDate) {
		if (this.frozen) {
			throw new RuntimeException("reinforceCardCreatedDate is frozen");
		}
		this.reinforceCardCreatedDate = reinforceCardCreatedDate;
	}
	
	@JsonProperty
	public String getUserId() {
		return this.userId;
	}
	
	@JsonProperty
	public void setUserId(String userId) {
		if (this.frozen) {
			throw new RuntimeException("userId is frozen");
		}
		this.userId = userId;
	}
	
	@JsonProperty
	public String getBoxId() {
		return this.boxId;
	}
	
	@JsonProperty
	public void setBoxId(String boxId) {
		if (this.frozen) {
			throw new RuntimeException("boxId is frozen");
		}
		this.boxId = boxId;
	}
	
	@JsonProperty
	public Integer getIntervalDifference() {
		return this.intervalDifference;
	}
	
	@JsonProperty
	public void setIntervalDifference(Integer intervalDifference) {
		if (this.frozen) {
			throw new RuntimeException("intervalDifference is frozen");
		}
		this.intervalDifference = intervalDifference;
	}
	
	@JsonProperty
	public Integer getMaxInterval() {
		return this.maxInterval;
	}
	
	@JsonProperty
	public void setMaxInterval(Integer maxInterval) {
		if (this.frozen) {
			throw new RuntimeException("maxInterval is frozen");
		}
		this.maxInterval = maxInterval;
	}
	
	@JsonProperty
	public Integer getMaxCardsPerDay() {
		return this.maxCardsPerDay;
	}
	
	@JsonProperty
	public void setMaxCardsPerDay(Integer maxCardsPerDay) {
		if (this.frozen) {
			throw new RuntimeException("maxCardsPerDay is frozen");
		}
		this.maxCardsPerDay = maxCardsPerDay;
	}
	
	
	
	@Override
	public void freeze() {
		this.frozen = true;
	}

	public static ScoreCardModel generateTestData() {
		java.util.Random random = new java.util.Random();
		ScoreCardModel testData = new ScoreCardModel();
		testData.setCardId(randomString(random));
		testData.setNextScheduledCardScheduledCardId(randomString(random));
		testData.setNextScheduledCardCreatedDate(random.nextBoolean() ? java.time.LocalDateTime.now().plusMinutes(random.nextInt(60)) : java.time.LocalDateTime.now().minusMinutes(random.nextInt(60)) );
		testData.setNextScheduledCardEf(random.nextFloat());
		testData.setNextScheduledCardInterval(random.nextInt(50));
		testData.setNextScheduledCardN(random.nextInt(50));
		testData.setNextScheduledCardCount(random.nextInt(50));
		testData.setNextScheduledCardScheduledDate(random.nextBoolean() ? java.time.LocalDateTime.now().plusMinutes(random.nextInt(60)) : java.time.LocalDateTime.now().minusMinutes(random.nextInt(60)) );
		testData.setNextScheduledCardLastQuality(random.nextInt(50));
		testData.setScheduledCardId(randomString(random));
		testData.setScoredCardQuality(random.nextInt(50));
		testData.setScoredCardScoredDate(random.nextBoolean() ? java.time.LocalDateTime.now().plusMinutes(random.nextInt(60)) : java.time.LocalDateTime.now().minusMinutes(random.nextInt(60)) );
		testData.setReinforceCardId(randomString(random));
		testData.setReinforceCardCreatedDate(random.nextBoolean() ? java.time.LocalDateTime.now().plusMinutes(random.nextInt(60)) : java.time.LocalDateTime.now().minusMinutes(random.nextInt(60)) );
		testData.setUserId(randomString(random));
		testData.setBoxId(randomString(random));
		testData.setIntervalDifference(random.nextInt(50));
		testData.setMaxInterval(random.nextInt(50));
		testData.setMaxCardsPerDay(random.nextInt(50));
		return testData;
	}
	
	private static String randomString(java.util.Random random) {
		String chars = "aaaaaaabcdeeeeeeeffffghiiiiiiijkllllllmmmmnnnnnnnooooooooopqrstttuuuuuuuvxyz";
		int n = random.nextInt(20) + 5;
		StringBuilder sb = new StringBuilder(n);
		for (int i = 0; i < n; i++) {
			int index = random.nextInt(chars.length());
			sb.append(chars.charAt(index));
		}
		String string  = sb.toString(); 
		return string.substring(0,1).toUpperCase() + string.substring(1).toLowerCase();
	}

}



/******* S.D.G. *******/



