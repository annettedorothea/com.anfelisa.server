/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/




package com.anfelisa.category.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

import de.acegen.DateTimeToStringConverter;
import de.acegen.StringToDateTimeConverter;
import de.acegen.AbstractModel;

@SuppressWarnings("unused")
public class AlreadyInvitedUsernamesModel extends AbstractModel {

	private String categoryId;

	private String userId;

	private java.util.List<com.anfelisa.category.models.UsernameEditableModel> invitedUsers;

	
	private Boolean frozen = false;

	public AlreadyInvitedUsernamesModel() {
	}

	public AlreadyInvitedUsernamesModel(
		@JsonProperty("categoryId") String categoryId,
		@JsonProperty("userId") String userId,
		@JsonProperty("invitedUsers") java.util.List<com.anfelisa.category.models.UsernameEditableModel> invitedUsers
	) {
		this.categoryId = categoryId;
		this.userId = userId;
		this.invitedUsers = invitedUsers;
	}

	@JsonProperty
	public String getCategoryId() {
		return this.categoryId;
	}
	
	@JsonProperty
	public void setCategoryId(String categoryId) {
		if (this.frozen) {
			throw new RuntimeException("categoryId is frozen");
		}
		this.categoryId = categoryId;
	}
	
	@JsonProperty
	public String getUserId() {
		return this.userId;
	}
	
	@JsonProperty
	public void setUserId(String userId) {
		if (this.frozen) {
			throw new RuntimeException("userId is frozen");
		}
		this.userId = userId;
	}
	
	@JsonProperty
	public java.util.List<com.anfelisa.category.models.UsernameEditableModel> getInvitedUsers() {
		return this.invitedUsers;
	}
	
	@JsonProperty
	public void setInvitedUsers(java.util.List<com.anfelisa.category.models.UsernameEditableModel> invitedUsers) {
		if (this.frozen) {
			throw new RuntimeException("invitedUsers is frozen");
		}
		this.invitedUsers = invitedUsers;
	}
	
	
	
	@Override
	public void freeze() {
		this.frozen = true;
		if (this.invitedUsers != null) {
			for ( int i = 0; i < invitedUsers.size(); i++ ) {
				invitedUsers.get(i).freeze();
			}
		}
	}

	public static AlreadyInvitedUsernamesModel generateTestData() {
		java.util.Random random = new java.util.Random();
		int n;
		AlreadyInvitedUsernamesModel testData = new AlreadyInvitedUsernamesModel();
		testData.setCategoryId(randomString(random));
		testData.setUserId(randomString(random));
		java.util.List<com.anfelisa.category.models.UsernameEditableModel> invitedUsersList = new java.util.ArrayList<com.anfelisa.category.models.UsernameEditableModel>();
		n = random.nextInt(20) + 1;
		for ( int i = 0; i < n; i++ ) {
			invitedUsersList.add(com.anfelisa.category.models.UsernameEditableModel.generateTestData());
		}
		testData.setInvitedUsers(invitedUsersList);
		return testData;
	}
	
	private static String randomString(java.util.Random random) {
		String chars = "aaaaaaabcdeeeeeeeffffghiiiiiiijkllllllmmmmnnnnnnnooooooooopqrstttuuuuuuuvxyz";
		int n = random.nextInt(20) + 5;
		StringBuilder sb = new StringBuilder(n);
		for (int i = 0; i < n; i++) {
			int index = random.nextInt(chars.length());
			sb.append(chars.charAt(index));
		}
		String string  = sb.toString(); 
		return string.substring(0,1).toUpperCase() + string.substring(1).toLowerCase();
	}

}



/******* S.D.G. *******/



