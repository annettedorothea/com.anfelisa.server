/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/




package com.anfelisa.category.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

import de.acegen.DateTimeToStringConverter;
import de.acegen.StringToDateTimeConverter;
import de.acegen.AbstractModel;

@SuppressWarnings("unused")
public class CategoryTreeModel extends AbstractModel {

	private com.anfelisa.category.models.CategoryTreeItemModel rootCategory;

	private String userId;

	private String rootCategoryId;

	private Boolean filterNonScheduled;

	private Integer priority;

	private Boolean editable;

	private Boolean reverse;

	private Boolean reverseBoxExists;

	private String boxId;

	
	private Boolean frozen = false;

	public CategoryTreeModel() {
	}

	public CategoryTreeModel(
		@JsonProperty("rootCategory") com.anfelisa.category.models.CategoryTreeItemModel rootCategory,
		@JsonProperty("userId") String userId,
		@JsonProperty("rootCategoryId") String rootCategoryId,
		@JsonProperty("filterNonScheduled") Boolean filterNonScheduled,
		@JsonProperty("priority") Integer priority,
		@JsonProperty("editable") Boolean editable,
		@JsonProperty("reverse") Boolean reverse,
		@JsonProperty("reverseBoxExists") Boolean reverseBoxExists,
		@JsonProperty("boxId") String boxId
	) {
		this.rootCategory = rootCategory;
		this.userId = userId;
		this.rootCategoryId = rootCategoryId;
		this.filterNonScheduled = filterNonScheduled;
		this.priority = priority;
		this.editable = editable;
		this.reverse = reverse;
		this.reverseBoxExists = reverseBoxExists;
		this.boxId = boxId;
	}

	@JsonProperty
	public com.anfelisa.category.models.CategoryTreeItemModel getRootCategory() {
		return this.rootCategory;
	}
	
	@JsonProperty
	public void setRootCategory(com.anfelisa.category.models.CategoryTreeItemModel rootCategory) {
		if (this.frozen) {
			throw new RuntimeException("rootCategory is frozen");
		}
		this.rootCategory = rootCategory;
	}
	
	@JsonProperty
	public String getUserId() {
		return this.userId;
	}
	
	@JsonProperty
	public void setUserId(String userId) {
		if (this.frozen) {
			throw new RuntimeException("userId is frozen");
		}
		this.userId = userId;
	}
	
	@JsonProperty
	public String getRootCategoryId() {
		return this.rootCategoryId;
	}
	
	@JsonProperty
	public void setRootCategoryId(String rootCategoryId) {
		if (this.frozen) {
			throw new RuntimeException("rootCategoryId is frozen");
		}
		this.rootCategoryId = rootCategoryId;
	}
	
	@JsonProperty
	public Boolean getFilterNonScheduled() {
		return this.filterNonScheduled;
	}
	
	@JsonProperty
	public void setFilterNonScheduled(Boolean filterNonScheduled) {
		if (this.frozen) {
			throw new RuntimeException("filterNonScheduled is frozen");
		}
		this.filterNonScheduled = filterNonScheduled;
	}
	
	@JsonProperty
	public Integer getPriority() {
		return this.priority;
	}
	
	@JsonProperty
	public void setPriority(Integer priority) {
		if (this.frozen) {
			throw new RuntimeException("priority is frozen");
		}
		this.priority = priority;
	}
	
	@JsonProperty
	public Boolean getEditable() {
		return this.editable;
	}
	
	@JsonProperty
	public void setEditable(Boolean editable) {
		if (this.frozen) {
			throw new RuntimeException("editable is frozen");
		}
		this.editable = editable;
	}
	
	@JsonProperty
	public Boolean getReverse() {
		return this.reverse;
	}
	
	@JsonProperty
	public void setReverse(Boolean reverse) {
		if (this.frozen) {
			throw new RuntimeException("reverse is frozen");
		}
		this.reverse = reverse;
	}
	
	@JsonProperty
	public Boolean getReverseBoxExists() {
		return this.reverseBoxExists;
	}
	
	@JsonProperty
	public void setReverseBoxExists(Boolean reverseBoxExists) {
		if (this.frozen) {
			throw new RuntimeException("reverseBoxExists is frozen");
		}
		this.reverseBoxExists = reverseBoxExists;
	}
	
	@JsonProperty
	public String getBoxId() {
		return this.boxId;
	}
	
	@JsonProperty
	public void setBoxId(String boxId) {
		if (this.frozen) {
			throw new RuntimeException("boxId is frozen");
		}
		this.boxId = boxId;
	}
	
	
	
	@Override
	public void freeze() {
		this.frozen = true;
		if (this.rootCategory != null) {
			this.rootCategory.freeze();
		}
	}

	public static CategoryTreeModel generateTestData() {
		java.util.Random random = new java.util.Random();
		CategoryTreeModel testData = new CategoryTreeModel();
		testData.setRootCategory(com.anfelisa.category.models.CategoryTreeItemModel.generateTestData());
		testData.setUserId(randomString(random));
		testData.setRootCategoryId(randomString(random));
		testData.setFilterNonScheduled(random.nextBoolean());
		testData.setPriority(random.nextInt(50));
		testData.setEditable(random.nextBoolean());
		testData.setReverse(random.nextBoolean());
		testData.setReverseBoxExists(random.nextBoolean());
		testData.setBoxId(randomString(random));
		return testData;
	}
	
	private static String randomString(java.util.Random random) {
		String chars = "aaaaaaabcdeeeeeeeffffghiiiiiiijkllllllmmmmnnnnnnnooooooooopqrstttuuuuuuuvxyz";
		int n = random.nextInt(20) + 5;
		StringBuilder sb = new StringBuilder(n);
		for (int i = 0; i < n; i++) {
			int index = random.nextInt(chars.length());
			sb.append(chars.charAt(index));
		}
		String string  = sb.toString(); 
		return string.substring(0,1).toUpperCase() + string.substring(1).toLowerCase();
	}

}



/******* S.D.G. *******/



