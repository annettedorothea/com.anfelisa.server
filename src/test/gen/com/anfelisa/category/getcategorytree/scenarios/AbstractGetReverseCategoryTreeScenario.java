/********************************************************************************
 * generated by de.acegen 1.1.0
 ********************************************************************************/




package com.anfelisa.category.getcategorytree.scenarios;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import de.acegen.BaseScenario;
import de.acegen.ITimelineItem;
import de.acegen.NonDeterministicDataProvider;
import de.acegen.HttpResponse;

@SuppressWarnings("unused")
public abstract class AbstractGetReverseCategoryTreeScenario extends BaseScenario {

	static final Logger LOG = LoggerFactory.getLogger(AbstractGetReverseCategoryTreeScenario.class);
	
	private void given() throws Exception {
		String uuid;
		
		if (prerequisite("RegisterUser")) {
			uuid = "uuid-" + this.getTestId() + "";
			this.callNonDeterministicDataProviderPutValue(uuid, "token", 
						objectMapper.readValue("\"TOKEN-" + this.getTestId() + "\"",  String.class));
			com.anfelisa.user.data.RegisterUserPayload payload_0 = objectMapper.readValue("{" +
				"\"email\" : \"annette.pohl@anfelisa.de\"," + 
				"\"language\" : \"de\"," + 
				"\"password\" : \"password\"," + 
				"\"username\" : \"Annette-" + this.getTestId() + "\"} ",
					com.anfelisa.user.data.RegisterUserPayload.class);
			com.anfelisa.user.data.UserRegistrationData data_0 = objectMapper.readValue("{" +
			"\"uuid\" : \"" + uuid + "\"," + 
			"\"email\" : \"annette.pohl@anfelisa.de\"," + 
			"\"language\" : \"de\"," + 
			"\"password\" : \"password\"," + 
			"\"username\" : \"Annette-" + this.getTestId() + "\"} ",
					com.anfelisa.user.data.UserRegistrationData.class);
			HttpResponse<Object> response_0 = 
			this.httpPost(
				"/users/register", 
			 	payload_0,
				null,
				uuid,
				null
			);
			
			if (response_0.getStatusCode() >= 400) {
				String message = "GIVEN RegisterUser fails\n" + response_0.getStatusMessage();
				LOG.error("GIVEN: RegisterUser fails due to {} in {} ms", message, response_0.getDuration());
				assertFail(message);
			}
			LOG.info("GIVEN: RegisterUser success in {} ms", response_0.getDuration());
			addToMetrics("RegisterUser", response_0.getDuration());
		} else {
			LOG.info("GIVEN: prerequisite for RegisterUser not met");
		}

		if (prerequisite("CreateBoxMinimal")) {
			uuid = "boxId-" + this.getTestId() + "";
			com.anfelisa.box.data.CreateBoxPayload payload_1 = objectMapper.readValue("{" +
				"\"categoryName\" : \"cat\"," + 
				"\"dictionaryLookup\" : false," + 
				"\"maxCardsPerDay\" : 10} ",
					com.anfelisa.box.data.CreateBoxPayload.class);
			com.anfelisa.box.data.BoxCreationData data_1 = objectMapper.readValue("{" +
			"\"uuid\" : \"" + uuid + "\"," + 
			"\"categoryName\" : \"cat\"," + 
			"\"dictionaryLookup\" : false," + 
			"\"maxCardsPerDay\" : 10} ",
					com.anfelisa.box.data.BoxCreationData.class);
			HttpResponse<Object> response_1 = 
			this.httpPost(
				"/box/create", 
			 	payload_1,
				authorization("Annette-${testId}", "password"),
				uuid,
				null
			);
			
			if (response_1.getStatusCode() >= 400) {
				String message = "GIVEN CreateBoxMinimal fails\n" + response_1.getStatusMessage();
				LOG.error("GIVEN: CreateBoxMinimal fails due to {} in {} ms", message, response_1.getDuration());
				assertFail(message);
			}
			LOG.info("GIVEN: CreateBoxMinimal success in {} ms", response_1.getDuration());
			addToMetrics("CreateBox", response_1.getDuration());
		} else {
			LOG.info("GIVEN: prerequisite for CreateBoxMinimal not met");
		}

		if (prerequisite("CreateCategory")) {
			uuid = "cat1-" + this.getTestId() + "";
			com.anfelisa.category.data.CreateCategoryPayload payload_2 = objectMapper.readValue("{" +
				"\"categoryName\" : \"level 1 #1\"," + 
				"\"parentCategoryId\" : \"boxId-" + this.getTestId() + "\"} ",
					com.anfelisa.category.data.CreateCategoryPayload.class);
			com.anfelisa.category.data.CategoryCreationData data_2 = objectMapper.readValue("{" +
			"\"uuid\" : \"" + uuid + "\"," + 
			"\"categoryName\" : \"level 1 #1\"," + 
			"\"parentCategoryId\" : \"boxId-" + this.getTestId() + "\"} ",
					com.anfelisa.category.data.CategoryCreationData.class);
			HttpResponse<Object> response_2 = 
			this.httpPost(
				"/category/create", 
			 	payload_2,
				authorization("Annette-${testId}", "password"),
				uuid,
				null
			);
			
			if (response_2.getStatusCode() >= 400) {
				String message = "GIVEN CreateCategory fails\n" + response_2.getStatusMessage();
				LOG.error("GIVEN: CreateCategory fails due to {} in {} ms", message, response_2.getDuration());
				assertFail(message);
			}
			LOG.info("GIVEN: CreateCategory success in {} ms", response_2.getDuration());
			addToMetrics("CreateCategory", response_2.getDuration());
		} else {
			LOG.info("GIVEN: prerequisite for CreateCategory not met");
		}

		if (prerequisite("CreateSecondCategory")) {
			uuid = "cat2-" + this.getTestId() + "";
			com.anfelisa.category.data.CreateCategoryPayload payload_3 = objectMapper.readValue("{" +
				"\"categoryName\" : \"level 1 #2\"," + 
				"\"parentCategoryId\" : \"boxId-" + this.getTestId() + "\"} ",
					com.anfelisa.category.data.CreateCategoryPayload.class);
			com.anfelisa.category.data.CategoryCreationData data_3 = objectMapper.readValue("{" +
			"\"uuid\" : \"" + uuid + "\"," + 
			"\"categoryName\" : \"level 1 #2\"," + 
			"\"parentCategoryId\" : \"boxId-" + this.getTestId() + "\"} ",
					com.anfelisa.category.data.CategoryCreationData.class);
			HttpResponse<Object> response_3 = 
			this.httpPost(
				"/category/create", 
			 	payload_3,
				authorization("Annette-${testId}", "password"),
				uuid,
				null
			);
			
			if (response_3.getStatusCode() >= 400) {
				String message = "GIVEN CreateSecondCategory fails\n" + response_3.getStatusMessage();
				LOG.error("GIVEN: CreateSecondCategory fails due to {} in {} ms", message, response_3.getDuration());
				assertFail(message);
			}
			LOG.info("GIVEN: CreateSecondCategory success in {} ms", response_3.getDuration());
			addToMetrics("CreateCategory", response_3.getDuration());
		} else {
			LOG.info("GIVEN: prerequisite for CreateSecondCategory not met");
		}

		if (prerequisite("CreateCategorySecondLevel")) {
			uuid = "cat3-" + this.getTestId() + "";
			com.anfelisa.category.data.CreateCategoryPayload payload_4 = objectMapper.readValue("{" +
				"\"categoryName\" : \"level 2 #1\"," + 
				"\"parentCategoryId\" : \"cat2-" + this.getTestId() + "\"} ",
					com.anfelisa.category.data.CreateCategoryPayload.class);
			com.anfelisa.category.data.CategoryCreationData data_4 = objectMapper.readValue("{" +
			"\"uuid\" : \"" + uuid + "\"," + 
			"\"categoryName\" : \"level 2 #1\"," + 
			"\"parentCategoryId\" : \"cat2-" + this.getTestId() + "\"} ",
					com.anfelisa.category.data.CategoryCreationData.class);
			HttpResponse<Object> response_4 = 
			this.httpPost(
				"/category/create", 
			 	payload_4,
				authorization("Annette-${testId}", "password"),
				uuid,
				null
			);
			
			if (response_4.getStatusCode() >= 400) {
				String message = "GIVEN CreateCategorySecondLevel fails\n" + response_4.getStatusMessage();
				LOG.error("GIVEN: CreateCategorySecondLevel fails due to {} in {} ms", message, response_4.getDuration());
				assertFail(message);
			}
			LOG.info("GIVEN: CreateCategorySecondLevel success in {} ms", response_4.getDuration());
			addToMetrics("CreateCategory", response_4.getDuration());
		} else {
			LOG.info("GIVEN: prerequisite for CreateCategorySecondLevel not met");
		}

		if (prerequisite("CreateReverseBox")) {
			uuid = "reverseBoxId-" + this.getTestId() + "";
			com.anfelisa.box.data.CreateReverseBoxPayload payload_5 = objectMapper.readValue("{" +
				"\"rootCategoryId\" : \"boxId-" + this.getTestId() + "\"} ",
					com.anfelisa.box.data.CreateReverseBoxPayload.class);
			com.anfelisa.box.data.BoxCreationData data_5 = objectMapper.readValue("{" +
			"\"uuid\" : \"" + uuid + "\"," + 
			"\"rootCategoryId\" : \"boxId-" + this.getTestId() + "\"} ",
					com.anfelisa.box.data.BoxCreationData.class);
			HttpResponse<Object> response_5 = 
			this.httpPost(
				"/box/create-reverse", 
			 	payload_5,
				authorization("Annette-${testId}", "password"),
				uuid,
				null
			);
			
			if (response_5.getStatusCode() >= 400) {
				String message = "GIVEN CreateReverseBox fails\n" + response_5.getStatusMessage();
				LOG.error("GIVEN: CreateReverseBox fails due to {} in {} ms", message, response_5.getDuration());
				assertFail(message);
			}
			LOG.info("GIVEN: CreateReverseBox success in {} ms", response_5.getDuration());
			addToMetrics("CreateReverseBox", response_5.getDuration());
		} else {
			LOG.info("GIVEN: prerequisite for CreateReverseBox not met");
		}

	}
	
	private HttpResponse<com.anfelisa.category.data.GetCategoryTreeResponse> when() throws Exception {
		String uuid = this.randomUUID();
		com.anfelisa.category.data.CategoryTreeData data_0 = objectMapper.readValue("{" +
		"\"uuid\" : \"" + uuid + "\"," + 
		"\"rootCategoryId\" : \"boxId-" + this.getTestId() + "\"," + 
		"\"filterNonScheduled\" : false," + 
		"\"reverse\" : true} ",
				com.anfelisa.category.data.CategoryTreeData.class);
		HttpResponse<com.anfelisa.category.data.GetCategoryTreeResponse> response = 
		this.httpGet(
			"/category/tree?rootCategoryId=" + data_0.getRootCategoryId() + "&filterNonScheduled=" + data_0.getFilterNonScheduled() + "&priority=" + data_0.getPriority() + "&reverse=" + data_0.getReverse() + "", 
			authorization("Annette-${testId}", "password"),
			uuid,
			com.anfelisa.category.data.GetCategoryTreeResponse.class
		);
		
		LOG.info("WHEN: GetCategoryTree finished in {} ms", response.getDuration());
		if (response.getStatusCode() >= 200 && response.getStatusCode() < 300) {
			addToMetrics("GetCategoryTree", response.getDuration());
		}
		return response;
	}
	
	private com.anfelisa.category.data.GetCategoryTreeResponse then(HttpResponse<com.anfelisa.category.data.GetCategoryTreeResponse> response) throws Exception {
		if (response.getStatusCode() == 500) {
			LOG.error("THEN: status " + response.getStatusCode() + " failed: " + response.getStatusMessage());
			assertFail(response.getStatusMessage());
		}
		if (response.getStatusCode() != 200) {
			LOG.error("THEN: status " + response.getStatusCode() + " failed, expected 200: " + response.getStatusMessage());
			assertFail(response.getStatusMessage());
		} else {
			LOG.info("THEN: status 200 passed");
		}
		
				com.anfelisa.category.data.GetCategoryTreeResponse actual = null;
				if (response.getStatusCode() < 400) {
					try {
						actual = response.getEntity();
						
					} catch (Exception x) {
						LOG.error("THEN: failed to read response", x);
						assertFail(x.getMessage());
					}

					com.anfelisa.category.data.CategoryTreeData expectedData = objectMapper.readValue("{" +
						"\"uuid\" : \"\"," + 
						"\"boxId\" : \"reverseBoxId-" + this.getTestId() + "\"," + 
						"\"reverseBoxExists\" : true," + 
						"\"rootCategory\" : { \"categoryId\" : \"boxId-" + this.getTestId() + "\"," + 
						"\"categoryIndex\" : null," + 
						"\"categoryName\" : \"cat\"," + 
						"\"dictionaryLookup\" : false," + 
						"\"empty\" : false," + 
						"\"rootCategoryId\" : \"boxId-" + this.getTestId() + "\"," + 
						"\"editable\" : false," + 
						"\"childCategories\" : [ { \"categoryId\" : \"cat1-" + this.getTestId() + "\"," + 
						"\"categoryIndex\" : 1," + 
						"\"categoryName\" : \"level 1 #1\"," + 
						"\"dictionaryLookup\" : false," + 
						"\"empty\" : true," + 
						"\"parentCategoryId\" : \"boxId-" + this.getTestId() + "\"," + 
						"\"rootCategoryId\" : \"boxId-" + this.getTestId() + "\"," + 
						"\"editable\" : false," + 
						"\"childCategories\" : []}," + 
						"{ \"categoryId\" : \"cat2-" + this.getTestId() + "\"," + 
						"\"categoryIndex\" : 2," + 
						"\"categoryName\" : \"level 1 #2\"," + 
						"\"dictionaryLookup\" : false," + 
						"\"empty\" : false," + 
						"\"parentCategoryId\" : \"boxId-" + this.getTestId() + "\"," + 
						"\"rootCategoryId\" : \"boxId-" + this.getTestId() + "\"," + 
						"\"editable\" : false," + 
						"\"childCategories\" : [ { \"categoryId\" : \"cat3-" + this.getTestId() + "\"," + 
						"\"categoryIndex\" : 1," + 
						"\"categoryName\" : \"level 2 #1\"," + 
						"\"dictionaryLookup\" : false," + 
						"\"empty\" : true," + 
						"\"parentCategoryId\" : \"cat2-" + this.getTestId() + "\"," + 
						"\"rootCategoryId\" : \"boxId-" + this.getTestId() + "\"," + 
						"\"editable\" : false," + 
						"\"childCategories\" : []}]}]}} ",
					com.anfelisa.category.data.CategoryTreeData.class);
					
					com.anfelisa.category.data.GetCategoryTreeResponse expected = new com.anfelisa.category.data.GetCategoryTreeResponse(expectedData);
					
					assertThat(actual, expected);
					
					LOG.info("THEN: response passed");
				}

				return actual;
	}
			
	@Override
	public void runTest() throws Exception {
		given();
			
		if (prerequisite("GetReverseCategoryTree")) {
			HttpResponse<com.anfelisa.category.data.GetCategoryTreeResponse> response = when();

			com.anfelisa.category.data.GetCategoryTreeResponse actualResponse = then(response);
			
	
		} else {
			LOG.info("WHEN: prerequisite for GetReverseCategoryTree not met");
		}
	}
	
	
		
	@Override
	protected String scenarioName() {
		return "GetReverseCategoryTree";
	}
	
}



/******* S.D.G. *******/



