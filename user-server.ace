HttpServer Java Dropwizard JDBI3 Liquibase

com.anfelisa.user

Authorization AuthUser {
	String userId
	String username
	String password
	String role
}

ACE 
	 RegisterUser<UserRegistration>
		POST "/users/register"
		payload 
			NotNull password
			NotNull username
			NotNull email
			NotNull language
		on ok (User.registerUser EmailConfirmation.insert Email.sendRegistrationEmail)
		
	GetRole <Role>
		GET "/user/role"
		authorize 
		response role 
		
	UsernameAvailable<UsernameAvailable>
		GET "/users/username" 
		queryParams NotNull username
		response available
	
	ConfirmEmail<ConfirmEmail>
		PUT "/users/confirm" 
		payload 
			NotNull token
			NotNull username
		on ok (User.confirmEmail EmailConfirmation.delete)
		on alreadyConfirmed
	
	GetUserProfile<User>
		GET "/user/get" 
		authorize 
		response
			email
			username
			userId
	
	GetAllUsers<UserList>
		GET "/users/all" 
		authorize
		response userList

	ForgotPassword<ForgotPassword>
		POST "/users/forgot-password" 
		payload  
			NotNull username 
			NotNull language
		on ok ( ResetPassword.insert Email.sendForgotPasswordEmail)
		on doesNotExist
	
	ResetPassword<ResetPasswordWithNewPassword>
		PUT "/users/resetpassword"
		payload 
			NotNull password
			NotNull token 
		on ok (User.resetPassword ResetPassword.delete)
	
	ChangeUserRole<ChangeUserRole>
		PUT "/user/role" 
		authorize
		payload 
			NotNull newRole
			NotNull editedUserId
		on ok ( User.changeUserRole )
	
	DeleteUser <DeleteUser>
		DELETE "/user/delete"  
		authorize
		queryParams 
			NotNull usernameToBeDeleted
		on ok ( 
			UserScheduledCard.deleteAll 
			UserReinforceCard.deleteAll 
			UserRootCategory.deleteAll 
			UserBox.deleteAll 
			UserUserAccessToCategory.delete 
			User.deleteUser
		)
	
views 
	User {
		registerUser(UserRegistration)
		confirmEmail(ConfirmEmail)
		changeUserRole(ChangeUserRole)
		deleteUser(DeleteUser)
		resetPassword(ResetPasswordWithNewPassword)
	}
	
	afterCommit EmailConfirmation { 
		insert(UserRegistration)
		delete(ConfirmEmail)
	}
	
	ResetPassword { 
		insert(ForgotPassword)
		delete(ResetPasswordWithNewPassword)
	}
	
	Email { 
		sendForgotPasswordEmail(ForgotPassword)
		sendRegistrationEmail(UserRegistration)
	}
	
	UserBox {
		deleteAll (DeleteUser)
	}
	
	UserScheduledCard { 
		deleteAll(DeleteUser)
	}
	
	UserReinforceCard { 
		deleteAll(DeleteUser)
	}
	
	UserRootCategory {
		deleteAll(DeleteUser)
	}
	
	UserUserAccessToCategory { 
		delete(DeleteUser)
	}


models 

	persistent User {
		Unique PrimaryKey NotNull String userId
		Unique NotNull String username
		NotNull String password
		NotNull String email
		NotNull String role
		NotNull Boolean emailConfirmed
	}

	persistent EmailConfirmation {
		Unique PrimaryKey NotNull String token nonDeterministic
		NotNull String userId references User.userId
	}

	persistent ResetPassword {
		Unique PrimaryKey NotNull String token
		NotNull String userId references User.userId
	}
	
	Role {
		String username
		String role
	} 
	DeleteUser {
		String usernameToBeDeleted
		String username
		String userId
		String role
		List String boxIds
		List String rootCategoryIds
	}
	UserList {
		List User userList
		String role
	}
	ChangeUserRole {
		String editedUserId
		String newRole
		String userId
		String role
	} 
	
	UsernameAvailable {
		String username
		Boolean available
	}
	
	ForgotPassword {
		String language
		String email
		String username
		String token nonDeterministic
		String userId
	}

	ResetPasswordWithNewPassword {
		String password
		String token
		String userId
	}
	
	UserRegistration extends User, EmailConfirmation {
		String language
	}
	
	ConfirmEmail extends EmailConfirmation {
		String username
		String token
		String userId
	}
	
