JAVA 

com.anfelisa.user

Authorization AuthUser {
	String userId
	String username
	String password
	String role
}

ACE 
	GetUserProfile<User>
		GET "/user/get" 
		authorize 
		response
			email
			username
			userId
	
	UsernameAvailable<UsernameAvailable>
		GET "/users/username" 
		queryParams username
		response available
	
	GetRole <Role>
		GET "/user/role"
		authorize 
		response role 
		
	GetAllUsers<UserList>
		GET "/users/all" 
		authorize
		response userList

	ForgotPassword<ForgotPassword>
		POST "/users/forgot-password" 
		payload  username language
		on ok ( ResetPassword.insert Email.sendForgotPasswordEmail)
		on doesNotExist
	
	ResetPassword<ResetPasswordWithNewPassword>
		PUT "/users/resetpassword"
		payload 
			password
			token 
		on ok (User.resetPassword ResetPassword.delete)
	
	RegisterUser<UserRegistration>
		POST "/users/register"
		payload 
			password
			username
			email
			language
		on ok (User.registerUser EmailConfirmation.insert Email.sendRegistrationEmail)
	
	ConfirmEmail<ConfirmEmail>
		PUT "/users/confirm" 
		payload 
			token
			username
		on ok (User.confirmEmail EmailConfirmation.delete)
		on alreadyConfirmed
	
	ChangeUserRole<ChangeUserRole>
		PUT "/user/role" 
		authorize
			payload 
				newRole
				editedUserId
		on ok ( User.changeUserRole )
	
	DeleteUser <DeleteUser>
		DELETE "/user/delete"  
		authorize
		queryParams usernameToBeDeleted
		on ok (User.deleteUser)
	
views 
	User {
		registerUser(UserRegistration)
		confirmEmail(ConfirmEmail)
		changeUserRole(ChangeUserRole)
		deleteUser(DeleteUser)
		resetPassword(ResetPasswordWithNewPassword)
	}
	
	EmailConfirmation { 
		insert(UserRegistration)
		delete(ConfirmEmail)
	}
	
	ResetPassword { 
		insert(ForgotPassword)
		delete(ResetPasswordWithNewPassword)
	}
	
	Email { 
		sendForgotPasswordEmail(ForgotPassword)
		sendRegistrationEmail(UserRegistration)
	}
	

models 

	persistent User {
		Unique PrimaryKey NotNull String userId
		Unique NotNull String username
		NotNull String password
		NotNull String email
		NotNull String role
		NotNull Boolean emailConfirmed
	}

	persistent EmailConfirmation {
		Unique PrimaryKey NotNull String token
		NotNull String userId
	}

	persistent ResetPassword {
		Unique PrimaryKey NotNull String token
		NotNull String userId
	}
	
	Role {
		String username
		String role
	} 
	DeleteUser {
		NotNull String usernameToBeDeleted
		NotNull String username
		NotNull String role
	}
	UserList {
		List User userList
		String role
	}
	ChangeUserRole {
		NotNull String editedUserId
		NotNull String newRole
		NotNull String userId
		NotNull String role
	} 
	
	UsernameAvailable {
		NotNull String username
		Boolean available
	}
	
	ForgotPassword extends ResetPassword {
		NotNull String language
		NotNull String email
		NotNull String username
	}

	ResetPasswordWithNewPassword extends ResetPassword {
		NotNull String password
	}
	
	UserRegistration extends User, EmailConfirmation {
		NotNull String language
	}
	
	ConfirmEmail extends EmailConfirmation {
		String username
	}



