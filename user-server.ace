com.anfelisa.user

target JAVA

models {
	persistent User {
		primitiveAttributes {
			Unique PrimaryKey NotNull String username
			NotNull String password
			NotNull String name
			NotNull String prename
			NotNull String email
			NotNull String role
			NotNull Boolean emailConfirmed
		}
	}

	persistent LoginLog {
		primitiveAttributes {
			Unique PrimaryKey NotNull Serial loginLogId
			NotNull String username
			NotNull DateTime date
		}
	} 

	Credentials {
		primitiveAttributes {
			NotNull String credentialsUsername
			NotNull String credentialsRole
		}
	} 

	Points {
		primitiveAttributes {
			NotNull Integer points
		}
	} 

	Username {
		primitiveAttributes {
			NotNull String username
		}
	} 
	Available {
		primitiveAttributes {
			Boolean available
		}
	}
	UsernameAndPassword {
		primitiveAttributes {
			NotNull String username
			NotNull String password
		}
	} 
	UserUpdate {
		primitiveAttributes {
			NotNull String username
			NotNull String name
			NotNull String prename
			NotNull String email
		}
	}
	CourseSelection {
		primitiveAttributes {
			List Integer courseIdList
		}
	}
	
	CourseId {
		primitiveAttributes {
			Integer courseId
		}
	}
	
	ForgotPassword {
		primitiveAttributes {
			NotNull String username
			NotNull String email
			NotNull String name
			NotNull String prename
			NotNull String password
		}
	}
	Language {
		primitiveAttributes {
			NotNull String language
		}
	}
}

data {
	UserCreation : ( User )
	Login : ( LoginLog Credentials )
	Points : ( Points Credentials )
	UserInfo : (User com.anfelisa.course.CourseList com.anfelisa.box.MyBoxList Username)
	UserUpdate : (UserUpdate)
	CourseSelection : (com.anfelisa.course.CourseList Username)
	AddCourses : (CourseSelection Username)
	RemoveCourse : (CourseId Username)
	PasswordUpdate : (UsernameAndPassword)
	ForgotPassword : (ForgotPassword Language)
	UsernameAvailable : (Username Available)
	UserRegistration : (User Language)
	Username : (Username)
}

actions {
	POST CreateUser uses UserCreation executes CreateUser 
	POST Login uses Login executes Login
	GET GetPoints uses Points
	GET GetUserInfo uses UserInfo
	PUT UpdateUser uses UserUpdate executes UpdateUser
	GET GetCourseSelection uses CourseSelection
	POST AddCourses uses AddCourses executes AddCourses
	DELETE RemoveCourse uses RemoveCourse executes RemoveCourse
	PUT UpdatePassword uses PasswordUpdate executes UpdatePassword
	POST ForgotPassword uses ForgotPassword executes ForgotPassword
	POST RegisterUser uses UserRegistration executes RegisterUser
	GET UsernameAvailable uses UsernameAvailable
	PUT ConfirmEmail uses Username executes ConfirmEmail
}

commands {
	CreateUser uses UserCreation {
		on go publishes (UserCreated)
	}
	Login uses Login {
		on success publishes (UserLoggedIn)
	}
	UpdateUser uses UserUpdate {
		on success publishes ( UserUpdated )
	}
	AddCourses uses AddCourses {
		on success publishes (CoursesAdded)
	}
	RemoveCourse uses RemoveCourse {
		on success publishes (CourseRemoved)
	}
	UpdatePassword uses PasswordUpdate {
		on success publishes (PasswordUpdated)
	}
	ForgotPassword uses ForgotPassword {
		on ok publishes (SendEmail)
		on userNotFound 
	}
	RegisterUser uses UserRegistration {
		on ok publishes (UserRegistered SendRegistrationEmail)
	}
	ConfirmEmail uses Username {
		on ok publishes (EmailConfirmed)
	}
}

events {
	UserCreated uses UserCreation listenedToBy ( User.createUser	)
	UserRegistered uses UserRegistration listenedToBy ( User.registerUser	)
	UserLoggedIn uses Login listenedToBy ( LoginLog.userLoggedIn )
	UserUpdated uses UserUpdate listenedToBy (User.updateUser)
	CoursesAdded uses AddCourses listenedToBy (User.addCourses)
	CourseRemoved uses RemoveCourse listenedToBy ( User.removeCourse )
	PasswordUpdated uses PasswordUpdate listenedToBy (User.updatePassword)
	SendEmail uses ForgotPassword listenedToBy (User.sendForgotPasswordEmail)
	SendRegistrationEmail uses UserRegistration listenedToBy (User.sendRegistrationEmail)
	EmailConfirmed uses Username listenedToBy (User.confirmEmail)
}

views {
	User {
		createUser(UserCreation)
		updateUser(UserUpdate)
		addCourses(AddCourses)
		removeCourse(RemoveCourse)
		updatePassword(PasswordUpdate)
		sendForgotPasswordEmail(ForgotPassword)
		sendRegistrationEmail(UserRegistration)
		registerUser(UserRegistration)
		confirmEmail(Username)
	}
	LoginLog {
		userLoggedIn(Login)
	}
}