com.anfelisa.course

target JAVA

models {
	schema public
	persistent Course {
		primitiveAttributes {
			Unique PrimaryKey NotNull Serial courseId
			NotNull String name
			String description
			Integer sequence
			NotNull Boolean isPublic
			NotNull String author references com.anfelisa.user.User.username
		}
	}

	persistent StudentOfCourse {
		primitiveAttributes {
			NotNull String username references com.anfelisa.user.User.username
			NotNull Integer courseId references Course.courseId
		}
	} 

	CourseAbstract {
		primitiveAttributes {
			NotNull String courseName
			String courseDescription
			NotNull Boolean isPublic
			NotNull String courseAuthor
			NotNull Integer courseId
		}
	} 

	MyCourse {
		primitiveAttributes {
			NotNull Integer courseId
			NotNull String name
			String description
			Integer sequence
			NotNull Boolean isPublic
			NotNull String author
			NotNull Integer openTests
			NotNull Boolean hasOpenTests
		}
	}

	Statistics {
		primitiveAttributes {
			NotNull String username
			NotNull Integer year
			NotNull Integer month
			NotNull Integer points
			NotNull Integer maxPoints
			NotNull Integer rate
		}
	}

	StatisticsItem {
		primitiveAttributes {
			NotNull String type
			NotNull Boolean isBox
			NotNull Integer count
			NotNull Integer day
			NotNull String name
			NotNull Integer points
			NotNull Integer maxPoints
			NotNull Integer rate
		}
	} 
		
	CourseId {
		primitiveAttributes {
			NotNull Integer courseId
		}
	}

		
	CourseList {
		complexAttributes {
			List Course courseList
		}
	}
		
	MyCourseList {
		complexAttributes {
			List MyCourse myCourseList
		}
	}
		
	StatisticsItemList {
		complexAttributes {
			List StatisticsItem statisticsItemList
		}
	}
}

data {
	CourseCreation : ( Course )
	StudentToCourseAddition : (StudentOfCourse com.anfelisa.user.Credentials)
	CourseList: (CourseList)
	MyCourseList: (MyCourseList com.anfelisa.user.Username)
	Statistics: ( Statistics StatisticsItemList )
	Course : (Course)
}

actions {
	POST CreateCourse uses CourseCreation executes CreateCourse
	POST AddStudentToCourse uses StudentToCourseAddition executes AddStudentToCourse
	GET LoadPublicCourses uses CourseList
	GET LoadPrivateCourses uses MyCourseList
	GET LoadStatistics uses Statistics
	GET GetCourse uses Course
	PUT UpdateCourse uses Course executes UpdateCourse
}

commands {
	CreateCourse uses CourseCreation {
		on created publishes ( CourseCreated )
	}
	AddStudentToCourse uses StudentToCourseAddition {
		on added publishes ( StudentAddedToCourse)
	}
	UpdateCourse uses Course {
		on updated publishes (CourseUpdated)
	}
}

events {
	CourseCreated uses CourseCreation listenedToBy ( Course.createCourse )
	StudentAddedToCourse uses StudentToCourseAddition listenedToBy (StudentOfCourse.addStudentToCourse)
	CourseUpdated uses Course listenedToBy (Course.updateCourse)
}

views {
	Course {
		createCourse (CourseCreation)
		updateCourse(Course)
	}
	StudentOfCourse {
		addStudentToCourse (StudentToCourseAddition)
	}
}

